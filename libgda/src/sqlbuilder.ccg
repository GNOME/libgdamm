// -*- C++ -*- // this is for the .ccg, I realize gensig puts one in

/* sqlparser.cc
 * 
 * Copyright 2003 libgdamm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <libgdamm/sqlbuilder.h>
#include <libgda/gda-sql-builder.h>
#include <libgda/gda-enum-types.h>
#include <sql-parser/gda-sql-parser-enum-types.h>

namespace Gnome
{

namespace Gda
{

SqlBuilder::SqlBuilder(SqlStatementType type)
  : _CONSTRUCT("stmt-type", type)
{
  
}

guint SqlBuilder::add_id(const Glib::ustring& string)
{
  return gda_sql_builder_add_id(gobj(), 0, string.c_str());
}

guint SqlBuilder::add_expr(const Glib::RefPtr<DataHandler>& dh, Value value)
{
  return gda_sql_builder_add_expr_value(gobj(), 0, NULL, value.gobj());
}

guint SqlBuilder::add_expr(Value value)
{
  return gda_sql_builder_add_expr_value(gobj(), 0, NULL, value.gobj());
}

guint SqlBuilder::add_param(const Glib::ustring& param_name, GType type, bool nullok)
{
  return gda_sql_builder_add_param(gobj(), 0, param_name.c_str(), type, nullok);
}

guint SqlBuilder::add_cond(SqlOperatorType op, guint op1, guint op2, guint op3)
{
  return gda_sql_builder_add_cond(gobj(), 0, (GdaSqlOperatorType) op, op1, op2, op3);
}

guint SqlBuilder::add_cond_v(SqlOperatorType op, Glib::ArrayHandle<uint> op_ids)
{
  return gda_sql_builder_add_cond_v(gobj(), 0, (GdaSqlOperatorType) op, op_ids.data(), op_ids.size());
}

guint SqlBuilder::add_function(const Glib::ustring& function_name, Glib::ArrayHandle<guint> args)
{
  return gda_sql_builder_add_function_v(gobj(), 0, function_name.c_str(), args.data(), args.size());
}

guint SqlBuilder::select_add_target(guint table_id, const Glib::ustring& alias)
{
  return gda_sql_builder_select_add_target(gobj(), 0, table_id, alias.c_str());
}

guint SqlBuilder::select_add_target(guint table_id)
{
  return gda_sql_builder_select_add_target(gobj(), 0, table_id, NULL);
}

guint SqlBuilder::select_join_targets(guint left_target_id, guint right_target_id, SqlSelectJoinType join_type, guint join_expr)
{
  return gda_sql_builder_select_join_targets(gobj(), 0, left_target_id, right_target_id, (GdaSqlSelectJoinType) join_type, join_expr);
}

} /* namespace Gda */

} /* namespace Gnome */

