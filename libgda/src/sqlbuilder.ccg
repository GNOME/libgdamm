// -*- C++ -*- // this is for the .ccg, I realize gensig puts one in

/* sqlparser.cc
 *
 * Copyright 2003 libgdamm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <libgdamm/sqlbuilder.h>
#include <libgda/gda-sql-builder.h>
#include <libgda/gda-enums.h>
#include <sql-parser/gda-sql-parser-enum-types.h>

namespace Gnome
{

namespace Gda
{

//TODO: Put this in glibmm and use it generally:
static const char* string_or_null(const Glib::ustring& str)
{
  if(str.empty())
    return 0; //Avoid returning "", because not all C functions check for it properly.
  else
    return str.c_str();
}

//For the return types of gmmproc-generated code:
typedef SqlBuilder::Id Id;

SqlBuilder::SqlBuilder(SqlStatement::Type type)
  : _CONSTRUCT("stmt-type", type)
{

}

//TODO: Use _WRAP_METHOD() for these instead now that they are simple.
SqlBuilder::Id SqlBuilder::add_sub_select(const SqlStatement& sqlst)
{
  return gda_sql_builder_add_sub_select(gobj(), const_cast<GdaSqlStatement*>(sqlst.gobj()));
}

SqlBuilder::Id SqlBuilder::add_expr_as_value(const Glib::RefPtr<DataHandler>& dh, const Value& value)
{
  return gda_sql_builder_add_expr_value(gobj(), dh->gobj(), const_cast<GValue*>(value.gobj()));
}

SqlBuilder::Id SqlBuilder::add_expr_as_value(const Value& value)
{
  return gda_sql_builder_add_expr_value(gobj(), 0, const_cast<GValue*>(value.gobj()));
}

SqlBuilder::Id SqlBuilder::add_param(const Glib::ustring& param_name, GType type, bool nullok)
{
  return gda_sql_builder_add_param(gobj(), param_name.c_str(), type, nullok);
}

SqlBuilder::Id SqlBuilder::add_cond(SqlOperatorType op, Id op1, Id op2, Id op3)
{
  return gda_sql_builder_add_cond(gobj(), (GdaSqlOperatorType) op, op1, op2, op3);
}

SqlBuilder::Id SqlBuilder::add_cond(SqlOperatorType op, const std::vector<Id>& op_ids)
{
  return gda_sql_builder_add_cond_v(gobj(), (GdaSqlOperatorType) op, op_ids.data(), op_ids.size());
}

SqlBuilder::Id SqlBuilder::add_function(const Glib::ustring& function_name, const std::vector<Id>& args)
{
  return gda_sql_builder_add_function_v(gobj(), function_name.c_str(), args.data(), args.size());
}

SqlBuilder::Id SqlBuilder::add_function(const Glib::ustring& function_name, Id arg)
{
  return gda_sql_builder_add_function(gobj(), function_name.c_str(), arg, 0, 0);
}

SqlBuilder::Id SqlBuilder::select_add_target(const Glib::ustring& table_name, const Glib::ustring& alias)
{
  return gda_sql_builder_select_add_target(gobj(), table_name.c_str(), string_or_null(alias));
}

SqlBuilder::Id SqlBuilder::select_join_targets(Id left_target_id, Id right_target_id, SqlSelectJoinType join_type, Id join_expr)
{
  return gda_sql_builder_select_join_targets(gobj(), left_target_id, right_target_id, (GdaSqlSelectJoinType) join_type, join_expr);
}

void SqlBuilder::select_set_distinct(bool distinct)
{
  gda_sql_builder_select_set_distinct(gobj(), distinct, 0);
}

void SqlBuilder::select_set_limit(Id limit_count, Id offset)
{
  const Id id_limit = add_expr(limit_count);

  Id id_offset = 0;
  if(offset != 0)
    id_offset = add_expr(offset);

  gda_sql_builder_select_set_limit(gobj(), id_limit, id_offset);
}


SqlBuilder::Id SqlBuilder::import_expression(const SqlExpr& expr)
{
  return gda_sql_builder_import_expression(gobj(), const_cast<GdaSqlExpr*>((expr).gobj()));
}


} /* namespace Gda */

} /* namespace Gnome */
