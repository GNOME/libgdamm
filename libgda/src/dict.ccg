/* $Id: dict.ccg,v 1.3 2006/11/30 06:58:55 murrayc Exp $ */
// -*- C++ -*- // this is for the .ccg, I realize gensig puts one in

/* dict.cc
 * 
 * Copyright 2003 libgdamm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <libgda/gda-dict-reg-aggregates.h>
#include <libgda/gda-dict-type.h>
#include <libgda/gda-dict.h>
#include <libgdamm/connection.h>
#include <libgda/gda-enum-types.h>

namespace Gnome
{

namespace Gda
{

GSList* Dict::get_dict_types() const
{
  return gda_dict_get_dict_types(const_cast<GdaDict*>(gobj()));
}

GdaDictType* Dict::get_dict_type_by_name(const Glib::ustring& type_name)
{
  return gda_dict_get_dict_type_by_name(gobj(), type_name.c_str());
}

GdaDictType* Dict::get_data_type_by_xml_id(const Glib::ustring& xml_id)
{
  return gda_dict_get_dict_type_by_xml_id(gobj(), xml_id.c_str());
}

GSList* Dict::get_aggregates() const
{
  return gda_dict_get_aggregates(const_cast<GdaDict*>(gobj()));
}

#if 0
GSList* Dict::get_aggregates_by_name(const Glib::ustring& aggname)
{
  return gda_dict_get_aggregates_by_name(gobj(), aggname.c_str());
}

Glib::RefPtr<DictAggregate> Dict::get_aggregate_by_name_arg(const Glib::ustring& aggname, GdaDictType *argtype)
{
  return Glib::wrap(gda_dict_get_aggregate_by_name_arg(gobj(), aggname.c_str(), argtype));
}

Glib::RefPtr<DictAggregate> Dict::get_aggregate_by_xml_id(const Glib::ustring& xml_id)
{
  return Glib::wrap(GDA_DICT_AGGREGATE(gda_dict_get_aggregate_by_xml_id(gobj(), xml_id.c_str())));
}

Glib::RefPtr<DictAggregate> Dict::get_aggregate_by_dbms_id(const Glib::ustring& dbms_id)
{
  return Glib::wrap(GDA_DICT_AGGREGATE(gda_dict_get_aggregate_by_dbms_id(gobj(), dbms_id.c_str())));
}
#endif

} /* namespace Gda */
} /* namespace Gnome */

