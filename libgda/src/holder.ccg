// -*- C++ -*- // this is for the .ccg, I realize gensig puts one in

/* holder.cc
 * 
 * Copyright 2003 libgdamm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <libgdamm/holder.h>
#include <libgdamm/datamodel.h>
#include <libgda/gda-holder.h>

namespace Gnome
{

namespace Gda
{

#ifdef GLIBMM_EXCEPTIONS_ENABLED
Glib::ValueBase Holder::take_static_value (const Glib::ValueBase& value, bool& value_changed)
#else
Glib::ValueBase Holder::take_static_value (const Glib::ValueBase& value, bool& value_changed, std::auto_ptr<Glib::Error>& error)
#endif
{
  GError* gerror = 0;
  Glib::ValueBase retval;
  const GValue* cvalue;
  //Note that the function does not return a new value, so we should not free it:
  cvalue = gda_holder_take_static_value(gobj(), value.gobj(), (gboolean*)&value_changed, &gerror);
#ifdef GLIBMM_EXCEPTIONS_ENABLED
  if(gerror)
    ::Glib::Error::throw_exception(gerror);
#else
  if(gerror)
    error = ::Glib::Error::throw_exception(gerror);
#endif //GLIBMM_EXCEPTIONS_ENABLED
  retval.init(cvalue);
  return retval;  
}

Glib::ValueBase Holder::get_value()
{
  Glib::ValueBase retval;
  const GValue* value = gda_holder_get_value(gobj());
  retval.init(value);
  return retval;
}

Glib::ValueBase Holder::get_default_value()
{
  Glib::ValueBase retval;
  const GValue* value = gda_holder_get_default_value(gobj());
  retval.init(value);
  return retval;
}

} /* namespace Gda */

} /* namespace Gnome */

