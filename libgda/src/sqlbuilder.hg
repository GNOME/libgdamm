// -*- C++ -*- //

/* sqlbuilder.h
 *
 * Copyright 2006 libgdamm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or(at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <libgdamm/statement.h>

_DEFS(libgdamm,libgda)
_PINCLUDE(glibmm/private/object_p.h)

namespace Gnome
{

namespace Gda
{

_WRAP_ENUM(SqlOperatorType, GdaSqlOperatorType)
_WRAP_ENUM(SqlSelectJoinType, GdaSqlSelectJoinType)
_WRAP_GERROR(SqlBuilderError, GdaSqlBuilderError, GDA_SQL_BUILDER_ERROR)

/*
 * @ingroup Connection
 */
class SqlBuilder : public Glib::Object
{
  _CLASS_GOBJECT(SqlBuilder, GdaSqlBuilder, GDA_SQL_BUILDER, Glib::Object, GObject)
protected:
  SqlBuilder(SqlStatementType type);
public:
  _WRAP_CREATE(SqlStatementType type)

  _WRAP_METHOD(Glib::RefPtr<Statement> get_statement(), gda_sql_builder_get_statement, errthrow)
  // TODO: Wrap SqlStatement
  //_WRAP_METHOD(Glib::RefPtr<SqlStatement> get_sql_statement(bool copy_it), gda_sql_builder_get_sql_statement, errthrow)

  // Expression API
  _WRAP_METHOD(guint ident(guint id, const Glib::ustring& string), gda_sql_builder_ident)
  _IGNORE(gda_sql_builder_expr)
  _WRAP_METHOD(guint expr(guint id, const Glib::RefPtr<DataHandler>& dh, Value value), gda_sql_builder_expr_value)
   /** Defines an expression in Builder which may be reused to build other parts of a statement.
   * @param id: the requested ID, or 0 if to be determined automatically
   * @param value: value to set the expression to
   * 
   * See expr() except that no custom datahandler is given 
   *
   * @return the ID of the new expression, or 0 if there was an error
   */
  guint expr(guint id, Value value);
  _WRAP_METHOD(guint param(guint id, const Glib::ustring& param_name, GType type, bool nullok), gda_sql_builder_param)
  _WRAP_METHOD(guint cond(guint id, SqlOperatorType op, guint op1, guint op2, guint op3), gda_sql_builder_cond)
  _WRAP_METHOD_DOCS_ONLY(gda_sql_builder_cond_v)
  guint cond_v(guint id, SqlOperatorType op, Glib::ArrayHandle<guint> op_ids);

  // Statement API
  _WRAP_METHOD(guint select_add_target(guint id, guint table_id, const Glib::ustring& alias), gda_sql_builder_select_add_target)
  _WRAP_METHOD(guint select_join_targets(guint id, guint left_target_id, guint right_target_id, SqlSelectJoinType join_type, guint join_expr), gda_sql_builder_select_join_targets)
  _WRAP_METHOD(void join_add_field(guint join_id, const Glib::ustring& field_name), gda_sql_builder_join_add_field)
  _WRAP_METHOD(void select_order_by(guint expr_id, bool asc, const Glib::ustring& collation_name), gda_sql_builder_select_order_by)
  
  // General Statement API
  _WRAP_METHOD(void set_table(const Glib::ustring& table_name), gda_sql_builder_set_table)
  _WRAP_METHOD(void set_where(guint cond_id), gda_sql_builder_set_where)
  _WRAP_METHOD(void add_field(guint field_id, guint value_id), gda_sql_builder_add_field)
  
};

} // namespace Gda
} // namespace Gnome

