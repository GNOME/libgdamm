/* $Id: serveroperation.ccg,v 1.1 2006/07/04 16:39:22 murrayc Exp $ */
// -*- C++ -*- // this is for the .ccg, I realize gensig puts one in

/* serveroperation.cc
 * 
 * Copyright 2006 libgdamm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <libgda/gda-server-operation.h>
#include <libgda/gda-enum-types.h>
#include <libgda/gda-easy.h>
#include <libgdamm/connection.h>

namespace Gnome
{

namespace Gda
{

#ifdef GLIBMM_EXCEPTIONS_ENABLED
Glib::RefPtr<ServerOperation> ServerOperation::prepare_create_database(const Glib::ustring& provider,
                                                                       const Glib::ustring& db_name)
#else
Glib::RefPtr<ServerOperation> ServerOperation::prepare_create_database(const Glib::ustring& provider,
                                                                       const Glib::ustring& db_name,
                                                                       std::auto_ptr<Glib::Error>& error)
#endif
{
  GError* gerror = 0;
  Glib::RefPtr<ServerOperation> op = 
    Glib::wrap(gda_prepare_create_database(provider.c_str(), db_name.c_str(), &gerror));

#ifdef GLIBMM_EXCEPTIONS_ENABLED
  if(gerror) ::Glib::Error::throw_exception(gerror);
#else
  if(gerror) error = ::Glib::Error::throw_exception(gerror);
#endif // GLIBMM_EXCEPTIONS_ENABLED
  
  return op;   
}

#ifdef GLIBMM_EXCEPTIONS_ENABLED
Glib::RefPtr<ServerOperation> ServerOperation::prepare_drop_database(const Glib::ustring& provider,
                                                                     const Glib::ustring& db_name)
#else
Glib::RefPtr<ServerOperation> ServerOperation::prepare_drop_database(const Glib::ustring& provider,
                                                                     const Glib::ustring& db_name,
                                                                     std::auto_ptr<Glib::Error>& error)
#endif
{
  GError* gerror = 0;
  Glib::RefPtr<ServerOperation> op = 
    Glib::wrap(gda_prepare_drop_database(provider.c_str(), db_name.c_str(), &gerror));

#ifdef GLIBMM_EXCEPTIONS_ENABLED
  if(gerror) ::Glib::Error::throw_exception(gerror);
#else
  if(gerror) error = ::Glib::Error::throw_exception(gerror);
#endif // GLIBMM_EXCEPTIONS_ENABLED
  
  return op;   
}

#ifdef GLIBMM_EXCEPTIONS_ENABLED
bool ServerOperation::perform_drop_database(const Glib::ustring& provider)
#else
bool ServerOperation::perform_drop_database(const Glib::ustring& provider,
                                            std::auto_ptr<Glib::Error>& error)
#endif
{
  GError* gerror = 0;
  bool retval = 
    static_cast<bool>(gda_perform_drop_database(provider.c_str(), gobj(), &gerror));

#ifdef GLIBMM_EXCEPTIONS_ENABLED
  if(gerror) ::Glib::Error::throw_exception(gerror);
#else
  if(gerror) error = ::Glib::Error::throw_exception(gerror);
#endif // GLIBMM_EXCEPTIONS_ENABLED
  
  return retval;
}

#ifdef GLIBMM_EXCEPTIONS_ENABLED
bool ServerOperation::perform_create_database(const Glib::ustring& provider)
#else
bool ServerOperation::perform_create_database(const Glib::ustring& provider,
                                              std::auto_ptr<Glib::Error>& error)
#endif
{
  GError* gerror = 0;
  bool retval = 
    static_cast<bool>(gda_perform_create_database(provider.c_str(), gobj(), &gerror));

#ifdef GLIBMM_EXCEPTIONS_ENABLED
  if(gerror) ::Glib::Error::throw_exception(gerror);
#else
  if(gerror) error = ::Glib::Error::throw_exception(gerror);
#endif // GLIBMM_EXCEPTIONS_ENABLED
  
  return retval;
}

Value ServerOperation::get_value_at(const Glib::ustring& path) const
{
  Value retval;
  const GValue* value = gda_server_operation_get_value_at(const_cast<GdaServerOperation*>(gobj()), "%s", path.c_str());
  retval.init(value);
  return retval;
}  

#ifdef GLIBMM_EXCEPTIONS_ENABLED
void ServerOperation::set_value_at_as_value(const Glib::ustring& path, const Glib::ValueBase& value)
#else
void ServerOperation::set_value_at_as_value(const Glib::ustring& path, const Glib::ValueBase& value, std::auto_ptr<Glib::Error>& error)
#endif // GLIBMM_EXCEPTIONS_ENABLED
{
  gchar* strvalue = gda_value_stringify(value.gobj());
  GError* gerror = 0;
  gda_server_operation_set_value_at(gobj(), strvalue, &gerror, "%s", path.c_str());
  g_free(strvalue);

#ifdef GLIBMM_EXCEPTIONS_ENABLED
  if(gerror) ::Glib::Error::throw_exception(gerror);
#else
  if(gerror) error = ::Glib::Error::throw_exception(gerror);
#endif // GLIBMM_EXCEPTIONS_ENABLED
}

} /* namespace Gda */

} /* namespace Gnome */

