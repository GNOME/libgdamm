/* $Id: connection.ccg,v 1.18 2006/11/30 06:58:55 murrayc Exp $ */
// -*- C++ -*- //

/* connection.cc
 *
 * Copyright 2003 libgdamm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <libgdamm/serverprovider.h>
#include <libgdamm/metastore.h>
#include <libgda/gda-enum-types.h>
#include <libgda/gda-connection.h>
#include <sql-parser/gda-sql-parser.h> //For gda_sql_identifier_quote().
#include <libgda/libgda.h> //For GDA_GENERAL_ERROR
#include <iostream>

using Options = Gnome::Gda::Connection::Options;
using MetaType = Gnome::Gda::Connection::MetaType;

namespace Gnome
{

namespace Gda
{

Connection::~Connection()
{
  //Make sure the connection is closed.
  //An open connection with no associated connection object could never be closed.
  if(gobj())
  {
    if(is_opened())
      close();
  }
}

Glib::RefPtr<Connection> Connection::open_from_string(const Glib::ustring& provider_name,
                                                       const Glib::ustring& cnc_string,
                                                       const Glib::ustring& auth_string,
                                                       Options options)
{
  GError* gerror = 0;
  Glib::RefPtr<Connection> retval = Glib::wrap(gda_connection_open_from_string(provider_name.c_str(),
                                                                                cnc_string.c_str(),
                                                                                auth_string.c_str(),
                                                                                (GdaConnectionOptions)options,
                                                                                &gerror));
  if(gerror)
    ::Glib::Error::throw_exception(gerror);
  return retval;
}

void Connection::close()
{
  //gda_connection_close() does an unref, but we don't want that:
  reference();

  GError* gerror = 0;
  gda_connection_close(gobj(), &gerror);
  if(gerror)
    ::Glib::Error::throw_exception(gerror);
}

Glib::RefPtr<Glib::Object> Connection::statement_execute(const Glib::RefPtr<const Statement>& cmd, const Glib::RefPtr<const Set>& params, Statement::ModelUsage model_usage, Glib::RefPtr<const Set>& last_inserted_row)
{
  GError* gerror = 0;
  GdaSet* lir = 0;
  Glib::RefPtr<Glib::Object> retval = Glib::wrap(
    gda_connection_statement_execute(gobj(), const_cast<GdaStatement*>(cmd->gobj()), const_cast<GdaSet*>(Glib::unwrap(params)), (GdaStatementModelUsage)model_usage, &lir, &gerror));

  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  if(lir)
    last_inserted_row = Glib::wrap(lir);

  return retval;
}

Glib::RefPtr<Glib::Object> Connection::statement_execute(const Glib::RefPtr<const Statement>& stmt, Statement::ModelUsage model_usage)
{
  GError* gerror = 0;
  Glib::RefPtr<Glib::Object> retval = Glib::wrap(
    gda_connection_statement_execute(gobj(), const_cast<GdaStatement*>(Glib::unwrap(stmt)), 0, (GdaStatementModelUsage)model_usage, 0, &gerror));

  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return retval;
}

Glib::RefPtr<Glib::Object> Connection::statement_execute(const Glib::ustring& sql, Statement::ModelUsage model_usage)
{
  Glib::RefPtr<const Statement> stmt;
  Glib::RefPtr<SqlParser> parser = create_parser();
  if(parser)
  {
    stmt = parser->parse_string(sql);
  }
  else
    std::cerr << "Gda::Connection::statement_execute(): Couldn't create parser" << std::endl;

  if(!stmt)
    return Glib::RefPtr<Glib::Object>();

  return statement_execute(stmt, model_usage);
}

int Connection::statement_execute_non_select(const Glib::RefPtr<const Statement>& cmd, const Glib::RefPtr<const Set>& params, Glib::RefPtr<const Set>& last_inserted_row)
{
  GError* gerror = 0;
  GdaSet* lir = 0;
  const int retval = gda_connection_statement_execute_non_select(gobj(), const_cast<GdaStatement*>(Glib::unwrap(cmd)),  const_cast<GdaSet*>(Glib::unwrap(params)), &lir, &gerror);

  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  if(lir)
    last_inserted_row = Glib::wrap(lir);

  return retval;
}

int Connection::statement_execute_non_select(const Glib::RefPtr<const Statement>& cmd, const Glib::RefPtr<const Set>& params)
{
  GError* gerror = 0;
  const int retval = gda_connection_statement_execute_non_select(gobj(), const_cast<GdaStatement*>(Glib::unwrap(cmd)),  const_cast<GdaSet*>(Glib::unwrap(params)), 0, &gerror);

  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return retval;
}

int Connection::statement_execute_non_select(const Glib::RefPtr<const Statement>& cmd)
{
  GError* gerror = 0;
  const int retval = gda_connection_statement_execute_non_select(gobj(), const_cast<GdaStatement*>(Glib::unwrap(cmd)), 0, 0, &gerror);

  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return retval;
}

int Connection::statement_execute_non_select_builder(const Glib::RefPtr<const SqlBuilder>& builder)
{
  Glib::RefPtr<Gnome::Gda::Statement> stmt = builder->get_statement(); //Allow any exceptions to be thrown up to the caller.

  if(!stmt)
     return 0;

  return statement_execute_non_select(stmt);
}

int Connection::statement_execute_non_select_builder(const Glib::RefPtr<const SqlBuilder>& builder, const Glib::RefPtr<const Set>& params)
{
  Glib::RefPtr<Gnome::Gda::Statement> stmt = builder->get_statement(); //Allow any exceptions to be thrown up to the caller.

  if(!stmt)
     return 0;

  return statement_execute_non_select(stmt, params);
}

Glib::ustring Connection::statement_to_sql(const Glib::RefPtr<const Statement>& statement, const Glib::RefPtr<const Set>& params, Statement::SqlFlag flags, std::vector< Glib::RefPtr<Holder> >& params_used) const
{
  GError* gerror = 0;
  GSList* params_usedc = 0;
  const Glib::ustring retvalue = Glib::convert_return_gchar_ptr_to_ustring(gda_connection_statement_to_sql(const_cast<GdaConnection*>(gobj()), const_cast<GdaStatement*>(Glib::unwrap(statement)), const_cast<GdaSet*>(Glib::unwrap(params)), ((GdaStatementSqlFlag)(flags)), &params_usedc, &(gerror)));

  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  std::vector< Glib::RefPtr<Holder> > params_usedcpp
    = Glib::SListHandler< Glib::RefPtr<Holder> >::slist_to_vector(params_usedc, Glib::OWNERSHIP_SHALLOW);
  for(std::vector< Glib::RefPtr<Holder> >::const_iterator i = params_usedcpp.begin();
       i != params_usedcpp.end(); i++)
  {
    params_used.push_back(*i);
  }

  return retvalue;
}


Glib::ustring Connection::statement_to_sql(const Glib::RefPtr<const Statement>& statement, const Glib::RefPtr<const Set>& params, Statement::SqlFlag flags) const
{
  GError* gerror = 0;
  const Glib::ustring retvalue = Glib::convert_return_gchar_ptr_to_ustring(gda_connection_statement_to_sql(const_cast<GdaConnection*>(gobj()), const_cast<GdaStatement*>(Glib::unwrap(statement)), const_cast<GdaSet*>(Glib::unwrap(params)), ((GdaStatementSqlFlag)(flags)), 0, &(gerror)));

  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;
}
  

Glib::ustring Connection::statement_to_sql(const Glib::RefPtr<const Statement>& statement, Statement::SqlFlag flags) const
{
  GError* gerror = 0;
  const Glib::ustring retvalue = Glib::convert_return_gchar_ptr_to_ustring(gda_connection_statement_to_sql(const_cast<GdaConnection*>(gobj()), const_cast<GdaStatement*>(Glib::unwrap(statement)), 0, ((GdaStatementSqlFlag)(flags)), 0, &(gerror)));

  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;
}
  

Glib::RefPtr<DataModel> Connection::statement_execute_select(const Glib::RefPtr<const Statement>& stmt, Statement::ModelUsage model_usage)
{
  GError* gerror = 0;
  Glib::RefPtr<DataModel> retvalue = Glib::wrap(gda_connection_statement_execute_select_full(gobj(), const_cast<GdaStatement*>(Glib::unwrap(stmt)), 0 /* params */, ((GdaStatementModelUsage)(model_usage)), 0 /* col_types */, &(gerror)));

  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;
}

Glib::RefPtr<DataModel> Connection::statement_execute_select(const Glib::RefPtr<const Statement>& stmt, const Glib::RefPtr<const Set>& params, Statement::ModelUsage model_usage)
{
  GError* gerror = 0;
  Glib::RefPtr<DataModel> retvalue = Glib::wrap(gda_connection_statement_execute_select_full(gobj(), const_cast<GdaStatement*>(Glib::unwrap(stmt)), const_cast<GdaSet*>(Glib::unwrap(params)), ((GdaStatementModelUsage)(model_usage)), 0 /* col_types */, &(gerror)));

  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;
}


Glib::RefPtr<DataModel> Connection::statement_execute_select_builder(const Glib::RefPtr<const SqlBuilder>& builder, Statement::ModelUsage model_usage)
{
  Glib::RefPtr<Gnome::Gda::Statement> stmt = builder->get_statement(); //Allow any exceptions to be thrown up to the caller.

  if(!stmt)
     return Glib::RefPtr<DataModel>();

  return statement_execute_select(stmt, model_usage);
}


Glib::RefPtr<DataModel> Connection::statement_execute_select_builder(const Glib::RefPtr<const SqlBuilder>& builder, const Glib::RefPtr<const Set>& params, Statement::ModelUsage model_usage)
{
  Glib::RefPtr<Gnome::Gda::Statement> stmt = builder->get_statement(); //Allow any exceptions to be thrown up to the caller.

  if(!stmt)
     return Glib::RefPtr<DataModel>();

  return statement_execute_select(stmt, params, model_usage);
}

Glib::RefPtr<DataModel> Connection::statement_execute_select(const Glib::ustring& sql, Statement::ModelUsage model_usage)
{
  Glib::RefPtr<const Statement> stmt;
  Glib::RefPtr<SqlParser> parser = create_parser();
  if(parser)
  {
    stmt = parser->parse_string(sql);
  }

  if(!stmt)
    return Glib::RefPtr<DataModel>();

  GError* gerror = 0;
  Glib::RefPtr<DataModel> retvalue = Glib::wrap(gda_connection_statement_execute_select_full(gobj(), const_cast<GdaStatement*>(Glib::unwrap(stmt)), 0 /* params */, ((GdaStatementModelUsage)(model_usage)), 0 /* col_types */, &(gerror)));

  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;
}

Glib::RefPtr<DataModel> Connection::statement_execute_select(const Glib::ustring& sql, const Glib::RefPtr<const Set>& params, Statement::ModelUsage model_usage)
{
  Glib::RefPtr<const Statement> stmt;
  Glib::RefPtr<SqlParser> parser = create_parser();
  if(parser)
  {
    stmt = parser->parse_string(sql);
  }

  if(!stmt)
    return Glib::RefPtr<DataModel>();

  GError* gerror = 0;
  Glib::RefPtr<DataModel> retvalue = Glib::wrap(gda_connection_statement_execute_select_full(gobj(), const_cast<GdaStatement*>(Glib::unwrap(stmt)), const_cast<GdaSet*>(Glib::unwrap(params)), ((GdaStatementModelUsage)(model_usage)), 0 /* col_types */, &(gerror)));

  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;
}


bool Connection::update_meta_store()
{
  GError* gerror = 0;
  const bool retvalue = gda_connection_update_meta_store(gobj(), 0, &gerror);

  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;
}

bool Connection::update_meta_store(const Glib::ustring& id)
{
  GError* gerror = 0;
  GdaMetaContext mcontext = {const_cast<gchar*>(id.c_str()), 1, 0, 0};
  const bool retvalue = gda_connection_update_meta_store(gobj(), &mcontext, &gerror);

  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;
}

Glib::RefPtr<DataModel> Connection::get_meta_store_data(MetaType meta_type)
{
  GError* gerror = 0;
  Glib::RefPtr<DataModel> retvalue = Glib::wrap(gda_connection_get_meta_store_data_v(gobj(), ((GdaConnectionMetaType)(meta_type)), 0, &(gerror)));

  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;
}

bool Connection::update_meta_store_table(const Glib::ustring& table_name, const Glib::ustring& schema_name)
{
  // This function is needed to make sure that
  // the GdaMetaStore really gets the meta data for the table we specified, even if
  // the table name contains upper-case characters or spaces. murrayc.
  gchar* table_name_quoted = gda_meta_store_sql_identifier_quote (table_name.c_str(), gobj());
  //std::cout << "Connection::update_meta_store_table(): table_name_quoted=" << table_name_quoted << std::endl;

  GValue table_name_value = { 0 };
  g_value_init(&table_name_value, G_TYPE_STRING);
  g_value_set_static_string(&table_name_value, table_name_quoted);

  GValue table_schema_value = { 0 };
  g_value_init(&table_schema_value, G_TYPE_STRING);
  g_value_set_static_string(&table_schema_value, schema_name.c_str());

  gchar* column_names[] = { (gchar*)"table_name" , (gchar*)"table_schema"};
  GValue* column_values[] = { &table_name_value, &table_schema_value };

  GdaMetaContext mcontext = {(gchar*)"_tables", schema_name.empty() ? 1 : 2, column_names, column_values };
  GError* gerror = 0;
  const bool retval = gda_connection_update_meta_store(gobj(), &mcontext, &gerror);

  g_value_unset(&table_name_value);
  g_value_unset(&table_schema_value);

  g_free(table_name_quoted);

  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return retval;
}

bool Connection::update_meta_store_table_names(const Glib::ustring& schema_name)
{
  GValue table_schema_value = { 0 };
  g_value_init(&table_schema_value, G_TYPE_STRING);
  g_value_set_static_string(&table_schema_value, schema_name.c_str());

  gchar* column_names[] = { (gchar*)"table_schema"};
  GValue* column_values[] = { &table_schema_value };

  GdaMetaContext mcontext = {(gchar*)"_tables", schema_name.empty() ? 0 : 1, column_names, column_values };
  GError* gerror = 0;
  const bool retval = gda_connection_update_meta_store(gobj(), &mcontext, &gerror);

  g_value_unset(&table_schema_value);

  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return retval;
}

bool Connection::update_meta_store_data_types()
{
  GdaMetaContext mcontext = {(gchar*)"_builtin_data_types", 0, 0, 0 };
  GError* gerror = 0;
  const bool retval = gda_connection_update_meta_store(gobj(), &mcontext, &gerror);

  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return retval;
}

Glib::RefPtr<Statement> Connection::parse_sql_string(const Glib::ustring& sql)
{
  GError* gerror = 0;
  Glib::RefPtr<Statement> retvalue = Glib::wrap(gda_connection_parse_sql_string(gobj(), sql.c_str(), 0 /* see C docs */, &(gerror)));
  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;
}

} //namespace Gda

} //namespace Gnome
