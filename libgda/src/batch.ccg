// -*- C++ -*- // this is for the .ccg, I realize gensig puts one in

/* batch.cc
 * 
 * Copyright 2003 libgdamm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <libgdamm/batch.h>
#include <libgda/gda-batch.h>


namespace Gnome
{

namespace Gda
{

//Fix compilation of our generated code:
typedef Batch::StatementVector StatementVector;


#ifdef GLIBMM_EXCEPTIONS_ENABLED
bool Batch::get_parameters(Glib::RefPtr<Set>& out_params)
#else
bool Batch::get_parameters(Glib::RefPtr<Set>& out_params, std::auto_ptr<Glib::Error>& error)
#endif //GLIBMM_EXCEPTIONS_ENABLED
{
  GError* gerror = 0;
  GdaSet* set = 0;
  bool retval = gda_batch_get_parameters(gobj(), &set, &gerror);
#ifdef GLIBMM_EXCEPTIONS_ENABLED
  if(gerror)
    ::Glib::Error::throw_exception(gerror);
#else
  if(gerror)
    error = ::Glib::Error::throw_exception(gerror);
#endif //GLIBMM_EXCEPTIONS_ENABLED
  if (set)
  {
    out_params = Glib::wrap(set);
  }
  return retval;
}
  
}

} /* namespace Gnome */

