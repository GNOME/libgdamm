/* $Id: datamodel.hg,v 1.32 2006/12/15 15:02:27 murrayc Exp $ */
// -*- C++ -*- // this is for the .hg, I realize gensig puts one in

/* datamodel.h
 *
 * Copyright 2003 libgdamm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <glibmm/object.h>
#include <libgdamm/command.h>
#include <libgdamm/row.h>
#include <libgdamm/column.h>
#include <libgdamm/parameterlist.h>
//#include <libgdamm/serverprovider.h>
#include <libgda/gda-data-model.h>

_DEFS(libgdamm,libgda)
_PINCLUDE(glibmm/private/object_p.h)

//TODO: Wrap this properly.
typedef struct _GdaDataModelIter GdaDataModelIter;

namespace Gnome
{

namespace Gda
{

class Row;
class ServerProvider;

_WRAP_ENUM(DataModelHint, GdaDataModelHint)
_WRAP_ENUM(DataModelIOFormat, GdaDataModelIOFormat)

class DataModel : public Glib::Interface
{
  _CLASS_INTERFACE(DataModel, GdaDataModel, GDA_DATA_MODEL, GdaDataModelClass)
public:

  _WRAP_METHOD(void freeze(), gda_data_model_freeze)  
  _WRAP_METHOD(void thaw(), gda_data_model_thaw)

  _WRAP_METHOD(int get_n_rows() const, gda_data_model_get_n_rows)
  _WRAP_METHOD(int get_n_columns() const, gda_data_model_get_n_columns)

  _WRAP_METHOD(Glib::RefPtr<Column> describe_column(int col), gda_data_model_describe_column)
  _WRAP_METHOD(Glib::RefPtr<const Column> describe_column(int col) const, gda_data_model_describe_column)
  _WRAP_METHOD(int get_column_index(const Glib::ustring& name) const, gda_data_model_get_column_index_by_name)
  _WRAP_METHOD(Glib::ustring get_column_title(int col) const, gda_data_model_get_column_title)
  _WRAP_METHOD(void set_column_title(int col, const Glib::ustring& title), gda_data_model_set_column_title)
  //TODO:_WRAP_METHOD(int get_column_position(const Glib::ustring& title) const, gda_data_model_get_column_position)

  //We use a custom conversion here, because we need to copy the value:
  //#m4 _CONVERSION(`GValue*',`Value',`Glib::wrap($3, true /* take_copy=true */)')
  //#m4 _CONVERSION(`const GValue*',`Value',`Glib::wrap(const_cast<GValue*>($3), true /* take_copy */)')
 
  Value get_value_at(int col, int row) const;
  _IGNORE(gda_data_model_get_value_at)

  Value get_value_at(const Glib::ustring& column_name, int row) const;
  _IGNORE(gda_data_model_get_value_at_col_name)

  _WRAP_METHOD(guint get_attributes_at(int col, int row), gda_data_model_get_attributes_at)

  //TODO: Wrap the iterator somehow.
  _WRAP_METHOD(GdaDataModelIter* create_iter(), gda_data_model_create_iter)
   
  //Ignore private functions:
  _IGNORE(gda_data_model_move_iter_at_row, gda_data_model_move_iter_next, gda_data_model_move_iter_prev)

  _WRAP_METHOD(bool set_value_at(int col, int row, const Value& value), gda_data_model_set_value_at, errthrow)
  //TODO: _WRAP_METHOD(bool gda_data_model_set_values(int row, GList *values), gda_data_model_set_values, errthrow)

  _WRAP_METHOD(bool is_updatable() const, gda_data_model_is_updatable)
  _WRAP_METHOD(guint get_access_flags() const, gda_data_model_get_access_flags)

  #m4 //Use deep ownership because we own both the list and its elements;
  #m4 _CONVERSION(`const Glib::ListHandle<Value>&',`const GList*',`$3.data()')
  //_WRAP_METHOD(Glib::RefPtr<Row> append_values(const Glib::ListHandle<Value>& values), gda_data_model_append_values, errthrow)

  _WRAP_METHOD(bool append_row(), gda_data_model_append_row, errthrow)
  _WRAP_METHOD(bool remove_row(int row), gda_data_model_remove_row, errthrow)

  //TODO: _WRAP_METHOD(int get_row_from_values(GSList *values, int *cols_index), gda_data_model_get_row_from_values)

  _WRAP_METHOD(void send_hint(DataModelHint hint, const Value& hint_value), gda_data_model_send_hint)

  //TODO: _WRAP_METHOD(Glib::ustring export_to_string(DataModelIOFormat format, const int *cols, int nb_cols, const Glib::RefPtr<const ParameterList>& options), gda_data_model_export_to_string)
//TODO: Hand-code this to use an Array for the cols and rows, using less parameters:
  _WRAP_METHOD(bool export_to_file(DataModelIOFormat format,  const std::string& file, const gint* cols, int nb_cols, const gint* rows, int nb_rows, const Glib::RefPtr<const ParameterList>& options), gda_data_model_export_to_file, errthrow)

  //TODO: _WRAP_METHOD(bool import_from_model(GdaDataModel *to, GdaDataModel *from,  GHashTable *cols_trans), gda_data_model_import_from_model, errthrow)
  _WRAP_METHOD(bool import_from_string(const Glib::ustring& string, GHashTable *cols_trans, const Glib::RefPtr<const ParameterList>& options), gda_data_model_import_from_string, errthrow)
  _WRAP_METHOD(bool import_from_file(const std::string& file, GHashTable *cols_trans, const Glib::RefPtr<const ParameterList>& options), gda_data_model_import_from_file, errthrow)



//TODO: Implement.
  Glib::ustring to_xml(const Glib::ArrayHandle<int>& cols, const Glib::StringArrayHandle& names) const;
  _IGNORE(gda_data_model_to_xml);

  //TODO: Wrap these if we want to depend on libxml++, though they seem silly. murrayc.
  _IGNORE(gda_data_model_to_xml_node, gda_data_model_add_data_from_xml_node)
  //_WRAP_METHOD(xmlNodePtr to_xml(const GLib::ustring& name), gda_data_model_to_xml_node)
  //_WRAP_METHOD(bool add_data(xmlNodePtr node), gda_data_model_add_data_from_xml_node)

  _WRAP_METHOD(void dump(FILE* to_stream) const, gda_data_model_dump)
  _WRAP_METHOD(Glib::ustring dump_as_string() const, gda_data_model_dump_as_string)

  //These are from gda-datamodel-extra.h:
  //TODO: Are these meant to be public API?
  _WRAP_METHOD(void signal_emit_changed(), gda_data_model_signal_emit_changed)
  _WRAP_METHOD(void row_inserted(int row), gda_data_model_row_inserted)
  _WRAP_METHOD(void row_updated(int row), gda_data_model_row_updated)
  _WRAP_METHOD(void row_removed(int row), gda_data_model_row_removed)
  _WRAP_METHOD(bool move_iter_at_row_default(GdaDataModelIter *iter, int row), gda_data_model_move_iter_at_row_default)
  _WRAP_METHOD(bool move_iter_next_default(GdaDataModelIter *iter), gda_data_model_move_iter_next_default)
  _WRAP_METHOD(bool move_iter_prev_default(GdaDataModelIter *iter), gda_data_model_move_iter_prev_default)


  //These are in a private header. Ignore them:
  _IGNORE(gda_data_model_changed, gda_data_model_row_inserted, gda_data_model_row_updated, gda_data_model_row_removed, 
          gda_data_model_get_command_text, gda_data_model_set_command_text, gda_data_model_get_command_type, 
          gda_data_model_set_command_type, gda_data_model_to_xml_node, gda_data_model_add_data_from_xml_node)

  _WRAP_SIGNAL(void row_inserted(int row), row_inserted)
  _WRAP_SIGNAL(void row_updated(int row), row_updated)
  _WRAP_SIGNAL(void row_removed(int row), row_removed)

protected:

  //We don't wrap the vfuncs because they are only useful for creating new backends,
  //and they have a high code-size and per-object memory cost.
};

} // namespace Gda
} // namespace Gnome

