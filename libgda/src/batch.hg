// -*- C++ -*- // this is for the .hg, I realize gensig puts one in

/* set.h
 *
 * Copyright 2006 libgdamm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or(at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <libgdamm/holder.h>
#include <libgdamm/statement.h>

_DEFS(libgdamm,libgda)
_PINCLUDE(glibmm/private/object_p.h)

namespace Gnome
{

namespace Gda
{

typedef Glib::SListHandle<Glib::RefPtr<const Statement> > StatementSList;

/** Container for several values
 *
 * @ingroup Connection
 */
class Batch : public Glib::Object
{
  _CLASS_GOBJECT(Batch, GdaBatch, GDA_BATCH, Glib::Object, GObject)
protected:
  _CTOR_DEFAULT()
public:
  _WRAP_CREATE()
  _WRAP_METHOD(Glib::RefPtr<Batch> copy(), gda_batch_new_copy)  
  
  _WRAP_METHOD(void add_statement(const Glib::RefPtr<Statement>& stmt), gda_batch_add_statement)
  _WRAP_METHOD(void remove_statement(const Glib::RefPtr<Statement>& stmt), gda_batch_remove_statement)
  _WRAP_METHOD(Glib::ustring serialize(), gda_batch_serialize)

  #m4 _CONVERSION(`const GSList*',`StatementSList',`$2((GSList*)$3, Glib::OWNERSHIP_NONE)')
  _WRAP_METHOD(StatementSList get_statements(), gda_batch_get_statements)

  // FIXME: Use better marshaller in libgda
  //_WRAP_SIGNAL(void changed(Glib::RefPtr<Statement> stmt), "changed")
};

} // namespace Gda
} // namespace Gnome

