/* $Id$ */
// -*- C++ -*- // this is for the .hg, I realize gensig puts one in

/* error.h
 *
 * Copyright 2003 libgdamm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or(at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <libgdamm/object.h>
#include <libgdamm/dictaggregate.h>
#include <libgdamm/dictdatabase.h>
#include <libgdamm/dicttype.h>


_DEFS(libgdamm,libgda)
_PINCLUDE(glibmm/private/object_p.h)

namespace Gnome
{

namespace Gda
{

class Object;

class Connection;

class Dict : public Glib::Object
{
  _CLASS_GOBJECT(Dict, GdaDict, GDA_DICT, Glib::Object, GObject)
  _IGNORE(gda_connection_event_free)
protected:

 _CTOR_DEFAULT

public:
  _WRAP_CREATE()

  _WRAP_METHOD(void set_connection(const Glib::RefPtr<Connection>& cnc), gda_dict_set_connection)
  _WRAP_METHOD(Glib::RefPtr<Connection> get_connection() const, gda_dict_get_connection)

  //TODO: Not implemented: _WRAP_METHOD(guint get_id_serial() const, gda_dict_get_id_serial)
  //TODO: Not implemented: _WRAP_METHOD(void set_id_serial(guint value), gda_dict_set_id_serial)

  //_WRAP_METHOD(void declare_object_string_id_change(const Glib::RefPtr<Object>& obj, const Glib::ustring& oldid), gda_dict_declare_object_string_id_change)
  //_WRAP_METHOD(Glib::RefPtr<Object> get_object_by_string_id(const Glib::ustring& strid), gda_dict_get_object_by_string_id)

  _WRAP_METHOD(bool update_dbms_data(), gda_dict_update_dbms_data, errthrow)
  _WRAP_METHOD(void stop_update_dbms_data(), gda_dict_stop_update_dbms_data)

//TODO: What is datasource? is it UTF-8?
  _WRAP_METHOD(std::string compute_xml_filename(const Glib::ustring& datasource, const Glib::ustring& app_id), gda_dict_compute_xml_filename, errthrow)
  _WRAP_METHOD(void set_xml_filename(const std::string& xmlfile), gda_dict_set_xml_filename)
  _WRAP_METHOD(std::string get_xml_filename() const, gda_dict_get_xml_filename)
  _WRAP_METHOD(bool load(), gda_dict_load, errthrow)
  _WRAP_METHOD(bool save(), gda_dict_save, errthrow)
  _WRAP_METHOD(bool load_xml_file(const std::string& xmlfile), gda_dict_load_xml_file, errthrow)
  _WRAP_METHOD(bool save_xml_file(const std::string& xmlfile), gda_dict_save_xml_file, errthrow)

  //_WRAP_METHOD(GdaDataHandler* get_handler(ValueType for_type), gda_dict_get_handler)
  //_WRAP_METHOD(GdaDataHandler* get_default_handler(ValueType for_type), gda_dict_get_default_handler)

/* GdaDictType manipulations */
  _WRAP_METHOD(GSList* get_data_types() const, gda_dict_get_data_types)
  _WRAP_METHOD(GdaDictType* get_data_type_by_name(const Glib::ustring& type_name), gda_dict_get_data_type_by_name)
  _WRAP_METHOD(GdaDictType* get_data_type_by_xml_id(const Glib::ustring& xml_id), gda_dict_get_data_type_by_xml_id)
  _WRAP_METHOD(bool declare_custom_data_type (GdaDictType* type), gda_dict_declare_custom_data_type)

/* GdaDictFunction manipulations */
  //_WRAP_METHOD(GSList* get_functions() const, gda_dict_get_functions)
  //_WRAP_METHOD(GSList* get_functions_by_name(const Glib::ustring& funcname), gda_dict_get_functions_by_name)
  //_WRAP_METHOD(GdaDictFunction* get_function_by_name_arg(const Glib::ustring& funcname, const GSList* argtypes), gda_dict_get_function_by_name_arg)
  //_WRAP_METHOD(GdaDictFunction* get_function_by_xml_id(const Glib::ustring& xml_id), gda_dict_get_function_by_xml_id)
  //_WRAP_METHOD(GdaDictFunction* get_function_by_dbms_id(const Glib::ustring& dbms_id), gda_dict_get_function_by_dbms_id)

  _WRAP_METHOD(GSList* get_aggregates() const, gda_dict_get_aggregates)
  _WRAP_METHOD(GSList* get_aggregates_by_name (const Glib::ustring& aggname), gda_dict_get_aggregates_by_name)
  _WRAP_METHOD(Glib::RefPtr<DictAggregate> get_aggregate_by_name_arg(const Glib::ustring& aggname, GdaDictType *argtype), gda_dict_get_aggregate_by_name_arg)
  _WRAP_METHOD(Glib::RefPtr<DictAggregate> get_aggregate_by_xml_id(const Glib::ustring& xml_id), *gda_dict_get_aggregate_by_xml_id)
  _WRAP_METHOD(Glib::RefPtr<DictAggregate> get_aggregate_by_dbms_id(const Glib::ustring& dbms_id), gda_dict_get_aggregate_by_dbms_id)

/* GdaQuery manipulations */
  //_WRAP_METHOD(void declare_query(const Glib::RefPtr<Query>& query), gda_dict_declare_query)
  //_WRAP_METHOD(void assume_query (const Glib::RefPtr<Query>& query), gda_dict_assume_query)
  //_WRAP_METHOD(void unassume_query(const Glib::RefPtr<Query>& query), gda_dict_unassume_query)
  //_WRAP_METHOD(GSList* get_queries  () const, gda_dict_get_queries)
  //_WRAP_METHOD(Glib::RefPtr<Query> get_query_by_xml_id(const Glib::ustring& xml_id), gda_dict_get_query_by_xml_id)
  //_WRAP_METHOD(Glib::RefPtr<const Query> get_query_by_xml_id(const Glib::ustring& xml_id), gda_dict_get_query_by_xml_id, constversion)

/* GdaGraph manipulations */
  //_WRAP_METHOD(void declare_graph(GdaGraph *graph), gda_dict_declare_graph)
  //_WRAP_METHOD(void assume_graph(GdaGraph *graph), gda_dict_assume_graph)
  //_WRAP_METHOD(void unassume_graph(GdaGraph *graph), gda_dict_unassume_graph)
  //_WRAP_METHOD(GSList* get_graphs (GraphType type_of_graphs), gda_dict_get_graphs)
  //_WRAP_METHOD(GdaGraph* get_graph_by_xml_id(const Glib::ustring& xml_id), gda_dict_get_graph_by_xml_id)
  //_WRAP_METHOD(GdaGraph* get_graph_for_object(GObject *obj), gda_dict_get_graph_for_object)

  _WRAP_METHOD(Glib::RefPtr<DictDatabase> get_database(), gda_dict_get_database)

  //_WRAP_METHOD(GSList* get_entities_fk_constraints(GdaEntity *entity1, GdaEntity *entity2, bool entity1_has_fk), gda_dict_get_entities_fk_constraints)

};

} // namespace Gda
} // namespace Gnome

