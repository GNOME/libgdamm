/* $Id: serverprovider.hg,v 1.16 2006/11/30 06:58:55 murrayc Exp $ */
// -*- C++ -*- // this is for the .hg, I realize gensig puts one in

/* serverprovider.h
 *
 * Copyright 2001      Free Software Foundation
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

//#include <libgdamm/connection.h>
#include <libgdamm/command.h>
#include <libgdamm/datamodelindex.h>
#include <libgdamm/client.h>
#include <libgdamm/serveroperation.h>
//#include <libgda/gda-server-provider.h>

_DEFS(libgdamm,libgda)
_PINCLUDE(glibmm/private/object_p.h)

#include <libgdamm/blob.h>

namespace Gnome
{

namespace Gda
{


class Connection;

//_WRAP_ENUM(ClientSpecsType, GdaClientSpecsType)
_WRAP_ENUM(ServerOperationType, GdaServerOperationType)

/* TODO: Is this appropriate. Investigate how it is used. */
typedef GdaServerProviderInfo ServerProviderInfo;

class ServerProvider : public Glib::Object
{
  _CLASS_GOBJECT(ServerProvider, GdaServerProvider, GDA_SERVER_PROVIDER, Glib::Object, GObject)

  _WRAP_METHOD(Glib::ustring get_version() const, gda_server_provider_get_version)
  _WRAP_METHOD(bool open_connection(const Glib::RefPtr<Connection>& cnc, GdaQuarkList *params, const Glib::ustring& username, const Glib::ustring& password), gda_server_provider_open_connection)
  //TODO: Not implemented: _WRAP_METHOD(bool reset_connection(const Glib::RefPtr<Connection>& cnc), gda_server_provider_reset_connection)
  _WRAP_METHOD(bool close_connection(const Glib::RefPtr<Connection>& cnc), gda_server_provider_close_connection)

  _WRAP_METHOD(Glib::ustring get_server_version(const Glib::RefPtr<Connection>& cnc) const, gda_server_provider_get_server_version)
  _WRAP_METHOD(Glib::ustring get_database(const Glib::RefPtr<Connection>& cnc) const, gda_server_provider_get_database)
  _WRAP_METHOD(bool change_database(const Glib::RefPtr<Connection>& cnc, const Glib::ustring& name), gda_server_provider_change_database)

  //TODO: Copy-by-value somehow?
  #m4 _CONVERSION(`GdaServerProviderInfo*', `const ServerProviderInfo*', `static_cast<ServerProviderInfo*>($3)')
  _WRAP_METHOD(const ServerProviderInfo* get_info(const Glib::RefPtr<Connection>& cnc) const, gda_server_provider_get_info)

  //TODO: options may be NULL: Add a method overload.
  _WRAP_METHOD(bool supports_operation(const Glib::RefPtr<Connection>& cnc, ServerOperationType type, const Glib::RefPtr<ParameterList>& options) const, gda_server_provider_supports_operation)

  _WRAP_METHOD(Glib::RefPtr<ServerOperation> create_operation (const Glib::RefPtr<Connection>& cnc,ServerOperationType type, const Glib::RefPtr<ParameterList>& options), gda_server_provider_create_operation, errthrow)
  _WRAP_METHOD(Glib::ustring render_operation(const Glib::RefPtr<Connection>& cnc, const Glib::RefPtr<ServerOperation>& op), gda_server_provider_render_operation, errthrow)
  _WRAP_METHOD(bool perform_operation(const Glib::RefPtr<Connection>& cnc, const Glib::RefPtr<ServerOperation>& op), gda_server_provider_perform_operation, errthrow)

  #m4 //Use deep ownership because we own both the list and its elements;
  #m4 _CONVERSION(`GList*',`Glib::ListHandle< Glib::RefPtr<DataModel> >',`$2($3, Glib::OWNERSHIP_SHALLOW)')
  _WRAP_METHOD(Glib::ListHandle< Glib::RefPtr<DataModel> > execute_command(const Glib::RefPtr<Connection>& cnc, const Command& cmd, const Glib::RefPtr<ParameterList>& params), gda_server_provider_execute_command)

  _WRAP_METHOD(bool begin_transaction(const Glib::RefPtr<Connection>& cnc, const Glib::ustring& name, TransactionIsolation level), gda_server_provider_begin_transaction, errthrow)
  _WRAP_METHOD(bool commit_transaction(const Glib::RefPtr<Connection>& cnc, const Glib::ustring& name), gda_server_provider_commit_transaction, errthrow)
  _WRAP_METHOD(bool rollback_transaction(const Glib::RefPtr<Connection>& cnc, const Glib::ustring& name), gda_server_provider_rollback_transaction, errthrow)

  _WRAP_METHOD(bool add_savepoint(const Glib::RefPtr<Connection>& cnc, const Glib::ustring& name), gda_server_provider_add_savepoint, errthrow)
  _WRAP_METHOD(bool rollback_savepoint(const Glib::RefPtr<Connection>& cnc, const Glib::ustring& name), gda_server_provider_rollback_savepoint, errthrow)
  _WRAP_METHOD(bool delete_savepoint(const Glib::RefPtr<Connection>& cnc, const Glib::ustring& name), gda_server_provider_delete_savepoint, errthrow)

  _WRAP_METHOD(bool supports_feature(const Glib::RefPtr<Connection>& cnc, ConnectionFeature feature) const, gda_server_provider_supports_feature)

  //TODO: Use C++ parameters, and add const version:
  _WRAP_METHOD(Glib::RefPtr<DataModel> get_schema(const Glib::RefPtr<Connection>& cnc, ConnectionSchema schema, const Glib::RefPtr<ParameterList>& params), gda_server_provider_get_schema, errthrow)
  _WRAP_METHOD(Glib::RefPtr<const DataModel> get_schema(const Glib::RefPtr<Connection>& cnc, ConnectionSchema schema, const Glib::RefPtr<ParameterList>& params) const, gda_server_provider_get_schema, errthrow)

  Glib::RefPtr<DataModel> get_schema(const Glib::RefPtr<Connection>& cnc, ConnectionSchema schema);
  Glib::RefPtr<const DataModel> get_schema(const Glib::RefPtr<Connection>& cnc, ConnectionSchema schema) const;

  _WRAP_METHOD(Glib::ustring value_to_sql_string(const Glib::RefPtr<Connection>& cnc, const Value& from) const, gda_server_provider_value_to_sql_string)

  _WRAP_METHOD(Glib::ustring get_last_insert_id(const Glib::RefPtr<Connection>&, const Glib::RefPtr<DataModel>& recset) const, gda_server_provider_get_last_insert_id)

 //TODO: vfuncs.
};

} // namespace Gda
} // namespace Gnome

