// -*- C++ -*- // this is for the .hg, I realize gensig puts one in

/* config.h
 *
 * Copyright 2006 libgdamm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or(at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <glibmm/object.h>
#include <libgdamm/serverprovider.h>
#include <libgdamm/datamodel.h>
#include <libgda/gda-config.h>

_DEFS(libgdamm,libgda)
_PINCLUDE(glibmm/private/object_p.h)

namespace Gnome
{

namespace Gda
{

typedef GdaDataSourceInfo DataSourceInfo;
  
/** Configuration â€” Access/Management of libgda configuration
 *
 * @ingroup Configuration
 */
class Config : public Glib::Object
{
  _CLASS_GOBJECT(Config, GdaConfig, GDA_CONFIG, Glib::Object, GObject)
protected:
  _CTOR_DEFAULT;
public:
  _WRAP_METHOD(static Glib::RefPtr<Config> get(), gda_config_get, refreturn)
  
  _WRAP_METHOD_DOCS_ONLY(gda_config_dsn_needs_authentication)
  static bool dsn_needs_authentication(const Glib::ustring& dsn_name);
  _WRAP_METHOD_DOCS_ONLY(gda_config_list_dsn)
  static Glib::RefPtr<DataModel> list_dsn();
  _WRAP_METHOD_DOCS_ONLY(gda_config_list_providers)
  static Glib::RefPtr<DataModel> list_providers();
  _WRAP_METHOD_DOCS_ONLY(gda_config_get_nb_dsn)
  static int get_nb_dsn();
  _WRAP_METHOD_DOCS_ONLY(gda_config_can_modify_system_config)
  static bool can_modify_system_config();
  
  #m4 _EQUAL(GdaDataSourceInfo*, DataSourceInfo*)
  #m4 _CONVERSION(`gpointer',`DataSourceInfo*',`(DataSourceInfo*)($3)')
  _WRAP_SIGNAL(void dsn_added(DataSourceInfo* info), "dsn-added", no_default_handler)
  _WRAP_SIGNAL(void dsn_changed(DataSourceInfo* info), "dsn-changed", no_default_handler)
  _WRAP_SIGNAL(void dsn_removed(DataSourceInfo* info), "dsn-removed", no_default_handler)
  _WRAP_SIGNAL(void dsn_to_be_removed(DataSourceInfo* info), "dsn-to-be-removed", no_default_handler)    
};

} // namespace Gda
} // namespace Gnome

