<root>
<function name="gda_sql_select_field_new">
<description>
Creates a new #GdaSqlSelectField structure and sets its parent to @parent. A
#GdaSqlSelectField is any expression in SELECT statements before the FROM clausure.


</description>
<parameters>
<parameter name="parent">
<parameter_description> a #GdaSqlStatementSelect structure
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaSqlSelectField structure.
</return>
</function>

<function name="gda_sql_select_order_serialize">
<description>
Creates a new string description of the ORDER BY clausure used in a SELECT statement.


</description>
<parameters>
<parameter name="order">
<parameter_description> a #GdaSqlSelectOrder structure
</parameter_description>
</parameter>
</parameters>
<return> a new string with the description of the ORDER BY or &quot;null&quot; in case @order is invalid.
</return>
</function>

<function name="gda_quark_list_new_from_string">
<description>
Creates a new #GdaQuarkList given a string.

@string must be a semi-colon separated list of &quot;&amp;lt;key&amp;gt;=&amp;lt;value&amp;gt;&quot; strings (for example
&quot;DB_NAME=notes;USERNAME=alfred&quot;). Each key and value must respect the RFC 1738 recommendations: the
&amp;lt;constant&amp;gt;&amp;lt;&amp;gt;&amp;quot;#%{}|\^~[]&amp;apos;`;/?:@=&amp;amp;&amp;lt;/constant&amp;gt; and space characters are replaced by 
&amp;lt;constant&amp;gt;&amp;quot;%%ab&amp;quot;&amp;lt;/constant&amp;gt; where
&amp;lt;constant&amp;gt;ab&amp;lt;/constant&amp;gt; is the hexadecimal number corresponding to the character (for example the
&quot;DB_NAME=notes;USERNAME=al%%20fred&quot; string will specify a username as &quot;al fred&quot;). If this formalism
is not respected, then some unexpected results may occur.


</description>
<parameters>
<parameter name="string">
<parameter_description> a string.
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GdaQuarkList.
</return>
</function>

<function name="gda_connection_get_prepared_statement">
<description>
Retreives a pointer to an object representing a prepared statement for @gda_stmt within @cnc. The
association must have been done using gda_connection_add_prepared_statement().


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
<parameter name="gda_stmt">
<parameter_description> a #GdaStatement object
</parameter_description>
</parameter>
</parameters>
<return> the prepared statement, or %NULL if no association exists
</return>
</function>

<function name="gda_connection_rollback_savepoint">
<description>
Rollback all the modifications made after the SAVEPOINT named @name.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of the savepoint to rollback to
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_server_provider_internal_get_parser">
<description>
This is a factory method to get a unique instance of a #GdaSqlParser object
for each #GdaServerProvider object
Don&apos;t unref() it.


</description>
<parameters>
<parameter name="prov">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> a #GdaSqlParser
</return>
</function>

<function name="gda_mutex_unlock">
<description>
Unlocks @m. If another thread is blocked in a gda_mutex_lock() call for @m, it will be woken and can lock @m itself.
This function can be used even if g_thread_init() has not yet been called, and, in that case, will do nothing. 

</description>
<parameters>
<parameter name="m">
<parameter_description> a #GdaMutex
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_server_provider_escape_string">
<description>
Escapes @str for use within an SQL command (to avoid SQL injection attacks). Note that the returned value still needs
to be enclosed in single quotes before being used in an SQL statement.


</description>
<parameters>
<parameter name="provider">
<parameter_description> a server provider.
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object, or %NULL
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> a string to escape
</parameter_description>
</parameter>
</parameters>
<return> a new string suitable to use in SQL statements
</return>
</function>

<function name="gda_connection_add_savepoint">
<description>
Adds a SAVEPOINT named @name.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of the savepoint to add
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_sqlite_pstmt_get_type">
<description>

</description>
<parameters>
</parameters>
<return> the #GType of GdaSqlitePStmt.
</return>
</function>

<function name="gda_attributes_manager_clear">
<description>
Remove all the attributes managed by @mgr for the @ptr ressource.

</description>
<parameters>
<parameter name="mgr">
<parameter_description> a #GdaAttributesManager
</parameter_description>
</parameter>
<parameter name="ptr">
<parameter_description> a pointer to the ressources for which all the attributes will be removed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_column_set_auto_increment">
<description>
Sets the auto increment flag for the given column.

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
<parameter name="is_auto">
<parameter_description> auto increment status.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_sql_expr_copy">
<description>
Creates a new #GdaSqlExpr structure initated with the values stored in @expr.


</description>
<parameters>
<parameter name="expr">
<parameter_description> a #GdaSqlExpr
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaSqlExpr structure.
</return>
</function>

<function name="gda_data_model_array_new">
<description>
Creates a new #GdaDataModel object without initializing the column
types. Using gda_data_model_array_new_with_g_types() is usually better.


</description>
<parameters>
<parameter name="cols">
<parameter_description> number of columns for rows in this data model.
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the newly created #GdaDataModel.
</return>
</function>

<function name="gda_holder_get_attribute">
<description>
Get the value associated to a named attribute.

Attributes can have any name, but Libgda proposes some default names, see &amp;lt;link linkend=&quot;libgda-40-Attributes-manager.synopsis&quot;&amp;gt;this section&amp;lt;/link&amp;gt;.


</description>
<parameters>
<parameter name="holder">
<parameter_description> a #GdaHolder
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> attribute name as a string
</parameter_description>
</parameter>
</parameters>
<return> a read-only #GValue, or %NULL if not attribute named @attribute has been set for @holder
</return>
</function>

<function name="gda_identifier_equal">
<description>
Does the same as strcmp(@id1, @id2), but handles the case where id1 and/or id2 are enclosed in double quotes.
can also be used in hash tables as a #GEqualFunc.


</description>
<parameters>
<parameter name="id1">
<parameter_description> an identifier string
</parameter_description>
</parameter>
<parameter name="id2">
<parameter_description> an identifier string
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @id1 and @id2 are equal.
</return>
</function>

<function name="gda_data_proxy_get_value_attributes">
<description>
Get the attributes of the value stored at (proxy_row, col) in @proxy, which
is an ORed value of #GdaValueAttribute flags


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
<parameter name="proxy_row">
<parameter_description> a proxy row
</parameter_description>
</parameter>
<parameter name="col">
<parameter_description> a valid proxy column
</parameter_description>
</parameter>
</parameters>
<return> the attribute
</return>
</function>

<function name="gda_connection_event_get_source">
<description>

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdaConnectionEvent.
</parameter_description>
</parameter>
</parameters>
<return> @event&apos;s source. 
</return>
</function>

<function name="gda_data_model_get_row_from_values">
<description>
Returns: the requested row number, of -1 if not found

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
<parameter name="values">
<parameter_description> a list of #GValue values (no %NULL is allowed)
</parameter_description>
</parameter>
<parameter name="cols_index">
<parameter_description> an array of #gint containing the column number to match each value of @values
</parameter_description>
</parameter>
</parameters>
<return> the requested row number, of -1 if not found
</return>
</function>

<function name="gda_xa_transaction_begin">
<description>
Begins a distributed transaction (managed by @xa_trans). Please note that this phase may fail
for some connections if a (normal) transaction is already started (this depends on the database
provider being used), so it&apos;s better to avoid starting any (normal) transaction on any of the
connections registered with @xa_trans.


</description>
<parameters>
<parameter name="xa_trans">
<parameter_description> a #GdaXaTransaction object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_data_model_iter_move_next_default">
<description>

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gda_holder_get_bind">
<description>
Get the holder which makes @holder change its value when the holder&apos;s value is changed.


</description>
<parameters>
<parameter name="holder">
<parameter_description> a #GdaHolder
</parameter_description>
</parameter>
</parameters>
<return> the #GdaHolder or %NULL
</return>
</function>

<function name="gda_insert_row_into_table_from_string">
<description>
This is just a convenient function to insert a row with the values given as arguments.
The values must be strings that could be converted to the type in the corresponding
column. Finish the list with NULL.

The arguments must be pairs of column name followed by his value.

The SQL command is like: 
INSERT INTO table_name (column1, column2, ...) VALUES (value1, value2, ...)


</description>
<parameters>
<parameter name="cnc">
<parameter_description> an opened connection
</parameter_description>
</parameter>
<parameter name="table_name">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of strings to be converted as value, finished by %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred, and FALSE and set error otherwise
</return>
</function>

<function name="gda_meta_store_get_attribute_value">
<description>
The #GdaMetaStore object maintains a list of (name,value) attributes (attributes names starting with a &apos;_&apos;
character are for internal use only and cannot be altered). This method and the gda_meta_store_set_attribute_value()
method allows the user to add, set or remove attributes specific to their usage.

This method allows to get the value of a attribute stored in @store. The returned attribute value is 
placed at @att_value, the caller is responsible to free that string. 

If there is no attribute named @att_name then @att_value is set to %NULL
and @error will contain the GDA_META_STORE_ATTRIBUTE_NOT_FOUND_ERROR error code, and FALSE is returned.


</description>
<parameters>
<parameter name="store">
<parameter_description> a #GdaMetaStore object
</parameter_description>
</parameter>
<parameter name="att_name">
<parameter_description> name of the attribute to get
</parameter_description>
</parameter>
<parameter name="att_value">
<parameter_description> the place to store the attribute value
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_sql_select_target_take_table_name">
<description>
Sets the target to be a SELECT subquery setting target&apos;s expression to use
@stmt; after call this function the target owns @stmt, then you must not free it.

</description>
<parameters>
<parameter name="target">
<parameter_description> a #GdaSqlSelectTarget structure
</parameter_description>
</parameter>
<parameter name="stmt">
<parameter_description> a #GValue to take from
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_handler_accepts_g_type">
<description>
Checks wether the GdaDataHandler is able to handle the gda type given as argument.


</description>
<parameters>
<parameter name="dh">
<parameter_description> an object which implements the #GdaDataHandler interface
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the gda type can be handled
</return>
</function>

<function name="gda_sql_parser_parse_string">
<description>
Parses @sql and creates a #GdaStatement statement from the first SQL statement contained in @sql: if @sql
contains more than one statement, then the remaining part of the string is not parsed at all, and @remain (if
not %NULL) will point at the first non parsed character.


</description>
<parameters>
<parameter name="parser">
<parameter_description> a #GdaSqlParser object
</parameter_description>
</parameter>
<parameter name="sql">
<parameter_description> the SQL string to parse
</parameter_description>
</parameter>
<parameter name="remain">
<parameter_description> location to store a pointer to remaining part of @sql in case @sql has multiple statement, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaStatement object, or %NULL if an error occurred
</return>
</function>

<function name="gda_sql_case_new">
<description>
Creates a new #GdaSqlCase structure and sets its parent to @parent.


</description>
<parameters>
<parameter name="parent">
<parameter_description> a #GdaSqlExpr structure
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaSqlCase structure.
</return>
</function>

<function name="gda_data_model_send_hint">
<description>
Sends a hint to the data model. The hint may or may not be handled by the data
model, depending on its implementation

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel
</parameter_description>
</parameter>
<parameter name="hint">
<parameter_description> a hint to send to the model
</parameter_description>
</parameter>
<parameter name="hint_value">
<parameter_description> an optional value to specify the hint, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_server_provider_split_update_query">
<description>
When an update query will affect N&amp;gt;1 rows, it can be refined into a new update query which can be executed N times wich
will affect one row at a time. This is usefull for providers implementations when dealing with BLOBs where updating
rows with a blob can be done only one row at a time.

After execution, @out_select contains a new GdaQuery, or %NULL if it is not possible to create the update query.

For example UPDATE blobs set name = ##/ *name:&apos;name&apos; type:gchararray* /, data = ##/ *name:&apos;theblob&apos; type:&apos;GdaBlob&apos;* / WHERE name= ##/ *name:&apos;oname&apos; type:gchararray* /
will create (if &apos;id&apos; is a PK of the table to update):
UPDATE blobs set name = ##/ *name:&apos;name&apos; type:gchararray* /, data = ##/ *name:&apos;theblob&apos; type:&apos;GdaBlob&apos;* / WHERE id= ##/ *name:&apos;oid&apos; type:gint* /


</description>
<parameters>
</parameters>
<return> TRUE if no error occurred.
</return>
</function>

<function name="gda_data_handler_get_sane_init_value">
<description>
Creates a new GValue which holds a sane initial value to be used if no value is specifically
provided. For example for a simple string, this would return a new value containing the &quot;&quot; string.


</description>
<parameters>
<parameter name="dh">
<parameter_description> an object which implements the #GdaDataHandler interface
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> 
</parameter_description>
</parameter>
</parameters>
<return> the new GValue, or %NULL if no such value can be created.
</return>
</function>

<function name="gda_vconnection_hub_foreach">
<description>
Call @func for each #GdaConnection represented in @hub.

</description>
<parameters>
<parameter name="hub">
<parameter_description> a #GdaVconnectionHub connection
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a #GdaVConnectionDataModelFunc function pointer
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to @cunc calls
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_config_list_dsn">
<description>
Get a #GdaDataModel representing all the configured DSN, and keeping itself up to date with
the changes in the declared DSN.

The returned data model is composed of the following columns:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;DSN name&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;Provider name&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;Description&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;Connection string&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;Username if it exists&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;


</description>
<parameters>
</parameters>
<return> a new #GdaDataModel
</return>
</function>

<function name="gda_blob_op_write_all">
<description>
Writes the whole contents of @blob into the blob manipulated by @op. If necessary the resulting
blob is truncated from its previous length.


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaBlobOp
</parameter_description>
</parameter>
<parameter name="blob">
<parameter_description> a #GdaBlob which contains the data to write
</parameter_description>
</parameter>
</parameters>
<return> TRUE on success
</return>
</function>

<function name="gda_vconnection_data_model_add_model">
<description>
Make @model appear as a table named @table_name in the @cnc connection (as if a
&quot;CREATE TABLE...&quot; statement was executed, except that the data contained within @model
is actually used when @table_name&apos;s contents is read or written).

For a more general approach, see the gda_vconnection_data_model_add() method.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaVconnectionDataModel connection
</parameter_description>
</parameter>
<parameter name="model">
<parameter_description> a #GdaDataModel
</parameter_description>
</parameter>
<parameter name="table_name">
<parameter_description> the name of the table
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_handler_time_get_format">
<description>
Get a string representing the locale-dependant way to enter a date/time/datetime, using
a syntax suitable for the #GnomeDbFormatEntry widget


</description>
<parameters>
<parameter name="hdl">
<parameter_description> a #GdaHandlerTime object
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the type of data being handled
</parameter_description>
</parameter>
</parameters>
<return> a new string
</return>
</function>

<function name="gda_meta_struct_get_all_db_objects">
<description>
Get a list of all the #GdaMetaDbObject structures representing database objects in @mstruct. Note that
no #GdaMetaDbObject structure must not be modified.


</description>
<parameters>
<parameter name="mstruct">
<parameter_description> a #GdaMetaStruct object
</parameter_description>
</parameter>
</parameters>
<return> a new #GSList list of pointers which must be destroyed after usage using g_slist_free().
</return>
</function>

<function name="gda_server_operation_op_type_to_string">
<description>
Get a string version of @type


</description>
<parameters>
<parameter name="type">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> a non %NULL string (do not free or modify)
</return>
</function>

<function name="gda_mutex_lock">
<description>
Locks @m. If @m is already locked by another thread, the current thread will block until @m is unlocked by the other thread.

This function can be used even if g_thread_init() has not yet been called, and, in that case, will do nothing.

Note: unlike g_mutex_lock(), the #GdaMutex is recursive, which means a thread can lock it several times (and has
to unlock it as many times to actually unlock it).

</description>
<parameters>
<parameter name="m">
<parameter_description> a #GdaMutex
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_model_iter_get_holder_for_field">
<description>
Fetch a pointer to the #GdaHolder object which is synchronized with data at 
column @col


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GdaDataModelIter object
</parameter_description>
</parameter>
<parameter name="col">
<parameter_description> the requested column
</parameter_description>
</parameter>
</parameters>
<return> the #GdaHolder, or %NULL if an error occurred
</return>
</function>

<function name="gda_sql_select_from_take_new_join">
<description>
Append @join to the joins in the FROM clausure and set @join&apos;s parent to
@from; after call this function @from owns @join then you must not free it.

</description>
<parameters>
<parameter name="from">
<parameter_description> a #GdaSqlSelectFrom structure
</parameter_description>
</parameter>
<parameter name="join">
<parameter_description> a #GdaSqlSelectJoin to take from
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_value_take_blob">
<description>
Stores @val into @value, but on the contrary to gda_value_set_blob(), the @blob
argument is not copied, but used as-is and it should be considered owned by @value.

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue that will store @val.
</parameter_description>
</parameter>
<parameter name="blob">
<parameter_description> a #GdaBlob structure with the data and its size to be stored in @value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_vconnection_data_model_remove">
<description>
Remove the table named @table_name in the @cnc connection (as if a &quot;DROP TABLE...&quot;
statement was executed, except that no data gets destroyed as the associated data model remains the same).


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaVconnectionDataModel connection
</parameter_description>
</parameter>
<parameter name="table_name">
<parameter_description> the name of the table to remove from @cnc
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_data_model_dump">
<description>
Dumps a textual representation of the @model to the @to_stream stream

The following environment variables can affect the resulting output:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;GDA_DATA_MODEL_DUMP_ROW_NUMBERS: if set, the first coulumn of the output will contain row numbers&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;GDA_DATA_MODEL_DUMP_ATTRIBUTES: if set, also dump the data model&apos;s columns&apos; types and value&apos;s attributes&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;GDA_DATA_MODEL_DUMP_TITLE: if set, also dump the data model&apos;s title&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;GDA_DATA_MODEL_DUMP_NULL_AS_EMPTY: if set, replace the &apos;NULL&apos; string with an empty string for NULL values &amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel.
</parameter_description>
</parameter>
<parameter name="to_stream">
<parameter_description> where to dump the data model
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_model_iter_set_value_at">
<description>
Sets a value in @iter, at the column specified by @col


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GdaDataModelIter object
</parameter_description>
</parameter>
<parameter name="col">
<parameter_description> the column number
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue (not %NULL)
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_server_provider_get_version">
<description>
Get the version of the provider.


</description>
<parameters>
<parameter name="provider">
<parameter_description> a #GdaServerProvider object.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the version identification.
</return>
</function>

<function name="gda_server_provider_blob_list_for_delete">
<description>
Create a SELECT query from a DELETE query which lists all the BLOB fields in the
query which will be deleted. This function is used by GdaServerProvider implementations
when dealing with BLOB deletions.

After execution, @out_select contains a new GdaQuery, or %NULL if the delete query does not have any
BLOB to delete.

For example DELETE FROM blobs WHERE id= ##/ *name:&apos;id&apos; type:gint* /
will create:
SELECT t1.data FROM blobs AS t1 WHERE id= ##/ *name:&apos;id&apos; type:gint* /


</description>
<parameters>
</parameters>
<return> TRUE if no error occurred.
</return>
</function>

<function name="gda_sql_select_target_serialize">
<description>
Creates a new string representing a target used in a SELECT statement
after the FROM clausure.


</description>
<parameters>
<parameter name="target">
<parameter_description> a #GdaSqlSelectTarget structure
</parameter_description>
</parameter>
</parameters>
<return> a new string with the description of the expression or &quot;null&quot; in case @field is invalid.
</return>
</function>

<function name="gda_server_operation_get_root_nodes">
<description>
Get an array of strings containing the paths of nodes situated at the root of @op.


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
</parameters>
<return> a new array, which must be freed with g_strfreev().
</return>
</function>

<function name="gda_data_model_import_new_file">
<description>
Creates a new #GdaDataModel object which contains the data stored within the @filename file.

The options are the following ones:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;For the CSV format:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;ENCODING (string): specifies the encoding of the data in the file&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;SEPARATOR (string): specifies the CSV separator (comma as default)&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;QUOTE (string): specifies the character used to as quote park (double quote as default)&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;TITLE_AS_FIRST_LINE (boolean): consider that the first line of the file contains columns&apos; titles&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;G_TYPE_&amp;lt;column number&amp;gt; (GType): specifies the type of value expected in column &amp;lt;column number&amp;gt;&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;
&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;Other formats: no option&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;


</description>
<parameters>
<parameter name="filename">
<parameter_description> the file to import data from
</parameter_description>
</parameter>
<parameter name="random_access">
<parameter_description> TRUE if random access will be required
</parameter_description>
</parameter>
<parameter name="options">
<parameter_description> list of importing options
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the newly created #GdaDataModel.
</return>
</function>

<function name="gda_batch_add_statement">
<description>
Add @stmt to the list of statements managed by @batch. A #GdaStatement object can be
added multiple times to a #GdaBatch object.

</description>
<parameters>
<parameter name="batch">
<parameter_description> a #GdaBatch object
</parameter_description>
</parameter>
<parameter name="stmt">
<parameter_description> a statement to add to @batch&apos;s statements list
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_meta_store_new">
<description>
Create a new #GdaMetaStore object.


</description>
<parameters>
<parameter name="string">
<parameter_description> a connection string, or %NULL for an in-memory internal database
</parameter_description>
</parameter>
</parameters>
<return> the newly created object, or %NULL if an error occurred
</return>
</function>

<function name="gda_value_get_ushort">
<description>

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue whose value we want to get.
</parameter_description>
</parameter>
</parameters>
<return> the value stored in @value.
</return>
</function>

<function name="gda_server_operation_load_data_from_xml">
<description>
Loads the contents of @node into @op. The XML tree passed through the @node
argument must correspond to an XML tree saved using gda_server_operation_save_data_to_xml().


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
<parameter name="node">
<parameter_description> a #xmlNodePtr
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if no error occurred
</return>
</function>

<function name="gda_handler_string_new">
<description>
Creates a data handler for strings


</description>
<parameters>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_connection_get_provider_name">
<description>
Get the name (identifier) of the database provider used by @cnc


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
</parameters>
<return> a non modifiable string
</return>
</function>

<function name="gda_set_new">
<description>
Creates a new #GdaSet object, and populates it with the list given as argument.
The list can then be freed as it is copied. All the value holders in @holders are referenced counted
and modified, so they should not be used anymore afterwards.


</description>
<parameters>
<parameter name="holders">
<parameter_description> a list of #GdaHolder objects
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaSet object
</return>
</function>

<function name="gda_data_proxy_row_is_deleted">
<description>
Tells if the row number @proxy_row is marked to be deleted.


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
<parameter name="proxy_row">
<parameter_description> A proxy row number
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the row is marked to be deleted
</return>
</function>

<function name="gda_sql_expr_new">
<description>
Creates a new #GdaSqlField structure, using @parent as its parent part.


</description>
<parameters>
<parameter name="parent">
<parameter_description> a #GdaSqlStatementInsert, #GdaSqlStatementUpdate, #GdaSqlSelectField, #GdaSqlSelectTarget, #GdaSqlOperation
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaSqlField structure.
</return>
</function>

<function name="gda_data_model_get_column_title">
<description>

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
<parameter name="col">
<parameter_description> column number.
</parameter_description>
</parameter>
</parameters>
<return> the title for the given column in a data model object.
</return>
</function>

<function name="gda_sql_function_free">
<description>
Frees a #GdaSqlFunction structure and its members.

</description>
<parameters>
<parameter name="function">
<parameter_description> a #GdaSqlFunction structure to be freed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_value_get_numeric">
<description>

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue whose value we want to get.
</parameter_description>
</parameter>
</parameters>
<return> the value stored in @value.
</return>
</function>

<function name="BLOB">
<description>

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gda_value_set_short">
<description>
Stores @val into @value.

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue that will store @val.
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> value to be stored in @value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_quark_list_clear">
<description>
Removes all strings in the given #GdaQuarkList.

</description>
<parameters>
<parameter name="qlist">
<parameter_description> a #GdaQuarkList.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_server_provider_blob_list_for_update">
<description>
Create a SELECT query from an UPDATE query which lists all the BLOB fields in the
query which will be updated. This function is used by GdaServerProvider implementations
when dealing with BLOB updates.

After execution, @out_select contains a new GdaQuery, or %NULL if the update query does not have any
BLOB to update.

For example UPDATE blobs set name = ##/ *name:&apos;name&apos; type:gchararray* /, data = ##/ *name:&apos;theblob&apos; type:&apos;GdaBlob&apos;* / WHERE id= ##/ *name:&apos;id&apos; type:gint* /
will create:
SELECT t1.data FROM blobs AS t1 WHERE id= ##/ *name:&apos;id&apos; type:gint* /


</description>
<parameters>
</parameters>
<return> TRUE if no error occurred.
</return>
</function>

<function name="gda_set_get_node">
<description>
Finds a #GdaSetNode holding information for @holder, don&apos;t modify the returned structure


</description>
<parameters>
<parameter name="set">
<parameter_description> a #GdaSet object
</parameter_description>
</parameter>
<parameter name="holder">
<parameter_description> a #GdaHolder object
</parameter_description>
</parameter>
</parameters>
<return> a #GdaSetNode or %NULL
</return>
</function>

<function name="gda_statement_get_statement_type">
<description>
Get the type of statement held by @stmt. It returns GDA_SQL_STATEMENT_NONE if
@stmt does not hold any statement


</description>
<parameters>
<parameter name="stmt">
<parameter_description> a #GdaStatement object
</parameter_description>
</parameter>
</parameters>
<return> the statement type
</return>
</function>

<function name="gda_data_proxy_get_model">
<description>
Get the #GdaDataModel which holds the unmodified (reference) data of @proxy


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
</parameters>
<return> the #GdaDataModel
</return>
</function>

<function name="gda_holder_is_valid">
<description>
Get the validity of @holder (that is, of the value held by @holder)


</description>
<parameters>
<parameter name="holder">
<parameter_description> a #GdaHolder object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @holder&apos;s value can safely be used
</return>
</function>

<function name="gda_holder_get_g_type">
<description>
Get @holder&apos;s type


</description>
<parameters>
<parameter name="holder">
<parameter_description> a #GdaHolder object
</parameter_description>
</parameter>
</parameters>
<return> the data type
</return>
</function>

<function name="gda_prepare_drop_database">
<description>
Creates a new #GdaServerOperation object which contains the specifications required
to drop a database. Once these specifications provided, use 
gda_perform_drop_database() to perform the database creation.

If @db_name is left %NULL, then the name of the database to drop will have to be set in the
returned #GdaServerOperation using gda_server_operation_set_value_at().


</description>
<parameters>
<parameter name="provider">
<parameter_description> the database provider to use
</parameter_description>
</parameter>
<parameter name="db_name">
<parameter_description> the name of the database to drop, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> new #GdaServerOperation object, or %NULL if the provider does not support database
destruction
</return>
</function>

<function name="gda_server_provider_select_query_has_blobs">
<description>
Determines if @query (which must be a SELECT query) returns a data model with some BLOB data

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gda_data_select_compute_row_selection_condition">
<description>
Offers the same features as gda_data_select_set_row_selection_condition() but the expression
is computed from the meta data associated to the connection being used when @model was created.

NOTE1: make sure the meta data associated to the connection is up to date before using this
method, see gda_connection_update_meta_store().

NOTE2: if the SELECT statement from which @model has been created uses more than one table, or
if the table used does not have any primary key, then this method will fail


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataSelect object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred.
</return>
</function>

<function name="gda_blob_op_write">
<description>
Writes a chunk of bytes from a @blob to the BLOB accessible through @op.


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaBlobOp
</parameter_description>
</parameter>
<parameter name="blob">
<parameter_description> a #GdaBlob which contains the data to write
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> offset to write from the start of the blob (starts at 0)
</parameter_description>
</parameter>
</parameters>
<return> the number of bytes written. In case of error, -1 is returned and the
provider should have added an error to the connection.
</return>
</function>

<function name="gda_blob_copy">
<description>
Creates a new #GdaBlob structure from an existing one.


</description>
<parameters>
<parameter name="boxed">
<parameter_description> source to get a copy from.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GdaBlob which contains a copy of
information in @boxed.
</return>
</function>

<function name="gda_server_provider_get_data_handler_dbms">
<description>
Find a #GdaDataHandler object to manipulate data of type @for_type.


</description>
<parameters>
<parameter name="provider">
<parameter_description> a server provider.
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object, or %NULL
</parameter_description>
</parameter>
<parameter name="for_type">
<parameter_description> a DBMS type definition
</parameter_description>
</parameter>
</parameters>
<return> a #GdaDataHandler, or %NULL if the provider does not know about the @for_type type
</return>
</function>

<function name="gda_connection_statement_execute_select_full">
<description>
Executes a selection command on the given connection.

This function returns a #GdaDataModel resulting from the SELECT statement, or %NULL
if an error occurred.

This function is just a convenience function around the gda_connection_statement_execute()
function.

See the documentation of the gda_connection_statement_execute() for information
about the @params list of parameters.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
<parameter name="stmt">
<parameter_description> a #GdaStatement object.
</parameter_description>
</parameter>
<parameter name="params">
<parameter_description> a #GdaSet object (which can be obtained using gda_statement_get_parameters()), or %NULL
</parameter_description>
</parameter>
<parameter name="model_usage">
<parameter_description> specifies how the returned data model will be used as a #GdaStatementModelUsage enum
</parameter_description>
</parameter>
<parameter name="col_types">
<parameter_description> an array of GType to request each returned #GdaDataModel&apos;s column&apos;s GType, terminated with the G_TYPE_NONE
value. Any value left to 0 will make the database provider determine the real GType. @col_types can also be %NULL if no
column type is specified.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store an error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GdaDataModel containing the data returned by the
data source, or %NULL if an error occurred
</return>
</function>

<function name="gda_data_model_set_values">
<description>
In a similar way to gda_data_model_set_value_at(), this method modifies a data model&apos;s contents
by setting several values at once.

If any value in @values is actually %NULL, then the value in the corresponding column is left
unchanged.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> row number.
</parameter_description>
</parameter>
<parameter name="values">
<parameter_description> a list of #GValue, one for at most the number of columns of @model
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the value in the data model has been updated and no error occurred
</return>
</function>

<function name="gda_vconnection_data_model_foreach">
<description>
Call @func for each table in @cnc. 

Warning: @func will be called for any table present in @cnc even if no data
model represents the contents of the table (which means the 1st argument of @func
may be %NULL)

</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaVconnectionDataModel connection
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a #GdaVConnectionDataModelFunc function pointer
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to @cunc calls
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_vconnection_data_model_get_model">
<description>
Find the #GdaDataModel object representing the @table_name table in @cnc


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaVconnectionDataModel connection
</parameter_description>
</parameter>
<parameter name="table_name">
<parameter_description> a table name within @cnc
</parameter_description>
</parameter>
</parameters>
<return> the #GdaDataModel, or %NULL if no table named @table_name exists
</return>
</function>

<function name="gda_data_model_get_column_index">
<description>
Get the index of the first column named @name in @model.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> a column name
</parameter_description>
</parameter>
</parameters>
<return> the column index, or -1 if no column named @name was found
</return>
</function>

<function name="gda_holder_take_value">
<description>
Sets the value within the holder. If @holder is an alias for another
holder, then the value is also set for that other holder.

On success, the action of any call to gda_holder_force_invalid() is cancelled
as soon as this method is called (even if @holder&apos;s value does not actually change).

If the value is not different from the one already contained within @holder,
then @holder is not chaged and no signal is emitted.

Note1: if @holder can&apos;t accept the @value value, then this method returns FALSE, and @holder will be left
in an invalid state.

Note2: before the change is accepted by @holder, the &quot;validate-change&quot; signal will be emitted (the value
of which can prevent the change from happening) which can be connected to to have a greater control
of which values @holder can have, or implement some business rules.

Note3: if user previously set this holder with gda_holder_take_static_value () the GValue
stored internally will be forgiven and replaced by the @value. User should then
take care of the &apos;old&apos; static GValue.


</description>
<parameters>
<parameter name="holder">
<parameter_description> a #GdaHolder object
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a value to set the holder to
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if value has been set
</return>
</function>

<function name="gda_value_is_number">
<description>
Gets whether the value stored in the given #GValue is of
numeric type or not.


</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a number, %FALSE otherwise.
</return>
</function>

<function name="gda_data_model_iter_move_prev">
<description>
Moves @iter one row before where it already is (synchronizes the values of the parameters in @iter 
with the values at the new row).

If the iterator was on the data model&apos;s first row, then it can&apos;t be moved backwards
anymore, and the returned value is FALSE; note also that the &quot;current-row&quot; property
is set to -1 (which means that gda_data_model_iter_is_valid() would return FALSE).

If any other error occurred then the returned value is FALSE, but the &quot;current-row&quot;
property is set to the new current row (one row less than it was before the call).


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GdaDataModelIter object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the iterator is now at the previous row
</return>
</function>

<function name="gda_connection_internal_get_provider_data">
<description>
Get the opaque pointer previously set using gda_connection_internal_set_provider_data().
If it&apos;s not set, then add a connection event and returns %NULL


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
</parameters>
<return> the pointer to the opaque structure set using gda_connection_internal_set_provider_data()
</return>
</function>

<function name="gda_sql_function_serialize">
<description>
Creates a new string representing a function. You need to free the returned string
using g_free();


</description>
<parameters>
<parameter name="function">
<parameter_description> a #GdaSqlFunction structure
</parameter_description>
</parameter>
</parameters>
<return> a new string with the description of the function or &quot;null&quot; in case @function is invalid.
</return>
</function>

<function name="gda_value_new_binary">
<description>
Makes a new #GValue of type #GDA_TYPE_BINARY with value @val.


</description>
<parameters>
<parameter name="val">
<parameter_description> value to set for the new #GValue.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of the memory pool pointer to by @val.
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GValue.
</return>
</function>

<function name="gda_pstmt_set_gda_statement">
<description>
Informs @pstmt that it corresponds to the preparation of the @stmt statement

</description>
<parameters>
<parameter name="pstmt">
<parameter_description> a #GdaPStmt object
</parameter_description>
</parameter>
<parameter name="stmt">
<parameter_description> a #GdaStatement object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_sql_operator_from_string">
<description>
Returns: #GdaSqlOperatorType

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaSqlOperation structure
</parameter_description>
</parameter>
</parameters>
<return> #GdaSqlOperatorType
</return>
</function>

<function name="gda_server_operation_get_sequence_min_size">
<description>

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a complete path to a sequence node (starting with &quot;/&quot;)
</parameter_description>
</parameter>
</parameters>
<return> the minimum number of items in the sequence at @path, or 0 if @path is not a sequence node
</return>
</function>

<function name="gda_meta_struct_complement_all">
<description>
This method is similar to gda_meta_struct_complement() and gda_meta_struct_complement_default()
but creates #GdaMetaDbObject for all the database object.


</description>
<parameters>
<parameter name="mstruct">
<parameter_description> a #GdaMetaStruct object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_sql_table_take_name">
<description>
Sets the table&apos;s name using the string holded by @value. When call, @value is freed using
#gda_value_free().


</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaSqlTable structure
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue holding a string to take from
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_sql_select_from_free">
<description>
Frees a #GdaSqlSelectFrom structure and its members.

</description>
<parameters>
<parameter name="from">
<parameter_description> a #GdaSqlSelectFrom structure to be freed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_server_operation_get_sequence_item_names">
<description>
Fetch the contents of a sequence. @path can describe either a sequence (for example &quot;/SEQNAME&quot;) or an item in a sequence
(for example &quot;/SEQNAME/3&quot;)


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a complete path to a sequence node (starting with &quot;/&quot;)
</parameter_description>
</parameter>
</parameters>
<return> a array of strings containing the complete paths of the nodes contained at @path (free with g_strfreev())
</return>
</function>

<function name="gda_server_provider_perform_operation_default">
<description>
Performs the operation described by @op, using the SQL from the rendering of the operation


</description>
<parameters>
<parameter name="provider">
<parameter_description> a #GdaServerProvider object
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object which will be used to perform an action, or %NULL
</parameter_description>
</parameter>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store an error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_connection_batch_execute">
<description>
Executes all the statements contained in @batch (in the order in which they were added to @batch), and
Returns: a list of #GObject objects

</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
<parameter name="batch">
<parameter_description> a #GdaBatch object which contains all the statements to execute
</parameter_description>
</parameter>
<parameter name="params">
<parameter_description> a #GdaSet object (which can be obtained using gda_batch_get_parameters()), or %NULL
</parameter_description>
</parameter>
<parameter name="model_usage">
<parameter_description>  specifies how the returned data model(s) will be used, as a #GdaStatementModelUsage enum
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a list of #GObject objects
</return>
</function>

<function name="gda_server_provider_value_to_sql_string">
<description>
Produces a fully quoted and escaped string from a GValue


</description>
<parameters>
<parameter name="provider">
<parameter_description> a server provider.
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object, or %NULL
</parameter_description>
</parameter>
<parameter name="from">
<parameter_description> #GValue to convert from
</parameter_description>
</parameter>
</parameters>
<return> escaped and quoted value or NULL if not supported.
</return>
</function>

<function name="gda_utility_holder_load_attributes">
<description>
Note: this method may set the &quot;source&quot; custom string property


</description>
<parameters>
<parameter name="holder">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="node">
<parameter_description> an xmlNodePtr with a &amp;lt;parameter&amp;gt; tag
</parameter_description>
</parameter>
<parameter name="sources">
<parameter_description> a list of #GdaDataModel
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_config_get_dsn_info_at_index">
<description>
Get a pointer to a read-only #GdaDsnInfo at the @index position


</description>
<parameters>
<parameter name="index">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> the pointer or %NULL if no DSN exists at position @index
</return>
</function>

<function name="gda_prepare_drop_table">
<description>
This is just a convenient function to create a #GdaServerOperation to drop a 
table in an opened connection.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> an opened connection
</parameter_description>
</parameter>
<parameter name="table_name">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaServerOperation or NULL if couldn&apos;t create the opereration.
</return>
</function>

<function name="gda_server_provider_get_schema_nb_columns">
<description>

</description>
<parameters>
<parameter name="schema">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> the number of columns the #GdaDataModel for the requested schema
must have
</return>
</function>

<function name="gda_sql_any_part_foreach">
<description>
Calls a function for each element of a #GdaSqlAnyPart node


</description>
<parameters>
<parameter name="node">
<parameter_description> the stat node
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> function to call for each sub node
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to @func each time it is called
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL (is also passed to @func)
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @func has been called for any sub node of @node and always returned TRUE, or FALSE
otherwise.
</return>
</function>

<function name="gda_data_model_dir_new">
<description>
Creates a new #GdaDataModel object to list all the files starting from @basedir


</description>
<parameters>
<parameter name="basedir">
<parameter_description> a directory
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaDataModel
</return>
</function>

<function name="_gda_meta_store_finish_data_reset">
<description>
Commits any modification done since _gda_meta_store_begin_data_reset() was called.


</description>
<parameters>
<parameter name="store">
<parameter_description> a #GdaMetaStore object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_batch_remove_statement">
<description>
Removes @stmt from the list of statements managed by @batch. If @stmt is present several
times in @batch&apos;s statements&apos; list, then only the first one is removed.

</description>
<parameters>
<parameter name="batch">
<parameter_description> a #GdaBatch object
</parameter_description>
</parameter>
<parameter name="stmt">
<parameter_description> a statement to remove from @batch&apos;s statements list
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_set_get_group">
<description>
Finds a #GdaSetGroup which lists a  #GdaSetNode containing @holder,
don&apos;t modify the returned structure.


</description>
<parameters>
<parameter name="set">
<parameter_description> a #GdaSet object
</parameter_description>
</parameter>
<parameter name="holder">
<parameter_description> a #GdaHolder object
</parameter_description>
</parameter>
</parameters>
<return> a #GdaSetGroup or %NULL
</return>
</function>

<function name="gda_vconnection_data_model_add">
<description>
Create a new virtual table named @table_name in @cnc. The contents of that new table
is dictated by what&apos;s in @spec.

If there is just one #GdaDataModel to make appear as a table
then the gda_vconnection_data_model_add_model() method is easier to use.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaVconnectionDataModel connection
</parameter_description>
</parameter>
<parameter name="spec">
<parameter_description> a #GdaVconnectionDataModelSpec structure
</parameter_description>
</parameter>
<parameter name="spec_free_func">
<parameter_description> function to call when freeing @spec, or %NULL
</parameter_description>
</parameter>
<parameter name="table_name">
<parameter_description> the name of the table
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_sql_table_serialize">
<description>
Creates a new string representing a table. You need to free the returned string
using g_free();


</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaSqlTable structure
</parameter_description>
</parameter>
</parameters>
<return> a new string with the name of the field or &quot;null&quot; in case @table is invalid.
</return>
</function>

<function name="gda_config_list_providers">
<description>
Get a #GdaDataModel representing all the installed database providers.

The returned data model is composed of the following columns:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;Provider name&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;Description&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;DSN parameters&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;Authentication parameters&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;File name of the plugin&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;


</description>
<parameters>
</parameters>
<return> a new #GdaDataModel
</return>
</function>

<function name="gda_default_escape_string">
<description>
Escapes @string to make it understandable by a DBMS. The escape method is very common and replaces any
occurence of &quot;&apos;&quot; with &quot;&apos;&apos;&quot; and &quot;\&quot; with &quot;\\&quot;

</description>
<parameters>
<parameter name="string">
<parameter_description> string to escape
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_mutex_new">
<description>
Creates a new #GdaMutex.

Note: Unlike g_mutex_new(), this function will return %NULL if g_thread_init() has not been called yet.


</description>
<parameters>
</parameters>
<return> a new #GdaMutex
</return>
</function>

<function name="gda_config_dsn_needs_auth">
<description>
Tells if the data source identified as @dsn_name needs any authentication. If a &amp;lt;username&amp;gt;
and optionaly a &amp;lt;password&amp;gt; are specified, they are ignored.


</description>
<parameters>
<parameter name="dsn_name">
<parameter_description> the name of a DSN, in the &quot;[&amp;lt;username&amp;gt;[:&amp;lt;password&amp;gt;]@]&amp;lt;DSN&amp;gt;&quot; format
</parameter_description>
</parameter>
</parameters>
<return> TRUE if an authentication is needed
</return>
</function>

<function name="gda_config_get_provider_info">
<description>
Get some information about the a database provider (adaptator) named 
@provider_name


</description>
<parameters>
<parameter name="provider_name">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> a pointer to read-only #GdaProviderInfo structure, or %NULL if not found
</return>
</function>

<function name="gda_holder_get_value_str">
<description>
Same functionality as gda_holder_get_value() except that it returns the value as a string
(the conversion is done using @dh if not %NULL, or the default data handler otherwise).


</description>
<parameters>
<parameter name="holder">
<parameter_description> a #GdaHolder object
</parameter_description>
</parameter>
<parameter name="dh">
<parameter_description> a #GdaDataHandler to use, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the value, or %NULL
</return>
</function>

<function name="gda_holder_get_id">
<description>
Get the ID of @holder. The ID can be set using @holder&apos;s &quot;id&quot; property


</description>
<parameters>
<parameter name="holder">
<parameter_description> a #GdaHolder object
</parameter_description>
</parameter>
</parameters>
<return> the ID (don&apos;t modify the string).
</return>
</function>

<function name="gda_numeric_copy">
<description>
Creates a new #GdaNumeric structure from an existing one.


</description>
<parameters>
<parameter name="boxed">
<parameter_description> source to get a copy from.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GdaNumeric which contains a copy of
information in @boxed.
</return>
</function>

<function name="gda_numeric_free">
<description>
Deallocates all memory associated to the given @boxed

</description>
<parameters>
<parameter name="boxed">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_column_get_dbms_type">
<description>

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
</parameters>
<return> the dbms_type of @column.
</return>
</function>

<function name="gda_threader_new">
<description>
Creates a new GdaThreader object. This object class is normally not instantiated
directly but through child classes objects&apos; intantiation


</description>
<parameters>
</parameters>
<return> the newly created object
</return>
</function>

<function name="gda_update_values_in_table">
<description>
This is just a convenient function to update values in a table on a given column where
the row is fitting the given condition.

The SQL command is like: 
UPDATE INTO table_name SET column1 = new_value1, column2 = new_value2 ... WHERE condition_column_name = condition


</description>
<parameters>
<parameter name="cnc">
<parameter_description> an opened connection
</parameter_description>
</parameter>
<parameter name="table_name">
<parameter_description> the name of the table where the update will be done
</parameter_description>
</parameter>
<parameter name="condition_column_name">
<parameter_description> the name of the column to used in the WHERE condition clause
</parameter_description>
</parameter>
<parameter name="condition">
<parameter_description> a GValue to used to find the values to be updated; it must correspond with the
column&apos;s @GType
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of string/@GValue pairs where the string is the name of the column to be 
updated followed by the new @GValue to set, finished by %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_data_select_set_row_selection_condition">
<description>
Offers the same features as gda_data_select_set_row_selection_condition_sql() but using a #GdaSqlExpr
structure instead of an SQL syntax.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataSelect data model
</parameter_description>
</parameter>
<parameter name="expr">
<parameter_description> a #GdaSqlExpr expression
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_data_proxy_get_filtered_n_rows">
<description>
Get the total number of filtered rows in @proxy if a filter has been applied. As new rows
(rows added to the proxy and not yet added to the proxied data model) and rows to remove
(rows marked for removal but not yet removed from the proxied data model) are also filtered,
the returned number also contains reefrences to new rows and rows to be removed.


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
</parameters>
<return> the number of filtered rows in @proxy, or -1 if no filter has been applied
</return>
</function>

<function name="gda_handler_type_new">
<description>
Creates a data handler for Gda types


</description>
<parameters>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_sql_select_join_free">
<description>
Frees a #GdaSqlSelectJoin structure and its members.

</description>
<parameters>
<parameter name="join">
<parameter_description> a #GdaSqlSelectJoin structure to be freed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_sql_select_from_copy">
<description>
Creates a new #GdaSqlSelectFrom structure initated with the values stored in @from.


</description>
<parameters>
<parameter name="from">
<parameter_description> a #GdaSqlSelectFrom structure to be copied
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaSqlSelectFrom structure.
</return>
</function>

<function name="gda_data_select_compute_columns_attributes">
<description>
Computes correct attributes for each of @model&apos;s columns, which includes the &quot;NOT NULL&quot; attribute, the
default value, the precision and scale for numeric values.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataSelect data model
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_column_new">
<description>

</description>
<parameters>
</parameters>
<return> a newly allocated #GdaColumn object.
</return>
</function>

<function name="gda_sql_select_target_copy">
<description>
Creates a new #GdaSqlSelectTarget structure initated with the values stored in @target.


</description>
<parameters>
<parameter name="target">
<parameter_description> a #GdaSqlSelectTarget structure to be copied
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaSqlSelectTarget structure.
</return>
</function>

<function name="gda_sql_statement_check_validity">
<description>
If @cnc is not %NULL, then checks that all the database objects referenced in the statement actually
exist in the connection&apos;s database (for example the table being updated in a UPDATE statement must exist in the
connection&apos;s database for the check to succeed). This method fills the @stmt-&amp;gt;validity_meta_struct attribute.

If @cnc is %NULL, then remove any information from a previous call to this method stored in @stmt. In this case,
the @stmt-&amp;gt;validity_meta_struct attribute is cleared.

Also note that some parts of @stmt may be modified: for example leading and trailing spaces in aliases or
objects names will be removed.


</description>
<parameters>
<parameter name="stmt">
<parameter_description> a #GdaSqlStatement pointer
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_data_model_dump_as_string">
<description>
Dumps a textual representation of the @model into a new string

The following environment variables can affect the resulting output:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;GDA_DATA_MODEL_DUMP_ROW_NUMBERS: if set, the first coulumn of the output will contain row numbers&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;GDA_DATA_MODEL_DUMP_TITLE: if set, also dump the data model&apos;s title&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;GDA_DATA_MODEL_DUMP_NULL_AS_EMPTY: if set, replace the &apos;NULL&apos; string with an empty string for NULL values &amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel.
</parameter_description>
</parameter>
</parameters>
<return> a new string.
</return>
</function>

<function name="gda_sql_select_join_new">
<description>
Creates a new #GdaSqlSelectJoin structure and sets its parent to @parent.


</description>
<parameters>
<parameter name="parent">
<parameter_description> a #GdaSqlSelectFrom
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaSqlSelectJoin structure
</return>
</function>

<function name="gda_server_operation_is_valid">
<description>
Tells if all the required values in @op have been defined.

if @xml_file is not %NULL, the validity of @op is tested against that specification, 
and not againts the current @op&apos;s specification.


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaServerOperation widget
</parameter_description>
</parameter>
<parameter name="xml_file">
<parameter_description> an XML specification file (see gda_server_operation_new())
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store an error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @op is valid
</return>
</function>

<function name="gda_xa_transaction_string_to_id">
<description>
Creates a new #GdaXaTransactionId structure from its string representation, it&apos;s the opposite
of gda_xa_transaction_id_to_string().


</description>
<parameters>
<parameter name="str">
<parameter_description> a string representation of a #GdaXaTransactionId, in the &quot;gtrid,bqual,formatID&quot; format
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaXaTransactionId structure, or %NULL in @str has a wrong format
</return>
</function>

<function name="gda_holder_set_attribute">
<description>
Set the value associated to a named attribute. The @attribute string is &apos;stolen&apos; by this method, and
the memory it uses will be freed using the @destroy function when no longer needed (if @destroy is %NULL,
then the string will not be freed at all).

Attributes can have any name, but Libgda proposes some default names, 
see &amp;lt;link linkend=&quot;libgda-40-Attributes-manager.synopsis&quot;&amp;gt;this section&amp;lt;/link&amp;gt;.

For example one would use it as:

&amp;lt;code&amp;gt;
gda_holder_set_attribute (holder, g_strdup (my_attribute), g_free, my_value);
gda_holder_set_attribute (holder, GDA_ATTRIBUTE_NAME, NULL, my_value);
&amp;lt;/code&amp;gt;

If there is already an attribute named @attribute set, then its value is replaced with the new value (@value is
copied), except if @value is %NULL, in which case the attribute is removed.

</description>
<parameters>
<parameter name="holder">
<parameter_description> a #GdaHolder
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> attribute name
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue, or %NULL
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> a function to be called when @attribute is not needed anymore, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_attributes_manager_free">
<description>
Frees all the resssources managed by @mgr

</description>
<parameters>
<parameter name="mgr">
<parameter_description> a #GdaAttributesManager
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_meta_store_extract">
<description>
Extracts some data stored in @store using a custom SELECT query.


</description>
<parameters>
<parameter name="store">
<parameter_description> a #GdaMetaStore object
</parameter_description>
</parameter>
<parameter name="select_sql">
<parameter_description> a SELECT statement
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of (variable name (gchar *), GValue *value) terminated with NULL, representing values for all the
variables mentionned in @select_sql. If there is no variable then this part can be omitted.
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaDataModel, or %NULL if an error occurred
</return>
</function>

<function name="gda_vconnection_data_model_get_table_name">
<description>
Find the name of the table associated to @model in @cnc


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaVconnectionDataModel connection
</parameter_description>
</parameter>
<parameter name="model">
<parameter_description> a #GdaDataModel representing a table within @cnc
</parameter_description>
</parameter>
</parameters>
<return> the table name, or %NULL if not found
</return>
</function>

<function name="gda_handler_string_new_with_provider">
<description>
Creates a data handler for strings, which will use some specific methods implemented
by the @prov object (possibly also @cnc).


</description>
<parameters>
<parameter name="prov">
<parameter_description> a #GdaServerProvider object
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_column_set_position">
<description>
Sets the position of the column refer to in the containing
data model.

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the wanted position of the column in the containing data model.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_blob_set_op">
<description>
correctly assigns @op to @blob

</description>
<parameters>
<parameter name="blob">
<parameter_description> a #GdaBlob value
</parameter_description>
</parameter>
<parameter name="op">
<parameter_description> a #GdaBlobOp object, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_set_new_from_spec_node">
<description>
Creates a new #GdaSet object from the @xml_spec
specifications


</description>
<parameters>
<parameter name="xml_spec">
<parameter_description> a #xmlNodePtr for a &amp;lt;holders&amp;gt; tag
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store the error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new object, or %NULL if an error occurred
</return>
</function>

<function name="gda_xa_transaction_new">
<description>
Creates a new #GdaXaTransaction object, which will control the processus of
performing a distributed transaction across several connections.


</description>
<parameters>
<parameter name="format">
<parameter_description> a format ID
</parameter_description>
</parameter>
<parameter name="global_transaction_id">
<parameter_description> the global transaction ID
</parameter_description>
</parameter>
</parameters>
<return> the newly created object.
</return>
</function>

<function name="gda_holder_get_value">
<description>
Get the value held into the holder. If @holder is set to use its default value
and that default value is not of the same type as @holder, then %NULL is returned.

If @holder is set to NULL, then the returned value is a #GDA_TYPE_NULL GValue.


</description>
<parameters>
<parameter name="holder">
<parameter_description> a #GdaHolder object
</parameter_description>
</parameter>
</parameters>
<return> the value, or %NULL
</return>
</function>

<function name="gda_data_proxy_set_filter_expr">
<description>
Sets a filter among the rows presented by @proxy. The filter is defined by a filter expression
which can be any SQL valid expression using @proxy&apos;s columns. For instance if @proxy has the &quot;id&quot; and
&quot;name&quot; columns, then a filter can be &quot;length(name) &amp;lt; 5&quot; to filter only the rows where the length of the
name is strictly inferior to 5, or &quot;id &amp;gt;= 1000 and id &amp;lt; 2000 order by name limit 50&quot; to filter only the rows where the id
is between 1000 and 2000, ordered by name and limited to 50 rows.

Note about column names: real column names can be used (double quoted if necessary), but columns can also be named
&quot;_&amp;lt;column number&amp;gt;&quot; with colmun numbers starting at 1.

Note that any previous filter expression is replaced with the new @filter_expr if no error occurs
(if an error occurs, then any previous filter is left unchanged).


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
<parameter name="filter_expr">
<parameter_description> an SQL based expression which will filter the contents of @proxy, or %NULL to remove any previous filter
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_blob_to_string">
<description>
Converts all the non printable characters of blob-&amp;gt;data into the \xxx representation
where xxx is the octal representation of the byte, and the &apos;\&apos; (backslash) character
is converted to &quot;\\&quot;.


</description>
<parameters>
<parameter name="blob">
<parameter_description> a correctly filled @GdaBlob structure
</parameter_description>
</parameter>
<parameter name="maxlen">
<parameter_description> a maximum len used to truncate, or 0 for no maximum length
</parameter_description>
</parameter>
</parameters>
<return> a new string from @blob
</return>
</function>

<function name="gda_data_model_import_from_model">
<description>
Copy the contents of the @from data model to the @to data model. The copy stops as soon as an error
orrurs.

The @cols_trans is a hash table for which keys are @to columns numbers and the values are
the corresponding column numbers in the @from data model. To set the values of a column in @to to NULL,
create an entry in the hash table with a negative value.


</description>
<parameters>
<parameter name="to">
<parameter_description> the destination #GdaDataModel
</parameter_description>
</parameter>
<parameter name="from">
<parameter_description> the source #GdaDataModel
</parameter_description>
</parameter>
<parameter name="overwrite">
<parameter_description> TRUE if @to is completely overwritten by @from&apos;s data, and FALSE if @from&apos;s data is appended to @to
</parameter_description>
</parameter>
<parameter name="cols_trans">
<parameter_description> a #GHashTable for columns translating, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred.
</return>
</function>

<function name="gda_meta_store_schema_get_depend_tables">
<description>

Get an ordered list of the tables @store knows about on which the @table_name table depends (recursively). 
The tables are ordered in a way that tables dependencies
are respected: if table B has a foreign key on table A, then table A will be listed before table B in the returned
list.


</description>
<parameters>
<parameter name="store">
<parameter_description> a #GdaMetaStore object
</parameter_description>
</parameter>
<parameter name="table_name">
<parameter_description> the name of the table for which all the dependencies must be listed
</parameter_description>
</parameter>
</parameters>
<return> a new list of tables names (as gchar*), the list must be freed when no longer needed, 
but the strings present in the list must not be modified.
</return>
</function>

<function name="gda_sql_select_from_take_new_target">
<description>
Append @target to the targets in the FROM clausure and set @target&apos;s parent to
@from; after call this function @from owns @target then you must not free it.

</description>
<parameters>
<parameter name="from">
<parameter_description> a #GdaSqlSelectFrom structure
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> a #GdaSqlSelectTarget to take from
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_connection_clear_events_list">
<description>
This function lets you clear the list of #GdaConnectionEvent&apos;s of the
given connection. 

</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_sql_statement_check_structure">
<description>
Checks for any error in @stmt&apos;s structure to make sure the statement is valid
(for example a SELECT statement must at least return a column, a DELETE statement must specify which table
is targetted).


</description>
<parameters>
<parameter name="stmt">
<parameter_description> a #GdaSqlStatement pointer
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_meta_struct_dump_as_graph">
<description>
Creates a new graph (in the GraphViz syntax) representation of @mstruct.


</description>
<parameters>
<parameter name="mstruct">
<parameter_description> a #GdaMetaStruct object
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> informs what kind of information to show in the resulting graph
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new string, or %NULL if an error occurred.
</return>
</function>

<function name="gda_attributes_manager_new">
<description>
Creates a new #GdaAttributesManager, which can store (name, value) attributes for pointers or GObject objects
(in the latter case, the attibutes are destroyed when objects are also destroyed).


</description>
<parameters>
<parameter name="for_objects">
<parameter_description> set to TRUE if attributes will be set on objects.
</parameter_description>
</parameter>
<parameter name="signal_func">
<parameter_description> a function to be called whenever an attribute changes on an object (if @for_objects is TRUE), or %NULL
</parameter_description>
</parameter>
<parameter name="signal_data">
<parameter_description> user data passed as last argument of @signal_func when it is called
</parameter_description>
</parameter>
</parameters>
<return> the new #GdaAttributesManager
</return>
</function>

<function name="gda_data_proxy_alter_value_attributes">
<description>
Alters the attributes of the value stored at (proxy_row, col) in @proxy. the @alter_flags
can only contain the GDA_VALUE_ATTR_IS_NULL, GDA_VALUE_ATTR_IS_DEFAULT and GDA_VALUE_ATTR_IS_UNCHANGED
flags (other flags are ignored).

</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
<parameter name="proxy_row">
<parameter_description> A proxy row number
</parameter_description>
</parameter>
<parameter name="col">
<parameter_description> a valid column number
</parameter_description>
</parameter>
<parameter name="alter_flags">
<parameter_description> flags to alter the attributes
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_sql_select_field_free">
<description>
Frees a #GdaSqlSelectField structure and its members.

</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaSqlSelectField structure to be freed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_sql_select_order_copy">
<description>
Creates a new #GdaSqlSelectOrder structure initated with the values stored in @order.


</description>
<parameters>
<parameter name="order">
<parameter_description> a #GdaSqlSelectOrder structure to be copied
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaSqlSelectOrder structure.
</return>
</function>

<function name="gda_set_set_holder_value">
<description>
Set the value of the #GdaHolder which ID is @holder_id to a specified value


</description>
<parameters>
<parameter name="set">
<parameter_description> a #GdaSet object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
<parameter name="holder_id">
<parameter_description> the ID of the holder to set the value
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> value, of the correct type, depending on the requested holder&apos;s type (not NULL)
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred and the value was set correctly
</return>
</function>

<function name="gda_meta_struct_get_db_object">
<description>
Tries to locate the #GdaMetaDbObject structure representing the database object named after
@catalog, @schema and @name.

If one or both of @catalog and @schema are %NULL, and more than one database object matches the name, then
the return value is also %NULL.


</description>
<parameters>
<parameter name="mstruct">
<parameter_description> a #GdaMetaStruct object
</parameter_description>
</parameter>
<parameter name="catalog">
<parameter_description> the catalog the object belongs to (as a G_TYPE_STRING GValue), or %NULL
</parameter_description>
</parameter>
<parameter name="schema">
<parameter_description> the schema the object belongs to (as a G_TYPE_STRING GValue), or %NULL
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the object&apos;s name (as a G_TYPE_STRING GValue), not %NULL
</parameter_description>
</parameter>
</parameters>
<return> the #GdaMetaDbObject or %NULL if not found
</return>
</function>

<function name="gda_holder_value_is_default">
<description>
Tells if @holder&apos;s current value is the default one.


</description>
<parameters>
<parameter name="holder">
<parameter_description> a #GdaHolder object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @holder @holder&apos;s current value is the default one
</return>
</function>

<function name="gda_sql_select_join_serialize">
<description>
Creates a new string description of the join used in a SELECT statement.


</description>
<parameters>
<parameter name="join">
<parameter_description> a #GdaSqlSelectJoin structure
</parameter_description>
</parameter>
</parameters>
<return> a new string with the description of the join or &quot;null&quot; in case @join is invalid.
</return>
</function>

<function name="gda_log_is_enabled">
<description>

</description>
<parameters>
</parameters>
<return> whether GDA logs are enabled (%TRUE or %FALSE).
</return>
</function>

<function name="gda_attributes_manager_set">
<description>
Associates an attribute named @att_name to @ptr, with the value @value. Any previous association is replaced by
this one, and if @value is %NULL then the association is removed.

Note: @att_name is *not* copied, so it should be a string which exists as long as @mgr exists.
Libgda provides several predefined names for common attributes,
see &amp;lt;link linkend=&quot;libgda-40-Attributes-manager.synopsis&quot;&amp;gt;this section&amp;lt;/link&amp;gt;.

If @att_name needs to be freed when not used anymore, then use gda_attributes_manager_set_full().

</description>
<parameters>
<parameter name="mgr">
<parameter_description> a #GdaAttributesManager
</parameter_description>
</parameter>
<parameter name="ptr">
<parameter_description> a pointer to the ressources to which the attribute will apply
</parameter_description>
</parameter>
<parameter name="att_name">
<parameter_description> an attribute&apos;s name
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_sql_case_copy">
<description>
Creates a new #GdaSqlCase structure initated with the values stored in @sc.


</description>
<parameters>
<parameter name="sc">
<parameter_description> a #GdaSqlCase structure to be copied
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaSqlCase structure.
</return>
</function>

<function name="gda_data_comparator_set_key_columns">
<description>
Defines the columns which will be used as a key when searching data. This is not mandatory but
will speed things up as less data will be processed.

</description>
<parameters>
<parameter name="comp">
<parameter_description> a #GdaDataComparator object
</parameter_description>
</parameter>
<parameter name="nb_cols">
<parameter_description> the size of the @col_numbers array
</parameter_description>
</parameter>
<parameter name="col_numbers">
<parameter_description> a array of @nb_cols values
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_handler_time_get_no_locale_str_from_value">
<description>
Retunrs: a new string representing @value without taking the current
locele into account

</description>
<parameters>
<parameter name="hdl">
<parameter_description> a #GdaHandlerTime object
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a GValue value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_connection_event_set_source">
<description>
Sets @event&apos;s @source; this function should not be called directly

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdaConnectionEvent.
</parameter_description>
</parameter>
<parameter name="source">
<parameter_description> a source.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_attributes_manager_copy">
<description>
For each attribute set for @from (in @from_mgr), set the same attribute to @to (in @to_mgr). @from_mgr and
@to_mgr can be equal.

</description>
<parameters>
<parameter name="from_mgr">
<parameter_description> a #GdaAttributesManager
</parameter_description>
</parameter>
<parameter name="from">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="to_mgr">
<parameter_description> a #GdaAttributesManager
</parameter_description>
</parameter>
<parameter name="to">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_virtual_connection_internal_get_provider_data">
<description>
Get the opaque pointer previously set using gda_virtual_connection_internal_set_provider_data().
If it&apos;s not set, then add a connection event and returns %NULL


</description>
<parameters>
<parameter name="vcnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
</parameters>
<return> the pointer to the opaque structure set using gda_virtual_connection_internal_set_provider_data()
</return>
</function>

<function name="gda_prepare_create_database">
<description>
Creates a new #GdaServerOperation object which contains the specifications required
to create a database. Once these specifications provided, use 
gda_perform_create_database() to perform the database creation.

If @db_name is left %NULL, then the name of the database to create will have to be set in the
returned #GdaServerOperation using gda_server_operation_set_value_at().


</description>
<parameters>
<parameter name="provider">
<parameter_description> the database provider to use
</parameter_description>
</parameter>
<parameter name="db_name">
<parameter_description> the name of the database to create, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> new #GdaServerOperation object, or %NULL if the provider does not support database
creation
</return>
</function>

<function name="gda_server_provider_create_operation">
<description>
Creates a new #GdaServerOperation object which can be modified in order to perform the @type type of
action. The @options can contain:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;named values which ID is a path in the resulting GdaServerOperation object, to initialize some value&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;named values which may change the contents of the GdaServerOperation, see &amp;lt;link linkend=&quot;gda-server-op-information-std&quot;&amp;gt;this section&amp;lt;/link&amp;gt; for more information&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;


</description>
<parameters>
<parameter name="provider">
<parameter_description> a #GdaServerProvider object
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object which will be used to perform an action, or %NULL
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the type of operation requested
</parameter_description>
</parameter>
<parameter name="options">
<parameter_description> an optional list of parameters
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store an error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaServerOperation object, or %NULL in the provider does not support the @type type
of operation or if an error occurred
</return>
</function>

<function name="gda_data_handler_get_str_from_value">
<description>
Creates a new string which is a &quot;user friendly&quot; representation of the given value
(in the users&apos;s locale, specially for the dates). If the value is 
NULL or is of type GDA_TYPE_NULL, the returned string is a copy of &quot;&quot; (empty string).


</description>
<parameters>
<parameter name="dh">
<parameter_description> an object which implements the #GdaDataHandler interface
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value to be converted to a string
</parameter_description>
</parameter>
</parameters>
<return> the new string.
</return>
</function>

<function name="gda_xa_transaction_register_connection">
<description>
Registers @cnc to be used by @xa_trans to create a distributed transaction.

Note: any #GdaConnection object can only be registered with at most one #GdaXaTransaction object; also
some connections may not be registered at all with a #GdaXaTransaction object because the database
provider being used does not support it.


</description>
<parameters>
<parameter name="xa_trans">
<parameter_description> a #GdaXaTransaction object
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> the connection to add to @xa_trans
</parameter_description>
</parameter>
<parameter name="branch">
<parameter_description> the branch qualifier
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_dir_blob_op_new">
<description>

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gda_config_remove_dsn">
<description>
Add or update a DSN from the definition in @info


</description>
<parameters>
<parameter name="dsn_name">
<parameter_description> the name of the DSN to remove
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_sql_field_copy">
<description>
Creates a new GdaSqlField structure initated with the values stored in @field.


</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaSqlAnyPart
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaSqlField structure.
</return>
</function>

<function name="gda_sql_expr_free">
<description>
Frees a #GdaSqlExpr structure and its members.


</description>
<parameters>
<parameter name="expr">
<parameter_description> a #GdaSqlExpr to be freed.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_rfc1738_encode">
<description>
Encodes @string using the RFC 1738 recommendations: the
&amp;lt;constant&amp;gt;&amp;lt;&amp;gt;&amp;quot;#%{}|\^~[]&amp;apos;`;/?:@=&amp;amp;&amp;lt;/constant&amp;gt; and space characters are replaced by 
&amp;lt;constant&amp;gt;&amp;quot;%%ab&amp;quot;&amp;lt;/constant&amp;gt; where
&amp;lt;constant&amp;gt;ab&amp;lt;/constant&amp;gt; is the hexadecimal number corresponding to the character.


</description>
<parameters>
<parameter name="string">
<parameter_description> a string to encode 
</parameter_description>
</parameter>
</parameters>
<return> a new string
</return>
</function>

<function name="gda_sql_operation_operator_to_string">
<description>
Returns: a string with the operator&apos;s name or NULL in case @op is invalid.

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaSqlOperation structure
</parameter_description>
</parameter>
</parameters>
<return> a string with the operator&apos;s name or NULL in case @op is invalid.
</return>
</function>

<function name="gda_data_model_import_new_mem">
<description>
Creates a new #GdaDataModel object which contains the data stored in the @data string. 

Important note: the @data string is not copied for memory efficiency reasons and should not
therefore be altered in any way as long as the returned data model exists.


</description>
<parameters>
<parameter name="data">
<parameter_description> a string containng the data to import
</parameter_description>
</parameter>
<parameter name="random_access">
<parameter_description> TRUE if random access will be required
</parameter_description>
</parameter>
<parameter name="options">
<parameter_description> list of importing options, see gda_data_model_import_new_file() for more information
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the newly created #GdaDataModel.
</return>
</function>

<function name="gda_dir_blob_get_filename">
<description>

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gda_holder_get_source_model">
<description>
Tells if @holder has its values sourceed by a #GdaDataModel, and optionnaly
allows to fetch the resteictions.


</description>
<parameters>
<parameter name="holder">
<parameter_description> a #GdaHolder
</parameter_description>
</parameter>
<parameter name="col">
<parameter_description> a place to store the column in the model sourceing the holder, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the #GdaDataModel source for @holder
</return>
</function>

<function name="gda_set_get_source">
<description>
Finds a #GdaSetSource which contains the #GdaDataModel restricting the possible values of
@holder, don&apos;t modify the returned structure.


</description>
<parameters>
<parameter name="set">
<parameter_description> a #GdaSet object
</parameter_description>
</parameter>
<parameter name="holder">
<parameter_description> a #GdaHolder object
</parameter_description>
</parameter>
</parameters>
<return> a #GdaSetSource or %NULL
</return>
</function>

<function name="gda_data_model_iter_invalidate_contents">
<description>
Declare all the parameters in @iter invalid, without modifying the
#GdaDataModel @iter is for or changing the row it represents. This method
is for internal usage.

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GdaDataModelIter object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_attributes_manager_foreach">
<description>
Calls @func for every attribute set to @ptr.

</description>
<parameters>
<parameter name="mgr">
<parameter_description> a #GdaAttributesManager
</parameter_description>
</parameter>
<parameter name="ptr">
<parameter_description> a pointer to the ressources for which all the attributes used
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a #GdaAttributesManagerFunc function
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data to be passed as last argument of @func each time it is called
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_sql_parser_parse_file_as_batch">
<description>
Parse @filename&apos;s contents and creates a #GdaBatch object which contains all the
#GdaStatement objects created while parsing (one object per SQL statement).

@filename&apos;s contents are parsed and #GdaStatement objects are created as long as no error is found. If an error is found 
at some point, then the parsing stops, @error may be set and %NULL is returned

if @sql is %NULL, then the returned #GdaBatch object will contain no statement.


</description>
<parameters>
<parameter name="parser">
<parameter_description> a #GdaSqlParser object
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> name of the file to parse
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaBatch object, or %NULL if an error occurred
</return>
</function>

<function name="gda_meta_store_modify_with_context">
<description>
Propagates an update to @store, the update&apos;s contents is represented by @new_data, this function is
primarily reserved to database providers.


</description>
<parameters>
<parameter name="store">
<parameter_description> a #GdaMetaStore object
</parameter_description>
</parameter>
<parameter name="context">
<parameter_description> a #GdaMetaContext context describing what to modify in @store
</parameter_description>
</parameter>
<parameter name="new_data">
<parameter_description> a #GdaDataModel containing the new data to set in @table_name, or %NULL (treated as a data model
with no row at all)
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_sql_operation_free">
<description>
Frees a #GdaSqlOperation structure and its members.

</description>
<parameters>
<parameter name="operation">
<parameter_description> a #GdaSqlOperation structure to be freed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_vprovider_data_model_new">
<description>
Creates a new GdaVirtualProvider object which allows one to 
add and remove GdaDataModel objects as tables within a connection


</description>
<parameters>
</parameters>
<return> a new #GdaVirtualProvider object.
</return>
</function>

<function name="gda_meta_table_column_foreach_attribute">
<description>
Calls @func for each attribute set to tcol

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaMetaTableColumn
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a #GdaAttributesManagerFunc function
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data to be passed as last argument of @func each time it is called
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_proxy_set_sample_size">
<description>
Sets the size of each chunk of fata to display: the maximum number of rows which
can be displayed at a time. The default value is arbitrary 300 as it is big enough to
be able to display quite a lot of data, but small enough to avoid too much data
displayed at the same time.

Note: the rows which have been added but not yet commited will always be displayed
regardless of the current chunk of data, and the modified rows which are not visible
when the displayed chunk of data changes are still held as modified rows.

To remove the chunking of the data to display, simply pass @sample_size the 0 value.

</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
<parameter name="sample_size">
<parameter_description> the requested size of a chunk, or 0
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_handler_time_new">
<description>
Creates a data handler for time values


</description>
<parameters>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_row_get_length">
<description>

</description>
<parameters>
<parameter name="row">
<parameter_description> a #GdaRow.
</parameter_description>
</parameter>
</parameters>
<return> the number of columns that the @row has.
</return>
</function>

<function name="gda_data_proxy_get_filter_expr">
<description>
Get the current filter expression used by @proxy.


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
</parameters>
<return> the current filter expression or %NULL if no filter has been set
</return>
</function>

<function name="gda_log_disable">
<description>
Disables GDA logs.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gda_value_set_null">
<description>
Sets the type of @value to #GDA_TYPE_NULL.

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue that will store a value of type #GDA_TYPE_NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_dir_blob_set_filename">
<description>

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gda_meta_struct_load_from_xml_file">
<description>

</description>
<parameters>
<parameter name="mstruct">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="xml_spec_file">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error has occurred
</return>
</function>

<function name="gda_value_new_from_xml">
<description>
Creates a GValue from an XML representation of it. That XML
node corresponds to the following string representation:
&amp;lt;value type=&quot;gdatype&quot;&amp;gt;value&amp;lt;/value&amp;gt;

For more information
about the string format, see the gda_value_set_from_string() function.
This function is typically used when reading configuration files or other non-user input that should be locale 
independent.


</description>
<parameters>
<parameter name="node">
<parameter_description> an XML node representing the value.
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GValue.
</return>
</function>

<function name="gda_data_model_append_values">
<description>
Appends a row to the given data model. If any value in @values is actually %NULL, then 
it is considered as a default value.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
<parameter name="values">
<parameter_description> #GList of #GValue* representing the row to add.  The
length must match model&apos;s column count.  These #GValue
are value-copied (the user is still responsible for freeing them).
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the number of the added row, or -1 if an error occurred
</return>
</function>

<function name="gda_holder_set_value">
<description>
Sets the value within the holder. If @holder is an alias for another
holder, then the value is also set for that other holder.

On success, the action of any call to gda_holder_force_invalid() is cancelled
as soon as this method is called (even if @holder&apos;s value does not actually change)

If the value is not different from the one already contained within @holder,
then @holder is not changed and no signal is emitted.

Note1: the @value argument is treated the same way if it is %NULL or if it is a #GDA_TYPE_NULL value

Note2: if @holder can&apos;t accept the @value value, then this method returns FALSE, and @holder will be left
in an invalid state.

Note3: before the change is accepted by @holder, the &quot;validate-change&quot; signal will be emitted (the value
of which can prevent the change from happening) which can be connected to to have a greater control
of which values @holder can have, or implement some business rules.


</description>
<parameters>
<parameter name="holder">
<parameter_description> a #GdaHolder object
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a value to set the holder to, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if value has been set
</return>
</function>

<function name="gda_data_model_bdb_get_errors">
<description>
Get the list of errors which have occurred while using @model


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModelBdb object
</parameter_description>
</parameter>
</parameters>
<return> a read-only list of #GError pointers, or %NULL if no error has occurred
</return>
</function>

<function name="gda_value_set_ushort">
<description>
Stores @val into @value.

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue that will store @val.
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> value to be stored in @value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_holder_copy">
<description>
Copy constructor.

Note1: if @orig is set with a static value (see #gda_holder_take_static_value ()) 
its copy will have a fresh new allocated GValue, so that user should free it when done.


</description>
<parameters>
<parameter name="orig">
<parameter_description> a #GdaHolder object to copy
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaHolder object
</return>
</function>

<function name="This">
<description>
@note The BinReloc source code MUST be included in your library, or this
function won&apos;t work correctly.

@returns TRUE on success, FALSE if a filename cannot be found.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gda_data_handler_get_value_from_sql">
<description>
Creates a new GValue which represents the SQL value given as argument. This is
the opposite of the function gda_data_handler_get_sql_from_value(). The type argument
is used to determine the real data type requested for the returned value.

If the sql string is NULL, then the returned GValue is of type GDA_TYPE_NULL;
if the sql string does not correspond to a valid SQL string for the requested type, then
NULL is returned.


</description>
<parameters>
<parameter name="dh">
<parameter_description> an object which implements the #GdaDataHandler interface
</parameter_description>
</parameter>
<parameter name="sql">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> 
</parameter_description>
</parameter>
</parameters>
<return> the new GValue or NULL on error
</return>
</function>

<function name="gda_value_set_from_string">
<description>
Stores the value data from its string representation as @type.

The accepted formats are:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;G_TYPE_BOOLEAN: a caseless comparison is made with &quot;true&quot; or &quot;false&quot;&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;numerical types: C locale format (dot as a fraction separator)&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;G_TYPE_DATE: see &amp;lt;link linkend=&quot;gda-parse-iso8601-date&quot;&amp;gt;gda_parse_iso8601_date()&amp;lt;/link&amp;gt;&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;GDA_TYPE_TIME: see &amp;lt;link linkend=&quot;gda-parse-iso8601-time&quot;&amp;gt;gda_parse_iso8601_time()&amp;lt;/link&amp;gt;&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;GDA_TYPE_TIMESTAMP: see &amp;lt;link linkend=&quot;gda-parse-iso8601-timestamp&quot;&amp;gt;gda_parse_iso8601_timestamp()&amp;lt;/link&amp;gt;&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;

This function is typically used when reading configuration files or other non-user input that should be locale 
independent.


</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue that will store @val.
</parameter_description>
</parameter>
<parameter name="as_string">
<parameter_description> the stringified representation of the value.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the type of the value
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the value has been converted to @type from
its string representation; it not means that the value is converted 
successfully, just that the transformation is avairable. %FALSE otherwise.
</return>
</function>

<function name="gda_holder_take_static_value">
<description>
Sets the const value within the holder. If @holder is an alias for another
holder, then the value is also set for that other holder.

The value will not be freed, and user should take care of it, either for its
freeing or for its correct value at the moment of query.

If the value is not different from the one already contained within @holder,
then @holder is not chaged and no signal is emitted.

Note1: if @holder can&apos;t accept the @value value, then this method returns NULL, and @holder will be left
in an invalid state.

Note2: before the change is accepted by @holder, the &quot;validate-change&quot; signal will be emitted (the value
of which can prevent the change from happening) which can be connected to to have a greater control
of which values @holder can have, or implement some business rules.


</description>
<parameters>
<parameter name="holder">
<parameter_description> a #GdaHolder object
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a const value to set the holder to
</parameter_description>
</parameter>
<parameter name="value_changed">
<parameter_description> a boolean set with TRUE if the value changes, FALSE elsewhere.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> NULL if an error occurred or if the previous GValue was NULL itself. It returns
the static GValue user set previously, so that he can free it.

</return>
</function>

<function name="gda_connection_value_to_sql_string">
<description>
Produces a fully quoted and escaped string from a GValue


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
<parameter name="from">
<parameter_description> #GValue to convert from
</parameter_description>
</parameter>
</parameters>
<return> escaped and quoted value or NULL if not supported.
</return>
</function>

<function name="gda_data_model_iter_get_column_for_param">
<description>
Get the column number in the #GdaDataModel for which @iter is an iterator as
represented by the @param parameter


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GdaDataModelIter object
</parameter_description>
</parameter>
<parameter name="param">
<parameter_description> a #GdaHolder object, listed in @iter
</parameter_description>
</parameter>
</parameters>
<return> the column number, or @param is not valid
</return>
</function>

<function name="gda_data_proxy_get_n_modified_rows">
<description>
Get the number of rows which have been modified in the proxy (the sum of rows existing in
the proxied data model which have been modified, and new rows).


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
</parameters>
<return> the number of modified rows
</return>
</function>

<function name="gda_meta_struct_complement">
<description>
Creates a new #GdaMetaDbObject structure in @mstruct to represent the database object (of type @type)
which can be uniquely identified as @catalog.@schema.@name.

If @catalog is not %NULL, then @schema should not be %NULL.

If both @catalog and @schema are %NULL, then the database object will be the one which is
&quot;visible&quot; by default (that is which can be accessed only by its short @name name).

If @catalog is %NULL and @schema is not %NULL, then the database object will be the one which 
can be accessed by its @schema.@name name.

Important note: @catalog, @schema and @name must respect the following convention:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;be surrounded by double quotes for a case sensitive search&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;otherwise they will be converted to lower case for search&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;


</description>
<parameters>
<parameter name="mstruct">
<parameter_description> a #GdaMetaStruct object
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the type of object to add (which can be GDA_META_DB_UNKNOWN)
</parameter_description>
</parameter>
<parameter name="catalog">
<parameter_description> the catalog the object belongs to (as a G_TYPE_STRING GValue), or %NULL
</parameter_description>
</parameter>
<parameter name="schema">
<parameter_description> the schema the object belongs to (as a G_TYPE_STRING GValue), or %NULL
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the object&apos;s name (as a G_TYPE_STRING GValue), not %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the #GdaMetaDbObject corresponding to the database object if no error occurred, or %NULL
</return>
</function>

<function name="gda_sql_select_field_take_star_value">
<description>
Sets the expression field&apos;s value in the #GdaSqlSelectField structure to point to @value;
after this @field is the owner of @value.


</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaSqlSelectField structure
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue to take from
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_sql_expr_serialize">
<description>
Creates a new string representing a field. You need to free the returned string
using g_free();


</description>
<parameters>
<parameter name="expr">
<parameter_description> a #GdaSqlExpr structure
</parameter_description>
</parameter>
</parameters>
<return> a new string with the name of the field or &quot;null&quot; in case @expr is invalid.
</return>
</function>

<function name="gda_connection_supports_feature">
<description>
Asks the underlying provider for if a specific feature is supported.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
<parameter name="feature">
<parameter_description> feature to ask for.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the provider supports it, %FALSE if not.
</return>
</function>

<function name="gda_utility_check_data_model">
<description>
Check the column types of a GdaDataModel.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object
</parameter_description>
</parameter>
<parameter name="nbcols">
<parameter_description> the minimum requested number of columns
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> @nbcols arguments of type GType or -1 (if any data type is accepted)
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the data model&apos;s columns match the provided data types and number
</return>
</function>

<function name="gda_insert_row_into_table">
<description>
This is just a convenient function to insert a row with the values given as argument.
The values must correspond with the GType of the column to set, otherwise throw to 
an error. Finish the list with NULL.

The arguments must be pairs of column name followed by his value.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> an opened connection
</parameter_description>
</parameter>
<parameter name="table_name">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of string/@GValue pairs where the string is the name of the column
followed by its @GValue to set in the insert operation, finished by %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred, and FALSE and set error otherwise
</return>
</function>

<function name="gda_batch_new">
<description>
Creates a new #GdaBatch object


</description>
<parameters>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_gbr_init">
<description>

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gda_handler_boolean_new">
<description>
Creates a data handler for booleans


</description>
<parameters>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_connection_get_meta_store">
<description>
Get or initializes the #GdaMetaStore associated to @cnc


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
</parameters>
<return> a #GdaMetaStore object
</return>
</function>

<function name="gda_data_model_create_iter">
<description>
Creates a new iterator object #GdaDataModelIter object which can be used to iterate through
rows in @model.

The row the returned #GdaDataModelIter represents is undefined. For models which can be accessed 
randomly the corresponding row can be set using gda_data_model_iter_move_to_row(), 
and for models which are accessible sequentially only then the first row will be
fetched using gda_data_model_iter_move_next().


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaDataModelIter object, or %NULL if an error occurred
</return>
</function>

<function name="gda_value_get_short">
<description>

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue whose value we want to get.
</parameter_description>
</parameter>
</parameters>
<return> the value stored in @value.
</return>
</function>

<function name="gda_connection_update_meta_store">
<description>
Updates @cnc&apos;s associated #GdaMetaStore. If @context is not %NULL, then only the parts described by
@context will be updated, and if it is %NULL, then the complete meta store will be updated.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
<parameter name="context">
<parameter_description> description of which part of @cnc&apos;s associated #GdaMetaStore should be updated, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_data_model_array_new_with_g_types">
<description>
Creates a new #GdaDataModel object with the column types as
specified.


</description>
<parameters>
<parameter name="cols">
<parameter_description> number of columns for rows in this data model.
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> types of the columns of the model to create as #GType, as many as indicated by @cols
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the newly created #GdaDataModel.
</return>
</function>

<function name="gda_meta_struct_add_db_object">
<description>
Adds @dbo to the database objects known to @mstruct. In any case (whether an error occured or not)
@dbo&apos;s responsability is then transferred to @smtruct and should
not be used after calling this function (it may have been destroyed). If you need a pointer to the #GdaMetaDbObject
for a database object, use gda_meta_struct_get_db_object().


</description>
<parameters>
<parameter name="mstruct">
<parameter_description> a #GdaMetaStruct object
</parameter_description>
</parameter>
<parameter name="dbo">
<parameter_description> a #GdaMetaDbObject structure
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the #GdaMetaDbObject used in @mstruct to represent the added database object (may be @dbo or not)
</return>
</function>

<function name="gda_dsn_split">
<description>
Extract the DSN, username and password from @string. in @string, the various parts are strings
which are expected to be encoded using an RFC 1738 compliant encoding. If they are specified, 
the returned username and password strings are correclty decoded.

@out_username and @out_password may be set to %NULL depending on @string&apos;s format.

</description>
<parameters>
<parameter name="string">
<parameter_description> a string in the &quot;[&amp;lt;username&amp;gt;[:&amp;lt;password&amp;gt;]@]&amp;lt;DSN&amp;gt;&quot; form
</parameter_description>
</parameter>
<parameter name="out_dsn">
<parameter_description> a place to store the new string containing the &amp;lt;DSN&amp;gt; part
</parameter_description>
</parameter>
<parameter name="out_username">
<parameter_description> a place to store the new string containing the &amp;lt;username&amp;gt; part
</parameter_description>
</parameter>
<parameter name="out_password">
<parameter_description> a place to store the new string containing the &amp;lt;password&amp;gt; part
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_comparator_new">
<description>
Creates a new comparator to compute the differences from @old_model to @new_model: if one applies
all the computed differences (as #GdaDiff structures) to @old_model, the resulting data model
should have the same contents as @new_model.


</description>
<parameters>
<parameter name="old_model">
<parameter_description> Data model to which the modifications should be applied
</parameter_description>
</parameter>
<parameter name="new_model">
<parameter_description> Target data model.
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaDataComparator object
</return>
</function>

<function name="gda_sql_field_take_name">
<description>
Sets the field&apos;s name using the string holded by @value. When call, @value is freed using
#gda_value_free().


</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaSqlField structure
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue holding a string to take from
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_model_get_column_name">
<description>
Since: 3.2


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
<parameter name="col">
<parameter_description> column number.
</parameter_description>
</parameter>
</parameters>
<return> the name for the given column in a data model object.
</return>
</function>

<function name="gda_config_get_nb_dsn">
<description>
Get the number of defined DSN

Return: the number of defined DSN

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gda_row_new">
<description>
Creates a #GdaRow which can hold @count #GValue values.

The caller of this function is the only owner of a reference to the newly created #GdaRow
object, even if @model is not %NULL (it is recommended to pass %NULL as the @model argument
if this function is not called from within a #GdaDataModel implementation).


</description>
<parameters>
<parameter name="model">
<parameter_description> the #GdaDataModel this row belongs to, or %NULL if the row is outside any data model
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> number of #GValue in the new #GdaRow.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GdaRow object.
</return>
</function>

<function name="gda_sql_statement_normalize">
<description>
&quot;Normalizes&quot; (in place) some parts of @stmt, which means @stmt may be modified.
At the moment any &quot;*&quot; field in a SELECT statement will be replaced by one
#GdaSqlSelectField structure for each field in the referenced table.


</description>
<parameters>
<parameter name="stmt">
<parameter_description> a pointer to a #GdaSqlStatement structure
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_holder_get_alphanum_id">
<description>
Get an &quot;encoded&quot; version of @holder&apos;s name. The &quot;encoding&quot; consists in replacing non
alphanumeric character with the string &quot;__gdaXX&quot; where XX is the hex. representation
of the non alphanumeric char.

This method is just a wrapper around the gda_text_to_alphanum() function.


</description>
<parameters>
<parameter name="holder">
<parameter_description> a #GdaHolder object
</parameter_description>
</parameter>
</parameters>
<return> a new string
</return>
</function>

<function name="gda_value_to_xml">
<description>
Serializes the given #GValue to an XML node string.


</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue.
</parameter_description>
</parameter>
</parameters>
<return> the XML node. Once not needed anymore, you should free it.
</return>
</function>

<function name="gda_server_provider_supports_operation">
<description>
Tells if @provider supports the @type of operation on the @cnc connection, using the
(optional) @options parameters.


</description>
<parameters>
<parameter name="provider">
<parameter_description> a #GdaServerProvider object
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object which would be used to perform an action, or %NULL
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the type of operation requested
</parameter_description>
</parameter>
<parameter name="options">
<parameter_description> a list of named parameters, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the operation is supported
</return>
</function>

<function name="gda_sql_identifier_add_quotes">
<description>
Add double quotes around the @str identifier. Use the gda_sql_identifier_needs_quotes()
function to tell if an identifier needs to be quoted.


</description>
<parameters>
<parameter name="str">
<parameter_description> an SQL identifier
</parameter_description>
</parameter>
</parameters>
<return> a new string
</return>
</function>

<function name="gda_data_model_import_from_file">
<description>
Imports data contained in the @file file into @model; the format is detected.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel
</parameter_description>
</parameter>
<parameter name="file">
<parameter_description> the filename to import from
</parameter_description>
</parameter>
<parameter name="cols_trans">
<parameter_description> a #GHashTable for columns translating, or %NULL
</parameter_description>
</parameter>
<parameter name="options">
<parameter_description> list of options for the export
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_data_model_dir_clean_errors">
<description>
Reset the list of errors which have occurred while using @model

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModelDir object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_column_get_attribute">
<description>
Get the value associated to a named attribute.

Attributes can have any name, but Libgda proposes some default names, see &amp;lt;link linkend=&quot;libgda-40-Attributes-manager.synopsis&quot;&amp;gt;this section&amp;lt;/link&amp;gt;.


</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> attribute name as a string
</parameter_description>
</parameter>
</parameters>
<return> a read-only #GValue, or %NULL if not attribute named @attribute has been set for @column
</return>
</function>

<function name="gda_xa_transaction_commit_recovered">
<description>
Tries to commit the data prepared but which failed to commit (see gda_xa_transaction_commit()). This
method allows one to terminate a distributed transaction which succedded but for which some
connections needed to be recovered.


</description>
<parameters>
<parameter name="xa_trans">
<parameter_description> a #GdaXaTransaction object
</parameter_description>
</parameter>
<parameter name="cnc_to_recover">
<parameter_description> a place to store the list of connections for which the there were data to recover and which failed
to be actually committed, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if all the data which was still uncommitted has been committed
</return>
</function>

<function name="gda_data_model_set_column_title">
<description>
Sets the @title of the given @col in @model.

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
<parameter name="col">
<parameter_description> column number
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> title for the given column.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_meta_store_modify">
<description>
Propagates an update to @store, the update&apos;s contents is represented by @new_data, this function is
primarily reserved to database providers.

For example tell @store to update its list of tables, @new_data should contain the same columns as the &quot;_tables&quot;
table of @store, and contain one row per table in the store; there should not be any more argument after the @error
argument.

Now, to update only one table, the @new_data data model should have one row for the table to update (or no row
at all if the table does not exist anymore), and have values for the promary key of the &quot;_tables&quot; table of
@store, namely &quot;table_catalog&quot;, &quot;table_schema&quot; and &quot;table_name&quot;.


</description>
<parameters>
<parameter name="store">
<parameter_description> a #GdaMetaStore object
</parameter_description>
</parameter>
<parameter name="table_name">
<parameter_description> the name of the table to modify within @store
</parameter_description>
</parameter>
<parameter name="new_data">
<parameter_description> a #GdaDataModel containing the new data to set in @table_name, or %NULL (treated as a data model
with no row at all)
</parameter_description>
</parameter>
<parameter name="condition">
<parameter_description> SQL expression (which may contain variables) defining the rows which are being obsoleted by @new_data, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of (variable name (gchar *), GValue *value) terminated with NULL, representing values for all the
variables mentionned in @condition.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_connection_statement_to_sql">
<description>
Renders @stmt as an SQL statement, adapted to the SQL dialect used by @cnc


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
<parameter name="stmt">
<parameter_description> a #GdaStatement object
</parameter_description>
</parameter>
<parameter name="params">
<parameter_description> a #GdaSet object (which can be obtained using gda_statement_get_parameters()), or %NULL
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> SQL rendering flags, as #GdaStatementSqlFlag OR&apos;ed values
</parameter_description>
</parameter>
<parameter name="params_used">
<parameter_description> a place to store the list of individual #GdaHolder objects within @params which have been used
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new string, or %NULL if an error occurred
</return>
</function>

<function name="gda_connection_string_split">
<description>
Extract the provider, connection parameters, username and password from @string. 
in @string, the various parts are strings
which are expected to be encoded using an RFC 1738 compliant encoding. If they are specified, 
the returned provider, username and password strings are correclty decoded.

</description>
<parameters>
<parameter name="string">
<parameter_description> a string in the &quot;[&amp;lt;provider&amp;gt;://][&amp;lt;username&amp;gt;[:&amp;lt;password&amp;gt;]@]&amp;lt;connection_params&amp;gt;&quot; form
</parameter_description>
</parameter>
<parameter name="out_cnc_params">
<parameter_description> a place to store the new string containing the &amp;lt;connection_params&amp;gt; part
</parameter_description>
</parameter>
<parameter name="out_provider">
<parameter_description> a place to store the new string containing the &amp;lt;provider&amp;gt; part
</parameter_description>
</parameter>
<parameter name="out_username">
<parameter_description> a place to store the new string containing the &amp;lt;username&amp;gt; part
</parameter_description>
</parameter>
<parameter name="out_password">
<parameter_description> a place to store the new string containing the &amp;lt;password&amp;gt; part
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_connection_get_dsn">
<description>

</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
</parameters>
<return>the data source name the connection object is connected
to.
</return>
</function>

<function name="gda_quark_list_foreach">
<description>
Calls the given function for each of the key/value pairs in @qlist. The function is passed the key and value 
of each pair, and the given user_data parameter. @qlist may not be modified while iterating over it.

</description>
<parameters>
<parameter name="qlist">
<parameter_description> a #GdaQuarkList structure.
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to call for each key/value pair
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to the function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_value_get_list">
<description>

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue whose value we want to get.
</parameter_description>
</parameter>
</parameters>
<return> the value stored in @value.
</return>
</function>

<function name="gda_data_model_add_data_from_xml_node">
<description>
Adds the data from an XML node to the given data model (see the DTD for that node
in the $prefix/share/libgda/dtd/libgda-array.dtd file).


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel.
</parameter_description>
</parameter>
<parameter name="node">
<parameter_description> an XML node representing a &amp;lt;gda_array_data&amp;gt; XML node.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.
</return>
</function>

<function name="gda_data_select_compute_modification_statements">
<description>
Makes @model try to compute INSERT, UPDATE and DELETE statements to be used when modifying @model&apos;s contents.
Note: any modification statement set using gda_data_select_set_modification_statement() will first be unset


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataSelect data model
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred. If FALSE is returned, then some modification statement may still have been
computed
</return>
</function>

<function name="gda_connection_event_set_description">
<description>
Sets @event&apos;s @description. This function should not be called directly.

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdaConnectionEvent.
</parameter_description>
</parameter>
<parameter name="description">
<parameter_description> a description.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_column_get_name">
<description>

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
</parameters>
<return> the name of @column.
</return>
</function>

<function name="gda_connection_close_no_warning">
<description>
Closes the connection to the underlying data source, without emiting any warning signal.

</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_vconnection_hub_add">
<description>
Make all the tables of @cnc appear as tables (of the same name) in the @hub connection.
If the @ns is not %NULL, then within @hub, the tables will be accessible using the &apos;@ns.@table_name&apos;
notation.

Within any instance of @hub, there can be only one added connection where @ns is %NULL.


</description>
<parameters>
<parameter name="hub">
<parameter_description> a #GdaVconnectionHub connection
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection
</parameter_description>
</parameter>
<parameter name="ns">
<parameter_description> a namespace, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_data_proxy_get_sample_size">
<description>
Get the size of each chunk of data displayed at a time.


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
</parameters>
<return> the chunk (or sample) size, or 0 if chunking is disabled.
</return>
</function>

<function name="gda_value_set_timestamp">
<description>
Stores @val into @value.

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue that will store @val.
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> value to be stored in @value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_get_default_handler">
<description>
Obtain a pointer to a #GdaDataHandler which can manage #GValue values of type @for_type. The returned
data handler will be adapted to use the current locale information (for example dates will be formatted
taking into accoutn the locale).

The returned pointer is %NULL if there is no default data handler available for the @for_type data type


</description>
<parameters>
<parameter name="for_type">
<parameter_description> a #GType type
</parameter_description>
</parameter>
</parameters>
<return> a #GdaDataHandler which must not be modified or destroyed.
</return>
</function>

<function name="gda_connection_add_event">
<description>
Adds an event to the given connection. This function is usually
called by providers, to inform clients of events that happened
during some operation.

As soon as a provider (or a client, it does not matter) calls this
function with an @event object which is an error,
the connection object emits the &quot;error&quot; signal, to which clients can connect to be
informed of events.

WARNING: the reference to the @event object is stolen by this function!

</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> is stored internally, so you don&apos;t need to unref it.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_xa_transaction_commit">
<description>
Commits a distributed transaction (managed by @xa_trans). The commit is composed of two phases:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;a PREPARE phase where all the connections are required to store their transaction data to a 
permanent place (to be able to complete the commit should a problem occur afterwards)&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;a COMMIT phase where the transaction data is actually written to the database&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;

If the PREPARE phase fails for any of the connection registered with @xa_trans, then the distributed commit
fails and FALSE is returned. During the COMMIT phase, some commit may actually fail but the transaction can
still be completed because the PREPARE phase succeeded (through the recover method).


</description>
<parameters>
<parameter name="xa_trans">
<parameter_description> a #GdaXaTransaction object
</parameter_description>
</parameter>
<parameter name="cnc_to_recover">
<parameter_description> a place to store the list of connections for which the commit phase failed, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred (there may be some connections to recover, though)
</return>
</function>

<function name="gda_data_proxy_get_sample_start">
<description>
Get the row number of the first row to be displayed.


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
</parameters>
<return> the number of the first row being displayed.
</return>
</function>

<function name="gda_vconnection_hub_get_connection">
<description>
Find the #GdaConnection object in @hub associated to the @ns name space


</description>
<parameters>
<parameter name="hub">
<parameter_description> a #GdaVconnectionHub connection
</parameter_description>
</parameter>
<parameter name="ns">
<parameter_description> a name space, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the #GdaConnection, or %NULL if no connection is associated to @ns
</return>
</function>

<function name="gda_string_to_blob">
<description>
Performs the reverse of gda_blob_to_string().


</description>
<parameters>
<parameter name="str">
<parameter_description> a string to convert
</parameter_description>
</parameter>
<parameter name="blob">
<parameter_description> a non filled @GdaBlob structure
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error were found in @str, or FALSE otherwise
</return>
</function>

<function name="gda_value_new_blob">
<description>
Makes a new #GValue of type #GDA_TYPE_BLOB with the data contained by @val.


</description>
<parameters>
<parameter name="val">
<parameter_description> value to set for the new #GValue.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of the memory pool pointer to by @val.
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GValue.
</return>
</function>

<function name="gda_holder_get_not_null">
<description>
Get wether the holder can be NULL or not


</description>
<parameters>
<parameter name="holder">
<parameter_description> a #GdaHolder object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the holder cannot be NULL
</return>
</function>

<function name="gda_blob_op_read">
<description>
Reads a chunk of bytes from the BLOB accessible through @op into @blob.


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaBlobOp
</parameter_description>
</parameter>
<parameter name="blob">
<parameter_description> a #GdaBlob to read data to
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> offset to read from the start of the blob (starts at 0)
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> maximum number of bytes to read.
</parameter_description>
</parameter>
</parameters>
<return> the number of bytes actually read. In case of error, -1 is returned and the
provider should have added an error to the connection.
</return>
</function>

<function name="gda_value_differ">
<description>
Tells if two values are equal or not, by comparing memory representations. Unlike gda_value_compare(),
the returned value is boolean, and gives no idea about ordering.

The two values must be of the same type, with the exception that a value of any type can be
compared to a GDA_TYPE_NULL value, specifically:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;if @value1 and @value2 are both GDA_TYPE_NULL values then the returned value is 0&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;if @value1 is a GDA_TYPE_NULL value and @value2 is of another type then the returned value is 1&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;if @value1 is of another type and @value2 is a GDA_TYPE_NULL value then the returned value is 1&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;in all other cases, @value1 and @value2 must be of the same type and their values are compared&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;


</description>
<parameters>
<parameter name="value1">
<parameter_description> a #GValue to compare.
</parameter_description>
</parameter>
<parameter name="value2">
<parameter_description> the other #GValue to be compared to @value1.
</parameter_description>
</parameter>
</parameters>
<return> a non 0 value if @value1 and @value2 differ, and 0 if they are equal
</return>
</function>

<function name="gda_sql_table_copy">
<description>
Creates a new #GdaSqlTable structure initated with the values stored in @table.


</description>
<parameters>
<parameter name="table">
<parameter_description> a #GdaSqlTable structure to be copied
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaSqlTable structure.
</return>
</function>

<function name="gda_connection_is_opened">
<description>
Checks whether a connection is open or not.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the connection is open, %FALSE if it&apos;s not.
</return>
</function>

<function name="gda_sqlite_handler_bin_new">
<description>
Creates a data handler for binary values


</description>
<parameters>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_set_remove_holder">
<description>

</description>
<parameters>
<parameter name="set">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="holder">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_g_type_to_string">
<description>

</description>
<parameters>
<parameter name="type">
<parameter_description> Type to convert from.
</parameter_description>
</parameter>
</parameters>
<return> the string representing the given #GType.
</return>
</function>

<function name="gda_meta_struct_sort_db_objects">
<description>
Reorders the list of database objects within @mstruct in a way specified by @sort_type.


</description>
<parameters>
<parameter name="mstruct">
<parameter_description> a #GdaMetaStruct object
</parameter_description>
</parameter>
<parameter name="sort_type">
<parameter_description> the kind of sorting requested
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_binary_free">
<description>
Deallocates all memory associated to the given #GdaBinary.

</description>
<parameters>
<parameter name="boxed">
<parameter_description> #GdaBinary to free.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_sql_parser_parse_string_as_batch">
<description>
Parse @sql and creates a #GdaBatch object which contains all the #GdaStatement objects created while parsing (one object
per SQL statement). Empty statements (composed of spaces only) do not appear in the resulting object.

@sql is parsed and #GdaStatement objects are created as long as no error is found in @sql. If an error is found 
at some point, then the parsing stops and @remain may contain a non %NULL pointer, @error may be set, and %NULL
is returned.

if @sql is %NULL, then the returned #GdaBatch object will contain no statement.


</description>
<parameters>
<parameter name="parser">
<parameter_description> a #GdaSqlParser object
</parameter_description>
</parameter>
<parameter name="sql">
<parameter_description> the SQL string to parse
</parameter_description>
</parameter>
<parameter name="remain">
<parameter_description> location to store a pointer to remaining part of @sql in case an error occurred while parsing @sql, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaBatch object, or %NULL if an error occurred
</return>
</function>

<function name="gda_data_handler_get_sql_from_value">
<description>
Creates a new string which is an SQL representation of the given value. If the value is NULL or
is of type GDA_TYPE_NULL, the returned string is NULL.


</description>
<parameters>
<parameter name="dh">
<parameter_description> an object which implements the #GdaDataHandler interface
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value to be converted to a string
</parameter_description>
</parameter>
</parameters>
<return> the new string.
</return>
</function>

<function name="gda_data_access_wrapper_get_type">
<description>

</description>
<parameters>
</parameters>
<return> the #GType of GdaDataAccessWrapper.
</return>
</function>

<function name="gda_value_get_geometric_point">
<description>

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue whose value we want to get.
</parameter_description>
</parameter>
</parameters>
<return> the value stored in @value.
</return>
</function>

<function name="gda_data_handler_get_g_type_index">
<description>
Get the GType handled by the GdaDataHandler, at the given position (starting at zero).


</description>
<parameters>
<parameter name="dh">
<parameter_description> an object which implements the #GdaDataHandler interface
</parameter_description>
</parameter>
<parameter name="index">
<parameter_description> 
</parameter_description>
</parameter>
</parameters>
<return> the GType
</return>
</function>

<function name="gda_column_set_attribute">
<description>
Set the value associated to a named attribute. The @attribute string is &apos;stolen&apos; by this method, and
the memory it uses will be freed using the @destroy function when no longer needed (if @destroy is %NULL,
then the string will not be freed at all).

Attributes can have any name, but Libgda proposes some default names, 
see &amp;lt;link linkend=&quot;libgda-40-Attributes-manager.synopsis&quot;&amp;gt;this section&amp;lt;/link&amp;gt;.

If there is already an attribute named @attribute set, then its value is replaced with the new value (@value is
copied), except if @value is %NULL, in which case the attribute is removed.

For example one would use it as:

&amp;lt;code&amp;gt;
gda_column_set_attribute (holder, g_strdup (my_attribute), g_free, my_value);
gda_column_set_attribute (holder, GDA_ATTRIBUTE_NAME, NULL, my_value);
&amp;lt;/code&amp;gt;

Note: this method does not modify in any way the contents of the data model for which @column is a column (nor
does it modify the table definition of the tables used by a SELECT statement is the model was created from a
SELECT statement).

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> attribute name as a static string
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue, or %NULL
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> a function to be called when @attribute is not needed anymore, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_lockable_lock">
<description>
Locks @lockable. If it is already locked by another thread, the current thread will block until it is unlocked 
by the other thread.

This function can be used even if g_thread_init() has not yet been called, and, in that case, will do nothing.

Note: unlike g_mutex_lock(), this method recursive, which means a thread can lock @lockable several times 
(and has to unlock it as many times to actually unlock it).

</description>
<parameters>
<parameter name="lockable">
<parameter_description> a #GdaLockable object.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="which">
<description>

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gda_rfc1738_decode">
<description>
Decodes @string using the RFC 1738 recommendations: the
&amp;lt;constant&amp;gt;&amp;lt;&amp;gt;&amp;quot;#%{}|\^~[]&amp;apos;`;/?:@=&amp;amp;&amp;lt;/constant&amp;gt; and space characters are replaced by 
&amp;lt;constant&amp;gt;&amp;quot;%%ab&amp;quot;&amp;lt;/constant&amp;gt; where
&amp;lt;constant&amp;gt;ab&amp;lt;/constant&amp;gt; is the hexadecimal number corresponding to the character.

@string should respect the RFC 1738 encoding. If this is not the case (for example if there
is a &quot;%2z&quot; because 2z is not an hexadecimal value), then the part with the problem
is not decoded, and the function returns FALSE.

@string is decoded in place, no new string gets created.


</description>
<parameters>
<parameter name="string">
<parameter_description> a string to encode 
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred.
</return>
</function>

<function name="gda_data_select_get_connection">
<description>
Get a pointer to the #GdaConnection object which was used when @model was created
(and which may be used internally by @model).


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataSelect data model
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the #GdaConnection, or %NULL
</return>
</function>

<function name="gda_statement_normalize">
<description>
&quot;Normalizes&quot; some parts of @stmt, see gda_sql_statement_normalize() for more
information.


</description>
<parameters>
<parameter name="stmt">
<parameter_description> a #GdaStatement object
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_threader_start_thread">
<description>



</description>
<parameters>
<parameter name="thread">
<parameter_description> a #GdaThreader object
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to be called in the newly created thread
</parameter_description>
</parameter>
<parameter name="func_arg">
<parameter_description> @func&apos;s argument
</parameter_description>
</parameter>
<parameter name="ok_callback">
<parameter_description> callback called when @func terminates
</parameter_description>
</parameter>
<parameter name="cancel_callback">
<parameter_description> callback called when @func terminates and the job has been cancelled
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> place to store an error when creating the thread or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the id of the new job executed in another thread.
</return>
</function>

<function name="gda_value_set_time">
<description>
Stores @val into @value.

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue that will store @val.
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> value to be stored in @value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_connection_get_events">
<description>
Retrieves a list of the last errors occurred during the connection. The returned list is
chronologically ordered such as that the most recent event is the #GdaConnectionEvent of the first node.

Warning: the @cnc object may change the list if connection events occur


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection.
</parameter_description>
</parameter>
</parameters>
<return> a GList of #GdaConnectionEvent objects (the list should not be modified)
</return>
</function>

<function name="gda_sql_identifier_remove_quotes">
<description>
Prepares @str to be compared:
- if surrounded by double quotes, then just remove the quotes
- otherwise convert to lower case

WARNING: @str must NOT be a composed identifier (&amp;lt;part1&amp;gt;.&quot;&amp;lt;part2&amp;gt;&quot; for example)


</description>
<parameters>
<parameter name="str">
<parameter_description> a quoted string
</parameter_description>
</parameter>
</parameters>
<return> @str
</return>
</function>

<function name="gda_batch_serialize">
<description>
Creates a string representing the contents of @batch.


</description>
<parameters>
<parameter name="batch">
<parameter_description> a #GdaBatch object
</parameter_description>
</parameter>
</parameters>
<return> a string containing the serialized version of @batch
</return>
</function>

<function name="gda_data_model_get_value_at">
<description>
Retrieves the data stored in the given position (identified by
the @col and @row parameters) on a data model.

This is the main function for accessing data in a model which allows random access to its data.
To access data in a data model using a cursor, use a #GdaDataModelIter object, obtained using
gda_data_model_create_iter().

Note1: the returned #GValue must not be modified directly (unexpected behaviours may
occur if you do so).

Note2: the returned value may become invalid as soon as any Libgda part is executed again,
which means if you want to keep the value, a copy must be made, however it will remain valid
as long as the only Libgda usage is calling gda_data_model_get_value_at() for different values
of the same row.

If you want to modify a value stored in a #GdaDataModel, use the gda_data_model_set_value_at() or 
gda_data_model_set_values() methods.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
<parameter name="col">
<parameter_description> a valid column number.
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> a valid row number.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GValue containing the value stored in the given
position, or %NULL on error (out-of-bound position, etc).
</return>
</function>

<function name="gda_data_model_describe_column">
<description>
Queries the underlying data model implementation for a description
of a given column. That description is returned in the form of
a #GdaColumn structure, which contains all the information
about the given column in the data model.

WARNING: the returned #GdaColumn object belongs to the @model model and
and should not be destroyed; any modification will affect the whole data model.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
<parameter name="col">
<parameter_description> column number.
</parameter_description>
</parameter>
</parameters>
<return> the description of the column.
</return>
</function>

<function name="gda_connection_event_get_event_type">
<description>
Get @event&apos;s severity (from a simple notice to a fatal event)


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdaConnectionEvent object
</parameter_description>
</parameter>
</parameters>
<return> the event type
</return>
</function>

<function name="gda_data_proxy_get_proxied_model">
<description>
Fetch the #GdaDataModel which @proxy does proxy


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
</parameters>
<return> the proxied data model
</return>
</function>

<function name="The">
<description>
@param default_etc_dir  A default path which will used as fallback.
@return A string containing the etc folder&apos;s path, which must be freed when
no longer necessary. If BinReloc is not initialized, or if the initialization
function failed, then a copy of default_etc_dir will be returned.
If default_etc_dir is NULL, then NULL will be returned.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gda_connection_get_cnc_string">
<description>
Gets the connection string used to open this connection.

The connection string is the string sent over to the underlying
database provider, which describes the parameters to be used
to open a connection on the underlying data source.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
</parameters>
<return> the connection string used when opening the connection.
</return>
</function>

<function name="gda_sql_table_new">
<description>
Creates a new #GdaSqlTable structure, using @parent as its parent part.


</description>
<parameters>
<parameter name="parent">
<parameter_description> a #GdaSqlStatementSelect, #GdaSqlStatementInsert, #GdaSqlStatementDelete, #GdaSqlStatementUpdate
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaSqlTable structure.
</return>
</function>

<function name="gda_meta_struct_complement_depend">
<description>
This method is similar to gda_meta_struct_complement() but creates #GdaMetaDbObject for all the dependencies
of @dbo.


</description>
<parameters>
<parameter name="mstruct">
<parameter_description> a #GdaMetaStruct object
</parameter_description>
</parameter>
<parameter name="dbo">
<parameter_description> a #GdaMetaDbObject part of @mstruct
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_prepare_create_table">
<description>
Add more arguments if the flag needs then: 

GDA_EASY_CREATE_TABLE_FKEY_FLAG:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;string with the table&apos;s name referenced&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;an integer with the number pairs &quot;local_field&quot;, &quot;referenced_field&quot; 
used in the reference&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;Pairs of &quot;local_field&quot;, &quot;referenced_field&quot; to use, must match
the number specified above.&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;a string with the action for ON DELETE; can be: &quot;RESTRICT&quot;, &quot;CASCADE&quot;, 
&quot;NO ACTION&quot;, &quot;SET NULL&quot; and &quot;SET DEFAULT&quot;. Example: &quot;ON UPDATE CASCADE&quot;.&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;a string with the action for ON UPDATE (see above).&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt; 

Create a #GdaServerOperation object using an opened connection, taking three 
arguments, a colum&apos;s name the column&apos;s GType and #GdaEasyCreateTableFlag 
flag, you need to finish the list using NULL.

You&apos;ll be able to modify the #GdaServerOperation object to add custom options
to the operation. When finish call #gda_perform_create_table 
or #gda_server_operation_perform_operation
in order to execute the operation.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> an opened connection
</parameter_description>
</parameter>
<parameter name="table_name">
<parameter_description>
@num_columns
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> group of three arguments for column&apos;s name, column&apos;s #GType 
and a #GdaEasyCreateTableFlag flag, finished with NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GdaServerOperation if no errors; NULL and set @error otherwise
</return>
</function>

<function name="gda_data_proxy_get_proxied_model_n_rows">
<description>
Get the number of rows in the proxied data model


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
</parameters>
<return> the number of rows, or -1 if the number of rows is not known
</return>
</function>

<function name="gda_data_proxy_get_values">
<description>
Retreive a whole list of values from the @proxy store. This function calls gda_data_proxy_get_value()
for each column index specified in @cols_index, and generates a #GSlist on the way.


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
<parameter name="proxy_row">
<parameter_description> a proxy row
</parameter_description>
</parameter>
<parameter name="cols_index">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="n_cols">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> a new list of values (the list must be freed, not the values), or %NULL if an error occurred
</return>
</function>

<function name="gda_perform_create_table">
<description>
Performs a prepared #GdaServerOperation to create a table. This could perform
an operation created by #gda_prepare_create_table or any other using the
the #GdaServerOperation API.


</description>
<parameters>
<parameter name="op">
<parameter_description> a valid #GdaServerOperation
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the table was created; FALSE and set @error otherwise
</return>
</function>

<function name="gda_perform_drop_table">
<description>
This is just a convenient function to perform a drop a table operation.


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the table was dropped
</return>
</function>

<function name="gda_meta_store_schema_add_custom_object">
<description>
The internal database used by @store can be &apos;augmented&apos; with some user-defined database objects
(such as tables or views). This method allows one to add a new database object.

If the internal database already contains the object, then:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;if the object is equal to the provided description then TRUE is returned&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;if the object exists but differs from the provided description, then FALSE is returned,
with the GDA_META_STORE_SCHEMA_OBJECT_CONFLICT_ERROR error code&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;

The @xml_description defines the table of view&apos;s definition, for example:
&amp;lt;programlisting&amp;gt;&amp;lt;![CDATA[&amp;lt;table name=&quot;mytable&quot;&amp;gt;
    &amp;lt;column name=&quot;id&quot; pkey=&quot;TRUE&quot;/&amp;gt;
    &amp;lt;column name=&quot;value&quot;/&amp;gt;
&amp;lt;/table&amp;gt;]]&amp;gt;&amp;lt;/programlisting&amp;gt;

The partial DTD for this XML description of the object to add is the following (the top node must be
a &amp;lt;table&amp;gt; or a &amp;lt;view&amp;gt;):
&amp;lt;programlisting&amp;gt;&amp;lt;![CDATA[&amp;lt;!ELEMENT table (column*,check*,fkey*,unique*)&amp;gt;
&amp;lt;!ATTLIST table
          name NMTOKEN #REQUIRED&amp;gt;

&amp;lt;!ELEMENT column EMPTY&amp;gt;
&amp;lt;!ATTLIST column
          name NMTOKEN #REQUIRED
          type CDATA #IMPLIED
          pkey (TRUE|FALSE) #IMPLIED
          autoinc (TRUE|FALSE) #IMPLIED
          nullok (TRUE|FALSE) #IMPLIED&amp;gt;

&amp;lt;!ELEMENT check (#PCDATA)&amp;gt;

&amp;lt;!ELEMENT fkey (part+)&amp;gt;
&amp;lt;!ATTLIST fkey
          ref_table NMTOKEN #REQUIRED&amp;gt;

&amp;lt;!ELEMENT part EMPTY&amp;gt;
&amp;lt;!ATTLIST part
          column NMTOKEN #IMPLIED
          ref_column NMTOKEN #IMPLIED&amp;gt;

&amp;lt;!ELEMENT unique (column*)&amp;gt;

&amp;lt;!ELEMENT view (definition)&amp;gt;
&amp;lt;!ATTLIST view
          name NMTOKEN #REQUIRED
          descr CDATA #IMPLIED&amp;gt;

&amp;lt;!ELEMENT definition (#PCDATA)&amp;gt;]]&amp;gt;&amp;lt;/programlisting&amp;gt;


</description>
<parameters>
<parameter name="store">
<parameter_description> a #GdaMetaStore object
</parameter_description>
</parameter>
<parameter name="xml_description">
<parameter_description> an XML description of the table or view to add to @store
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the new object has sucessfully been added
</return>
</function>

<function name="gda_value_set_binary">
<description>
Stores @val into @value.

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue that will store @val.
</parameter_description>
</parameter>
<parameter name="binary">
<parameter_description> a #GdaBinary structure with the data and its size to be stored in @value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_execute_sql_command">
<description>
This is a convenient function to execute a SQL command over the opened connection.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> an opened connection
</parameter_description>
</parameter>
<parameter name="sql">
<parameter_description> a query statament must begin with &quot;SELECT&quot;
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the number of rows affected or -1.
</return>
</function>

<function name="gda_column_get_default_value">
<description>

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
</parameters>
<return> @column&apos;s default value, as a #GValue object.
</return>
</function>

<function name="gda_connection_get_type">
<description>
Registers the #GdaConnection class on the GLib type system.


</description>
<parameters>
</parameters>
<return> the GType identifying the class.
</return>
</function>

<function name="gda_sql_select_target_take_table_alias">
<description>
Sets the target alias (AS) to the string holded by @alias; after call
this function @alias is freed.

</description>
<parameters>
<parameter name="target">
<parameter_description> a #GdaSqlSelectTarget structure
</parameter_description>
</parameter>
<parameter name="alias">
<parameter_description> a #GValue holding the alias string to take from
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_model_import_new_xml_node">
<description>
Creates a new #GdaDataModel and loads the data in @node. The resulting data model
can be accessed in a random way.


</description>
<parameters>
<parameter name="node">
<parameter_description> an XML node corresponding to a &amp;lt;data-array&amp;gt; tag
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the newly created #GdaDataModel.
</return>
</function>

<function name="gda_connection_statement_prepare">
<description>
Ask the database accessed through the @cnc connection to prepare the usage of @stmt. This is only usefull
if @stmt will be used more than once (however some database providers may always prepare stamements 
before executing them).

This function is also usefull to make sure @stmt is fully understood by the database before actually executing it.

Note however that it is also possible that gda_connection_statement_prepare() fails when
gda_connection_statement_execute() does not fail (this will usually be the case with statements such as
&amp;lt;![CDATA[&quot;SELECT * FROM ##tablename::string&quot;]]&amp;gt; because database usually don&apos;t allow variables to be used in place of a 
table name).


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection
</parameter_description>
</parameter>
<parameter name="stmt">
<parameter_description> a #GdaStatement object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred.
</return>
</function>

<function name="gda_statement_check_structure">
<description>
Checks that @stmt&apos;s structure is correct.


</description>
<parameters>
<parameter name="stmt">
<parameter_description> a #GdaStatement object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @stmt&apos;s structure is correct
</return>
</function>

<function name="gda_set_is_valid">
<description>
This method tells if all @set&apos;s #GdaHolder objects are valid, and if
they represent a valid combination of values, as defined by rules
external to Libgda: the &quot;validate-set&quot; signal is emitted and if none of the signal handlers return an
error, then the returned value is TRUE, otherwise the return value is FALSE as soon as a signal handler
Returns: TRUE if the set is valid

</description>
<parameters>
<parameter name="set">
<parameter_description> a #GdaSet object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store validation errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the set is valid
</return>
</function>

<function name="gda_data_proxy_get_n_new_rows">
<description>
Get the number of rows which have been added to @proxy and which are not part of
the proxied data model.


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
</parameters>
<return> the number of new rows
</return>
</function>

<function name="gda_data_model_to_xml_node">
<description>
Converts a #GdaDataModel into a xmlNodePtr (as used in libxml).


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
<parameter name="cols">
<parameter_description> an array containing which columns of @model will be exported, or %NULL for all columns
</parameter_description>
</parameter>
<parameter name="nb_cols">
<parameter_description> the number of columns in @cols
</parameter_description>
</parameter>
<parameter name="rows">
<parameter_description> an array containing which rows of @model will be exported, or %NULL for all rows
</parameter_description>
</parameter>
<parameter name="nb_rows">
<parameter_description> the number of rows in @rows
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name to use for the XML resulting table.
</parameter_description>
</parameter>
</parameters>
<return> a xmlNodePtr representing the whole data model, or %NULL if an error occurred
</return>
</function>

<function name="gda_data_model_row_inserted">
<description>
Emits the &apos;row_inserted&apos; and &apos;changed&apos; signals on @model. 

This method should only be used by #GdaDataModel implementations to 
signal that a row has been inserted.

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> row number.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_handler_time_new_no_locale">
<description>
Creates a data handler for time values, but using the default C locale
instead of the current user locale.


</description>
<parameters>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_server_provider_string_to_value">
<description>
Use @provider to create a new #GValue from a single string representation. 

The @preferred_type can optionally ask @provider to return a #GValue of the requested type 
(but if such a value can&apos;t be created from @string, then %NULL is returned); 
pass G_TYPE_INVALID if any returned type is acceptable.

The returned value is either a new #GValue or %NULL in the following cases:
- @string cannot be converted to @preferred_type type
- the provider does not handle @preferred_type
- the provider could not make a #GValue from @string


</description>
<parameters>
<parameter name="provider">
<parameter_description> a server provider.
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object, or %NULL
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> the SQL string to convert to a value
</parameter_description>
</parameter>
<parameter name="preferred_type">
<parameter_description> a #GType, or G_TYPE_INVALID
</parameter_description>
</parameter>
</parameters>
<return> a new #GValue, or %NULL
</return>
</function>

<function name="gda_data_proxy_cancel_all_changes">
<description>
Cancel all the changes stored in the proxy (the @proxy will be reset to its state
as it was just after creation).


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_sql_select_field_serialize">
<description>
Creates a new string representing an expresion used as field in a SELECT statement
before the FROM clausure.


</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaSqlSelectField structure
</parameter_description>
</parameter>
</parameters>
<return> a new string with the description of the expression or &quot;null&quot; in case @field is invalid.
</return>
</function>

<function name="gda_data_proxy_get_proxied_model_n_cols">
<description>
Get the number of columns in the proxied data model


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
</parameters>
<return> the number of columns, or -1 if an error occurred
</return>
</function>

<function name="gda_column_set_allow_null">
<description>
Sets the &apos;allow null&apos; flag of the given column.

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
<parameter name="allow">
<parameter_description> whether the given column should allows null values or not.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_batch_get_statements">
<description>
Get a list of the #GdaStatement objects contained in @batch


</description>
<parameters>
<parameter name="batch">
<parameter_description> a #GdaBatch object
</parameter_description>
</parameter>
</parameters>
<return> a list of #GdaStatement which should not be modified.
</return>
</function>

<function name="gda_sql_select_field_take_alias">
<description>
Sets the &apos;as&apos; field&apos;s string in the #GdaSqlSelectField structure. @alias is freed
after call this function.


</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaSqlSelectField structure
</parameter_description>
</parameter>
<parameter name="alias">
<parameter_description> a #GValue to take from
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_model_array_copy_model">
<description>
Makes a copy of @src into a new #GdaDataModelArray object


</description>
<parameters>
<parameter name="src">
<parameter_description> a #GdaDataModel to copy data from
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new data model, or %NULL if an error occurred
</return>
</function>

<function name="gda_data_proxy_apply_all_changes">
<description>
Apply all the changes stored in the proxy to the proxied data model. The changes are done row
after row, and if an error
occurs, then it is possible that not all the changes to all the rows have been applied.


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_connection_statement_execute_select">
<description>
Executes a selection command on the given connection. The gda_execute_select_command() method can be easier
to use if one prefers to use some SQL directly.

This function returns a #GdaDataModel resulting from the SELECT statement, or %NULL
if an error occurred.

This function is just a convenience function around the gda_connection_statement_execute()
function.

See the documentation of the gda_connection_statement_execute() for information
about the @params list of parameters.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
<parameter name="stmt">
<parameter_description> a #GdaStatement object.
</parameter_description>
</parameter>
<parameter name="params">
<parameter_description> a #GdaSet object (which can be obtained using gda_statement_get_parameters()), or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store an error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GdaDataModel containing the data returned by the
data source, or %NULL if an error occurred
</return>
</function>

<function name="gda_text_to_alphanum">
<description>
The &quot;encoding&quot; consists in replacing non
alphanumeric character with the string &quot;__gdaXX&quot; where XX is the hex. representation
of the non alphanumeric char.


</description>
<parameters>
<parameter name="text">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> a new string
</return>
</function>

<function name="gda_sql_select_field_take_expr">
<description>
Sets the expression field in the #GdaSqlSelectField structure to point to @expr
and modify it to sets its parent to @field.

</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaSqlSelectField structure
</parameter_description>
</parameter>
<parameter name="expr">
<parameter_description> a #GdaSqlExpr to take from
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gda_meta_store_cancel_data_reset">
<description>
Cancels any modification done since _gda_meta_store_begin_data_reset() was called.


</description>
<parameters>
<parameter name="store">
<parameter_description> a #GdaMetaStore object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_config_get_type">
<description>
Registers the #GdaConfig class on the GLib type system.


</description>
<parameters>
</parameters>
<return> the GType identifying the class.
</return>
</function>

<function name="gda_holder_force_invalid">
<description>
Forces a holder to be invalid; to set it valid again, a new value must be assigned
to it using gda_holder_set_value() or gda_holder_take_value().

@holder&apos;s value is set to %NULL.

</description>
<parameters>
<parameter name="holder">
<parameter_description> a #GdaHolder object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_g_type_from_string">
<description>

</description>
<parameters>
<parameter name="str">
<parameter_description> the name of a #GType, as returned by gda_g_type_to_string().
</parameter_description>
</parameter>
</parameters>
<return> the #GType represented by the given @str.
</return>
</function>

<function name="gda_connection_event_set_code">
<description>
Sets @event&apos;s code: the code is specific to the provider being used.
If you want to have a common understanding of the event codes, use
gda_connection_event_get_gda_code() instead.

This function should not be called directly

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdaConnectionEvent.
</parameter_description>
</parameter>
<parameter name="code">
<parameter_description> a code.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_model_get_attributes_at">
<description>
Get the attributes of the value stored at (row, col) in @model, which
is an ORed value of #GdaValueAttribute flags. As a special case, if
@row is -1, then the attributes returned correspond to a &quot;would be&quot; value
if a row was added to @model.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object
</parameter_description>
</parameter>
<parameter name="col">
<parameter_description> a valid column number
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> a valid row number, or -1
</parameter_description>
</parameter>
</parameters>
<return> the attributes as an ORed value of #GdaValueAttribute
</return>
</function>

<function name="gda_set_get_source_for_model">
<description>
Finds the #GdaSetSource structure used in @set for which @model is a
the data model, don&apos;t modify the returned structure


</description>
<parameters>
<parameter name="set">
<parameter_description> a #GdaSet object
</parameter_description>
</parameter>
<parameter name="model">
<parameter_description> a #GdaDataModel object
</parameter_description>
</parameter>
</parameters>
<return> a #GdaSetSource pointer or %NULL.
</return>
</function>

<function name="gda_connection_get_provider">
<description>
Get a pointer to the #GdaServerProvider object used to access the database


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
</parameters>
<return> the #GdaServerProvider (NEVER NULL)
</return>
</function>

<function name="gda_vprovider_hub_new">
<description>
Creates a new GdaVirtualProvider object which allows one to 
add and remove GdaDataModel objects as tables within a connection


</description>
<parameters>
</parameters>
<return> a new #GdaVirtualProvider object.
</return>
</function>

<function name="gda_connection_event_set_sqlstate">
<description>
Changes the SQLSTATE code of @event, this function should not be called directly

Sets @event&apos;s SQL state.

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdaConnectionEvent.
</parameter_description>
</parameter>
<parameter name="sqlstate">
<parameter_description> SQL state.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_meta_struct_new">
<description>
Creates a new #GdaMetaStruct object. The @features specifies the extra features which will also be computed:
the more features, the more time it takes to run. Features such as table&apos;s columns, each column&apos;s attributes, etc
are not optional and will always be computed.


</description>
<parameters>
<parameter name="store">
<parameter_description> a #GdaMetaStore from which the new #GdaMetaStruct object will fetch information
</parameter_description>
</parameter>
<parameter name="features">
<parameter_description> the kind of extra information the new #GdaMetaStruct object will compute
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GdaMetaStruct object
</return>
</function>

<function name="gda_connection_event_get_code">
<description>

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdaConnectionEvent.
</parameter_description>
</parameter>
</parameters>
<return> @event&apos;s code (the code is specific to the provider being used)
</return>
</function>

<function name="_gda_meta_store_begin_data_reset">
<description>
Sets @store in a mode where only the modifications completely overriding a table
will be allowed, where no detailled modifications report is made and where the &quot;suggest-update&quot;
signal is not emitted.


</description>
<parameters>
<parameter name="store">
<parameter_description> a #GdaMetaStore object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_holder_get_default_value">
<description>
Get the default value held into the holder. WARNING: the default value does not need to be of 
the same type as the one required by @holder.


</description>
<parameters>
<parameter name="holder">
<parameter_description> a #GdaHolder object
</parameter_description>
</parameter>
</parameters>
<return> the default value
</return>
</function>

<function name="gda_server_provider_test_schema_model">
<description>
Test that the structure of @model is correct in regard with @schema


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel to test
</parameter_description>
</parameter>
<parameter name="schema">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @model has the correct structure
</return>
</function>

<function name="gda_connection_create_operation">
<description>
Creates a new #GdaServerOperation object which can be modified in order 
to perform the type type of action. It is a wrapper around the gda_server_provider_create_operation()
method.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the type of operation requested
</parameter_description>
</parameter>
<parameter name="options">
<parameter_description> an optional list of parameters
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store an error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaServerOperation object, or %NULL in the connection&apos;s provider does not support the @type type
of operation or if an error occurred
</return>
</function>

<function name="gda_statement_get_parameters">
<description>
Get a new #GdaSet object which groups all the execution parameters
which @stmt needs. This new object is returned though @out_params.

Note that if @stmt does not need any parameter, then @out_params is set to %NULL.


</description>
<parameters>
<parameter name="stmt">
<parameter_description> a #GdaStatement object
</parameter_description>
</parameter>
<parameter name="out_params">
<parameter_description> a place to store a new #GdaSet object, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred.
</return>
</function>

<function name="gda_quark_list_new">
<description>
Creates a new #GdaQuarkList, which is a set of key-&amp;gt;value pairs,
very similar to GLib&apos;s GHashTable, but with the only purpose to
make easier the parsing and creation of data source connection
strings.


</description>
<parameters>
</parameters>
<return> the newly created #GdaQuarkList.
</return>
</function>

<function name="gda_attributes_manager_set_full">
<description>
Does the same as gda_attributes_manager_set() except that @destroy is called when @att_name needs
to be freed.

</description>
<parameters>
<parameter name="mgr">
<parameter_description> a #GdaAttributesManager
</parameter_description>
</parameter>
<parameter name="ptr">
<parameter_description> a pointer to the ressources to which the attribute will apply
</parameter_description>
</parameter>
<parameter name="att_name">
<parameter_description> an attribute&apos;s name
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue, or %NULL
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> function called when @att_name is destroyed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_statement_is_useless">
<description>
Tells if @stmt is composed only of spaces (that is it has no real SQL code), and is completely
useless as such.


</description>
<parameters>
<parameter name="stmt">
<parameter_description> a #GdaStatement object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if executing @stmt does nothing
</return>
</function>

<function name="gda_set_merge_with_set">
<description>
Add to @set all the holders of @set_to_merge. 
Note1: only the #GdaHolder of @set_to_merge for which no holder in @set has the same ID are merged
Note2: all the #GdaHolder merged in @set are still used by @set_to_merge.

</description>
<parameters>
<parameter name="set">
<parameter_description> a #GdaSet object
</parameter_description>
</parameter>
<parameter name="set_to_merge">
<parameter_description> a #GdaSet object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_meta_table_column_set_attribute">
<description>
Set the value associated to a named attribute.

Attributes can have any name, but Libgda proposes some default names, see &amp;lt;link linkend=&quot;libgda-40-Attributes-manager.synopsis&quot;&amp;gt;this section&amp;lt;/link&amp;gt;.
If there is already an attribute named @attribute set, then its value is replaced with the new @value, 
except if @value is %NULL, in which case the attribute is removed.

Warning: @attribute should be a static string (no copy of it is made), so the string should exist as long as the @column
object exists.

</description>
<parameters>
<parameter name="tcol">
<parameter_description> a #GdaMetaTableColumn
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> attribute name as a static string
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_xa_transaction_id_to_string">
<description>
Creates a string representation of @xid, in the format &amp;lt;gtrid&amp;gt;,&amp;lt;bqual&amp;gt;,&amp;lt;formatID&amp;gt; the 
&amp;lt;gtrid&amp;gt; and &amp;lt;bqual&amp;gt; strings contain alphanumeric characters, and non alphanumeric characters
are converted to &quot;%ab&quot; where ab is the hexadecimal representation of the character.


</description>
<parameters>
<parameter name="xid">
<parameter_description> a #GdaXaTransactionId pointer
</parameter_description>
</parameter>
</parameters>
<return> a new string representation of @xid
</return>
</function>

<function name="gda_connection_statement_execute_select_fullv">
<description>
Executes a selection command on the given connection.

This function returns a #GdaDataModel resulting from the SELECT statement, or %NULL
if an error occurred.

This function is just a convenience function around the gda_connection_statement_execute()
function.

See the documentation of the gda_connection_statement_execute() for information
about the @params list of parameters.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
<parameter name="stmt">
<parameter_description> a #GdaStatement object.
</parameter_description>
</parameter>
<parameter name="params">
<parameter_description> a #GdaSet object (which can be obtained using gda_statement_get_parameters()), or %NULL
</parameter_description>
</parameter>
<parameter name="model_usage">
<parameter_description> specifies how the returned data model will be used as a #GdaStatementModelUsage enum
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store an error, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a (-1 terminated) list of (column number, GType) specifying for each column mentionned the GType
of the column in the returned #GdaDataModel.
</parameter_description>
</parameter>
</parameters>
<return> a #GdaDataModel containing the data returned by the
data source, or %NULL if an error occurred
</return>
</function>

<function name="gda_connection_close">
<description>
Closes the connection to the underlying data source, but first emits the 
&quot;conn-to-close&quot; signal.

</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_init">
<description>
Initializes the GDA library, must be called prior to any Libgda usage. Note that unless the
LIBGDA_NO_THREADS environment variable is set (to any value), the GLib thread system will
be initialized as well if not yet initialized.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gda_server_provider_supports_feature">
<description>
Tests if a feature is supported


</description>
<parameters>
<parameter name="provider">
<parameter_description> a #GdaServerProvider object
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object, or %NULL
</parameter_description>
</parameter>
<parameter name="feature">
<parameter_description> #GdaConnectionFeature feature to test
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @feature is supported
</return>
</function>

<function name="gda_sql_field_serialize">
<description>
Creates a new string representing a field. You need to free the returned string
using g_free();


</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaSqlField structure
</parameter_description>
</parameter>
</parameters>
<return> a new string with the name of the field or &quot;null&quot; in case @field is invalid.
</return>
</function>

<function name="gda_connection_event_set_event_type">
<description>
Sets @event&apos;s severity (from a simple notice to a fatal event)
This function should not be called directly.

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdaConnectionEvent object
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the severity of the event
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_row_get_value">
<description>
Gets a pointer to a #GValue stored in a #GdaRow.

This is a pointer to the internal array of values. Don&apos;t try to free
or modify it!


</description>
<parameters>
<parameter name="row">
<parameter_description> a #GdaRow
</parameter_description>
</parameter>
<parameter name="num">
<parameter_description> field index.
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the #GValue in the position @num of @row.
</return>
</function>

<function name="gda_server_provider_get_info">
<description>
Get the name (identifier) of the provider


</description>
<parameters>
<parameter name="provider">
<parameter_description> a #GdaServerProvider object.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the provider&apos;s name
</return>
</function>

<function name="gda_string_to_binary">
<description>
Performs the reverse of gda_binary_to_string().


</description>
<parameters>
<parameter name="str">
<parameter_description> a string to convert
</parameter_description>
</parameter>
<parameter name="bin">
<parameter_description> a non filled @GdaBinary structure
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error were found in @str, or FALSE otherwise
</return>
</function>

<function name="gda_mutex_free">
<description>
Destroys @m.

</description>
<parameters>
<parameter name="m">
<parameter_description> a #GdaMutex
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_connection_create_parser">
<description>
Creates a new parser object able to parse the SQL dialect understood by @cnc. 
If the #GdaServerProvider object internally used by @cnc does not have its own parser, 
then %NULL is returned, and a general SQL parser can be obtained
using gda_sql_parser_new().


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaSqlParser object, or %NULL
</return>
</function>

<function name="gda_parse_iso8601_date">
<description>
Extracts date parts from @value, and sets @gdate&apos;s contents

Accepted date format is &quot;YYYY-MM-DD&quot;.


</description>
<parameters>
<parameter name="gdate">
<parameter_description> a pointer to a #GDate structure which will be filled
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a string
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_column_get_description">
<description>

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
</parameters>
<return> the column&apos;s description, in any
</return>
</function>

<function name="gda_meta_store_schema_remove_custom_object">
<description>
Removes the custom database object named @obj_name.


</description>
<parameters>
<parameter name="store">
<parameter_description> a #GdaMetaStore object
</parameter_description>
</parameter>
<parameter name="obj_name">
<parameter_description> name of the custom object to remove
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the custom object has sucessfully been removed
</return>
</function>

<function name="gda_meta_struct_get_table_column">
<description>
Tries to find the #GdaMetaTableColumn representing the column named @col_name in @table.


</description>
<parameters>
<parameter name="mstruct">
<parameter_description> a #GdaMetaStruct object
</parameter_description>
</parameter>
<parameter name="table">
<parameter_description> the #GdaMetaTable structure to find the column for
</parameter_description>
</parameter>
<parameter name="col_name">
<parameter_description> the name of the column to find (as a G_TYPE_STRING GValue)
</parameter_description>
</parameter>
</parameters>
<return> the #GdaMetaTableColumn or %NULL if not found
</return>
</function>

<function name="gda_data_model_get_n_columns">
<description>

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
</parameters>
<return> the number of columns in the given data model.
</return>
</function>

<function name="gda_column_get_g_type">
<description>

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
</parameters>
<return> the type of @column.
</return>
</function>

<function name="gda_default_unescape_string">
<description>
Do the reverse of gda_default_escape_string(): transforms any &quot;\&apos;&quot; into &quot;&apos;&quot; and any
&quot;\\&quot; into &quot;\&quot;. 


</description>
<parameters>
<parameter name="string">
<parameter_description> string to unescape
</parameter_description>
</parameter>
</parameters>
<return> a new unescaped string, or %NULL in an error was found in @string
</return>
</function>

<function name="gda_server_provider_unescape_string">
<description>
Unescapes @str for use within an SQL command. This is the exact opposite of gda_server_provider_escape_string().


</description>
<parameters>
<parameter name="provider">
<parameter_description> a server provider.
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object, or %NULL
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> a string to escape
</parameter_description>
</parameter>
</parameters>
<return> a new string
</return>
</function>

<function name="gda_meta_store_new_with_file">
<description>
Create a new #GdaMetaStore object using @file_name as its internal
database


</description>
<parameters>
<parameter name="file_name">
<parameter_description> a file name
</parameter_description>
</parameter>
</parameters>
<return> the newly created object, or %NULL if an error occurred
</return>
</function>

<function name="gda_value_is_null">
<description>
Tests if a given @value is of type #GDA_TYPE_NULL.


</description>
<parameters>
<parameter name="value">
<parameter_description> value to test.
</parameter_description>
</parameter>
</parameters>
<return> a boolean that says whether or not @value is of type
#GDA_TYPE_NULL.
</return>
</function>

<function name="gda_sql_table_free">
<description>
Frees a #GdaSqlTable structure and its members.

</description>
<parameters>
<parameter name="table">
<parameter_description> a #GdaSqlTable structure to be freed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_select_get_stored_row">
<description>
Get the #GdaRow object stored within @model at row @rownum (without taking care of removed rows)


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataSelect data model
</parameter_description>
</parameter>
<parameter name="rownum">
<parameter_description> &quot;external&quot; advertized row number
</parameter_description>
</parameter>
</parameters>
<return> the requested #GdaRow, or %NULL if not found
</return>
</function>

<function name="gda_blob_op_read_all">
<description>
Reads the whole contents of the blob manipulated by @op into @blob


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaBlobOp
</parameter_description>
</parameter>
<parameter name="blob">
<parameter_description> a #GdaBlob to read data to
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @blob-&amp;gt;data contains the whole BLOB manipulated by @op
</return>
</function>

<function name="gda_statement_new">
<description>
Creates a new #GdaStatement object


</description>
<parameters>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_value_set_list">
<description>
Stores @val into @value.

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue that will store @val.
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> value to be stored in @value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_holder_new_inline">
<description>
Creates a new #GdaHolder object named @name, of type @type, and containing the value passed
as the last argument.

Note that this function is a utility function and that anly a limited set of types are supported. Trying
to use an unsupported type will result in a warning, and the returned value holder holding a safe default
value.


</description>
<parameters>
<parameter name="type">
<parameter_description> a valid GLib type
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> the id of the holder to create, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> value to set
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaHolder object
</return>
</function>

<function name="gda_connection_add_event_string">
<description>
Adds a new error to the given connection object. This is just a convenience
function that simply creates a #GdaConnectionEvent and then calls
#gda_server_connection_add_error.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> a format string (see the printf(3) documentation).
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the arguments to insert in the error message.
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaConnectionEvent object, however the caller does not hold a reference to the returned
object, and if need be the caller must call g_object_ref() on it.
</return>
</function>

<function name="gda_sql_parser_new">
<description>
Creates a new #GdaSqlParser object


</description>
<parameters>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_quark_list_copy">
<description>
Creates a new #GdaQuarkList from an existing one.


</description>
<parameters>
<parameter name="qlist">
<parameter_description> quark_list to get a copy from.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GdaQuarkList with a copy of the data in @qlist.
</return>
</function>

<function name="gda_config_get_dsn_info_index">
<description>
Get the index (starting at 0) of the DSN named @dsn_name


</description>
<parameters>
<parameter name="dsn_name">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> the index or -1 if not found
</return>
</function>

<function name="gda_connection_rollback_transaction">
<description>
Rollbacks the given transaction. This means that all changes
made to the underlying data source since the last call to
#gda_connection_begin_transaction() or #gda_connection_commit_transaction()
will be discarded.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the transation to commit, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the operation was successful, %FALSE otherwise.
</return>
</function>

<function name="gda_value_compare">
<description>
Compares two values of the same type, with the exception that a value of any type can be
compared to a GDA_TYPE_NULL value, specifically:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;if @value1 and @value2 are both GDA_TYPE_NULL values then the returned value is 0&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;if @value1 is a GDA_TYPE_NULL value and @value2 is of another type then the returned value is -1&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;if @value1 is of another type and @value2 is a GDA_TYPE_NULL value then the returned value is 1&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;in all other cases, @value1 and @value2 must be of the same type and their values are compared&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;


</description>
<parameters>
<parameter name="value1">
<parameter_description> a #GValue to compare (not %NULL)
</parameter_description>
</parameter>
<parameter name="value2">
<parameter_description> the other #GValue to be compared to @value1 (not %NULL)
</parameter_description>
</parameter>
</parameters>
<return> if both values have the same type, returns 0 if both contain
the same value, an integer less than 0 if @value1 is less than @value2 or
an integer greater than 0 if @value1 is greater than @value2.
</return>
</function>

<function name="gda_data_proxy_set_ordering_column">
<description>
Orders by the @col column


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
<parameter name="col">
<parameter_description> the column number to order from
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_config_can_modify_system_config">
<description>
Tells if the global (system) configuration can be modified (considering
system permissions and settings)


</description>
<parameters>
</parameters>
<return> TRUE if system-wide configuration can be modified
</return>
</function>

<function name="gda_completion_list_get">
<description>
Creates an array of strings (terminated by a %NULL) corresponding to possible completions.
If no completion is available, then the returned array contains just one NULL entry, and
if it was not possible to try to compute a completions list, then %NULL is returned.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
<parameter name="sql">
<parameter_description> a partial SQL statement which is the context of the completion proposal
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> starting position within @sql of the &quot;token&quot; to complete (starts at 0)
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> ending position within @sql of the &quot;token&quot; to complete
</parameter_description>
</parameter>
</parameters>
<return> a new array of strings, or %NULL (use g_strfreev() to free the returned array)
</return>
</function>

<function name="gda_sql_select_from_serialize">
<description>
Creates a new string description of the FROM clausure used in a SELECT statement.


</description>
<parameters>
<parameter name="from">
<parameter_description> a #GdaSqlSelectFrom structure
</parameter_description>
</parameter>
</parameters>
<return> a new string with the description of the FROM or &quot;null&quot; in case @from is invalid.
</return>
</function>

<function name="gda_value_set_numeric">
<description>
Stores @val into @value.

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue that will store @val.
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> value to be stored in @value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GdaHolder">
<description>
Gets emitted when @holder is going to change its value. One can connect to
this signal to control which values @holder can have (for example to implement some business rules)


</description>
<parameters>
<parameter name="holder">
<parameter_description> the object which received the signal
</parameter_description>
</parameter>
<parameter name="new_value">
<parameter_description> the proposed new value for @holder
</parameter_description>
</parameter>
</parameters>
<return> NULL if @holder is allowed to change its value to @new_value, or a #GError
otherwise.
</return>
</function>

<function name="gda_data_model_set_value_at">
<description>
Modifies a value in @model, at (@col, @row).


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
<parameter name="col">
<parameter_description> column number.
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> row number.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue (not %NULL)
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the value in the data model has been updated and no error occurred
</return>
</function>

<function name="gda_data_comparator_get_n_diffs">
<description>
Get the number of differences as computed by the last time gda_data_comparator_compute_diff() was called.


</description>
<parameters>
<parameter name="comp">
<parameter_description> a #GdaDataComparator object
</parameter_description>
</parameter>
</parameters>
<return> the number of computed differences
</return>
</function>

<function name="gda_sql_operation_copy">
<description>
Creates a new #GdaSqlOperation structure initated with the values stored in @operation.


</description>
<parameters>
<parameter name="operation">
<parameter_description> a #GdaSqlOperation structure to be copied
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaSqlOperation structure.
</return>
</function>

<function name="gda_value_set_blob">
<description>
Stores @val into @value.

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue that will store @val.
</parameter_description>
</parameter>
<parameter name="blob">
<parameter_description> a #GdaBlob structure with the data and its size to be stored in @value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_handler_get_descr">
<description>
Get a short description of the GdaDataHandler


</description>
<parameters>
<parameter name="dh">
<parameter_description> an object which implements the #GdaDataHandler interface
</parameter_description>
</parameter>
</parameters>
<return> the description
</return>
</function>

<function name="gda_data_model_iter_get_row">
<description>
Get the row which @iter represents in the data model


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GdaDataModelIter object
</parameter_description>
</parameter>
</parameters>
<return> the row number, or -1 if @iter is invalid
</return>
</function>

<function name="gda_statement_serialize">
<description>
Creates a string representing the contents of @stmt.


</description>
<parameters>
<parameter name="stmt">
<parameter_description> a #GdaStatement object
</parameter_description>
</parameter>
</parameters>
<return> a string containing the serialized version of @stmt
</return>
</function>

<function name="gda_data_handler_get_value_from_str">
<description>
Creates a new GValue which represents the STR value given as argument. This is
the opposite of the function gda_data_handler_get_str_from_value(). The type argument
is used to determine the real data type requested for the returned value.

If the str string is NULL, then the returned GValue is of type GDA_TYPE_NULL;
if the str string does not correspond to a valid STR string for the requested type, then
NULL is returned.


</description>
<parameters>
<parameter name="dh">
<parameter_description> an object which implements the #GdaDataHandler interface
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> 
</parameter_description>
</parameter>
</parameters>
<return> the new GValue or NULL on error
</return>
</function>

<function name="gda_data_model_row_removed">
<description>
Emits the &apos;row_removed&apos; and &apos;changed&apos; signal on @model.

This method should only be used by #GdaDataModel implementations to 
signal that a row has been removed

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> row number.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_connection_get_transaction_status">
<description>
Get the status of @cnc regarding transactions. The returned object should not be modified
or destroyed; however it may be modified or destroyed by the connection itself.

If %NULL is returned, then no transaction has been associated with @cnc


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
</parameters>
<return> a #GdaTransactionStatus object, or %NULL
</return>
</function>

<function name="gda_value_set_geometric_point">
<description>
Stores @val into @value.

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue that will store @val.
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> value to be stored in @value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_set_new_from_spec_string">
<description>
Creates a new #GdaSet object from the @xml_spec
specifications


</description>
<parameters>
<parameter name="xml_spec">
<parameter_description> a string
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store the error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new object, or %NULL if an error occurred
</return>
</function>

<function name="gda_threader_cancel">
<description>

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gda_sql_operation_new">
<description>
Creates a new #GdaSqlOperation structure and sets its parent to @parent.


</description>
<parameters>
<parameter name="parent">
<parameter_description> a #GdaSqlExpr structure
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaSqlOperation structure.
</return>
</function>

<function name="gda_server_provider_perform_operation">
<description>
Performs the operation described by @op. Note that @op is not destroyed by this method
and can be reused.


</description>
<parameters>
<parameter name="provider">
<parameter_description> a #GdaServerProvider object
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object which will be used to perform the action, or %NULL
</parameter_description>
</parameter>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store an error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_data_access_wrapper_new">
<description>
Creates a new #GdaDataModel object which buffers the rows of @model. This object is usefull
only if @model can only be accessed using cursor based method.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the newly created #GdaDataModel.
</return>
</function>

<function name="gda_data_comparator_get_diff">
<description>
Get a pointer to the #GdaDiff structure representing the difference which number is @pos


</description>
<parameters>
<parameter name="comp">
<parameter_description> a #GdaDataComparator object
</parameter_description>
</parameter>
<parameter name="pos">
<parameter_description> the requested difference number (starting at 0)
</parameter_description>
</parameter>
</parameters>
<return> a pointer to a #GdaDiff, or %NULL if @pos is invalid
</return>
</function>

<function name="gda_data_model_append_row">
<description>
Appends a row to the data model (the new row will possibliy have NULL values for all columns,
or some other values depending on the data model implementation)


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the number of the added row, or -1 if an error occurred
</return>
</function>

<function name="gda_value_copy">
<description>
Creates a new #GValue from an existing one.


</description>
<parameters>
<parameter name="value">
<parameter_description> value to get a copy from.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GValue with a copy of the data in @value.
</return>
</function>

<function name="gda_utility_data_model_dump_data_to_xml">
<description>
Dump the data in a #GdaDataModel into a xmlNodePtr (as used in libxml).


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> the parent XML node
</parameter_description>
</parameter>
<parameter name="cols">
<parameter_description> an array containing which columns of @model will be exported, or %NULL for all columns
</parameter_description>
</parameter>
<parameter name="nb_cols">
<parameter_description> the number of columns in @cols
</parameter_description>
</parameter>
<parameter name="rows">
<parameter_description> an array containing which rows of @model will be exported, or %NULL for all rows
</parameter_description>
</parameter>
<parameter name="nb_rows">
<parameter_description> the number of rows in @rows
</parameter_description>
</parameter>
<parameter name="use_col_ids">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_data_model_get_access_flags">
<description>
Get the attributes of @model such as how to access the data it contains if it&apos;s modifiable, etc.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
</parameters>
<return> an ORed value of #GdaDataModelAccessFlags flags
</return>
</function>

<function name="gda_handler_bin_new">
<description>
Creates a data handler for binary values


</description>
<parameters>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_meta_table_column_get_attribute">
<description>
Get the value associated to a named attribute.

Attributes can have any name, but Libgda proposes some default names, see &amp;lt;link linkend=&quot;libgda-40-Attributes-manager.synopsis&quot;&amp;gt;this section&amp;lt;/link&amp;gt;.


</description>
<parameters>
<parameter name="tcol">
<parameter_description> a #GdaMetaTableColumn
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> attribute name as a string
</parameter_description>
</parameter>
</parameters>
<return> a read-only #GValue, or %NULL if not attribute named @attribute has been set for @column
</return>
</function>

<function name="gda_parse_iso8601_timestamp">
<description>
Extracts date and time parts from @value, and sets @timestamp&apos;s contents

Accepted date format is &quot;YYYY-MM-DD HH:MM:SS[.ms][TZ]&quot; where TZ is +hour or -hour


</description>
<parameters>
<parameter name="timestamp">
<parameter_description> a pointer to a #GdaTimeStamp structure which will be filled
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a string
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_set_new_inline">
<description>
Creates a new #GdaSet containing holders defined by each triplet in ...
For each triplet (id, Glib type and value), 
the value must be of the correct type (gchar * if type is G_STRING, ...)

Note that this function is a utility function and that anly a limited set of types are supported. Trying
to use an unsupported type will result in a warning, and the returned value holder holding a safe default
value.


</description>
<parameters>
<parameter name="nb">
<parameter_description> the number of value holders which will be contained in the new #GdaSet
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a serie of a (const gchar*) id, (GType) type, and value
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaSet object
</return>
</function>

<function name="gda_value_new_from_string">
<description>
Makes a new #GValue of type @type from its string representation. 

For more information
about the string format, see the gda_value_set_from_string() function.
This function is typically used when reading configuration files or other non-user input that should be locale 
independent.


</description>
<parameters>
<parameter name="as_string">
<parameter_description> stringified representation of the value.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the new value type.
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GValue or %NULL if the string representation
cannot be converted to the specified @type.
</return>
</function>

<function name="gda_virtual_connection_internal_set_provider_data">
<description>
Note: calling this function more than once will not make it call @destroy_func on any previously
set opaque @data, you&apos;ll have to do it yourself.

</description>
<parameters>
<parameter name="vcnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> an opaque structure, known only to the provider for which @vcnc is opened
</parameter_description>
</parameter>
<parameter name="destroy_func">
<parameter_description> function to call when the connection closes and @data needs to be destroyed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_sql_select_join_copy">
<description>
Creates a new #GdaSqlSelectJoin structure initated with the values stored in @join.


</description>
<parameters>
<parameter name="join">
<parameter_description> a #GdaSqlSelectJoin structure to be copied
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaSqlSelectJoin structure.
</return>
</function>

<function name="gda_value_take_binary">
<description>
Stores @val into @value, but on the contrary to gda_value_set_binary(), the @binary
argument is not copied, but used as-is and it should be considered owned by @value.

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue that will store @val.
</parameter_description>
</parameter>
<parameter name="binary">
<parameter_description> a #GdaBinary structure with the data and its size to be stored in @value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_sql_identifier_needs_quotes">
<description>
Tells if @str needs to be quoted before using it in an SQL statement. To actually add quotes,
use gda_sql_identifier_add_quotes().


</description>
<parameters>
<parameter name="str">
<parameter_description> an SQL identifier
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @str needs some quotes
</return>
</function>

<function name="gda_handler_time_set_sql_spec">
<description>
Specifies the SQL output style of the @dh data handler. The general format is &quot;FIRSTsSECsTHIRD&quot;
where FIRST, SEC and THIRD are specified by @first, @sec and @trird and &apos;s&apos; is the separator,
specified by @separator.

The default implementation is FIRST=G_DATE_MONTH, SEC=G_DATE_DAY and THIRD=G_DATE_YEAR (the year is
rendered on 4 digits) and the separator is &apos;-&apos;

</description>
<parameters>
<parameter name="dh">
<parameter_description> a #GdaHandlerTime object
</parameter_description>
</parameter>
<parameter name="first">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="sec">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="third">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="separator">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="twodigits_years">
<parameter_description> TRUE if year part of date must be rendered on 2 digits
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_column_get_position">
<description>

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
</parameters>
<return> the position of the column refer to in the
containing data model.
</return>
</function>

<function name="gda_blob_op_get_length">
<description>

</description>
<parameters>
<parameter name="op">
<parameter_description> an existing #GdaBlobOp
</parameter_description>
</parameter>
</parameters>
<return> the length of the blob in bytes. In case of error, -1 is returned and the
provider should have added an error (a #GdaConnectionEvent) to the connection.
</return>
</function>

<function name="gda_log_message">
<description>
Logs the given message in the GDA log file.

</description>
<parameters>
<parameter name="format">
<parameter_description> format string (see the printf(3) documentation).
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> arguments to insert in the message.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_sql_expr_take_select">
<description>
Sets the expression&apos;s parent to the #GdaSqlStatementSelect holded by @stmt. After
calling this function @stmt is freed.


</description>
<parameters>
<parameter name="expr">
<parameter_description> a #GdaSqlExpr structure
</parameter_description>
</parameter>
<parameter name="stmt">
<parameter_description> a #GdaSqlStatement holding the #GdaSqlStatementSelect to take from
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_proxy_row_has_changed">
<description>
Tells if the row number @proxy_row has changed


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
<parameter name="proxy_row">
<parameter_description> A proxy row number
</parameter_description>
</parameter>
</parameters>
<return>
</return>
</function>

<function name="gda_update_value_in_table">
<description>
This is just a convenient function to update values in a table on a given column where
the row is fitting the given condition.

The SQL command is like: UPDATE INTO table_name SET column_name = new_value WHERE search_for_column = condition


</description>
<parameters>
<parameter name="cnc">
<parameter_description> an opened connection
</parameter_description>
</parameter>
<parameter name="table_name">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="search_for_column">
<parameter_description> the name of the column to used in the WHERE condition clause
</parameter_description>
</parameter>
<parameter name="condition">
<parameter_description> a GValue to used to find the value to be updated; it must correspond with the GType
of the column used to search
</parameter_description>
</parameter>
<parameter name="column_name">
<parameter_description> the column containing the value to be updated
</parameter_description>
</parameter>
<parameter name="new_value">
<parameter_description> the new value to update to; the @GValue must correspond with the GType of the column to update
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_data_proxy_has_changed">
<description>
Tells if @proxy contains any modifications not applied to the proxied data model.


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if there are some modifications in @proxy
</return>
</function>

<function name="gda_connection_perform_operation">
<description>
Performs the operation described by @op (which should have been created using
gda_connection_create_operation()). It is a wrapper around the gda_server_provider_perform_operation()
method.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store an error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_connection_commit_transaction">
<description>
Commits the given transaction to the backend database. You need to call
gda_connection_begin_transaction() first.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the transation to commit, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the transaction was finished successfully,
%FALSE otherwise.
</return>
</function>

<function name="gda_data_model_bdb_clean_errors">
<description>
Reset the list of errors which have occurred while using @model

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModelBdb object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_model_bdb_new">
<description>
Creates a new #GdaDataModel object to access the contents of the Berkeley DB file @file,
for the database @db_name if not %NULL


</description>
<parameters>
<parameter name="filename">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="db_name">
<parameter_description> the name of the database within @filename, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaDataModel
</return>
</function>

<function name="gda_sql_operation_serialize">
<description>
Creates a new string representing an operator. You need to free the returned string
using g_free();


</description>
<parameters>
<parameter name="operation">
<parameter_description> a #GdaSqlOperation structure
</parameter_description>
</parameter>
</parameters>
<return> a new string with the description of the operator or &quot;null&quot; in case @operation is invalid.
</return>
</function>

<function name="gda_data_proxy_get_sample_end">
<description>
Get the row number of the last row to be displayed.


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
</parameters>
<return> the number of the last row being displayed.
</return>
</function>

<function name="gda_meta_store_get_version">
<description>
Get @store&apos;s internal schema&apos;s version

Retunrs: the version (1 at the moment)

</description>
<parameters>
<parameter name="store">
<parameter_description> a #GdaMetaStore object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_server_operation_new">
<description>
IMPORTANT NOTE: Using this funtion is not the recommended way of creating a #GdaServerOperation object, the
correct way is to use gda_server_provider_create_operation(); this method is reserved for internal implementation.

Creates a new #GdaServerOperation object from the @xml_file specifications

The @xml_file must respect the DTD described in the &quot;libgda-server-operation.dtd&quot; file: its top
node must be a &amp;lt;serv_op&amp;gt; tag.


</description>
<parameters>
<parameter name="xml_file">
<parameter_description> a file which has the specifications for the GdaServerOperation object to create
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaServerOperation object
</return>
</function>

<function name="gda_data_proxy_delete">
<description>
Marks the row @proxy_row to be deleted

</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
<parameter name="proxy_row">
<parameter_description> A proxy row number
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_sql_select_target_new">
<description>
Creates a new #GdaSqlSelectTarget structure and sets its parent to @parent. A
#GdaSqlSelectTarget is the table in a SELECT statement.


</description>
<parameters>
<parameter name="parent">
<parameter_description> a #GdaSqlSelectFrom
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaSqlSelectTarget structure.
</return>
</function>

<function name="gda_data_model_freeze">
<description>
Disables notifications of changes on the given data model. To
re-enable notifications again, you should call the
#gda_data_model_thaw function.

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_quark_list_remove">
<description>
Removes an entry from the #GdaQuarkList, given its name.

</description>
<parameters>
<parameter name="qlist">
<parameter_description> a #GdaQuarkList structure.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> an entry name.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_set_get_holder">
<description>
Finds a #GdaHolder using its ID


</description>
<parameters>
<parameter name="set">
<parameter_description> a #GdaSet object
</parameter_description>
</parameter>
<parameter name="holder_id">
<parameter_description> the ID of the requested value holder
</parameter_description>
</parameter>
</parameters>
<return> a #GdaHolder or %NULL
</return>
</function>

<function name="gda_connection_event_get_sqlstate">
<description>
Get the SQLSTATE value of @event. Even though the SQLSTATE values are specified by ANSI SQL and ODBC,
consult each DBMS for the possible values. However, the &quot;00000&quot; (success) value means that there is no error,
and the &quot;HY000&quot; (general error) value means an error but no better error code available.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdaConnectionEvent.
</parameter_description>
</parameter>
</parameters>
<return> @event&apos;s SQL state.
</return>
</function>

<function name="gda_holder_set_bind">
<description>
Sets @holder to change when @bind_to changes (and does not make @bind_to change when @holder changes).

If @bind_to is %NULL, then @holder will not be bound anymore.

</description>
<parameters>
<parameter name="holder">
<parameter_description> a #GdaHolder
</parameter_description>
</parameter>
<parameter name="bind_to">
<parameter_description> a #GdaHolder or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_sql_function_new">
<description>
Creates a new #GdaSqlFunction structure initated.


</description>
<parameters>
<parameter name="parent">
<parameter_description> a #GdaSqlExpr structure
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaSqlFunction structure.
</return>
</function>

<function name="gda_xa_transaction_rollback">
<description>
Cancels a distributed transaction (managed by @xa_trans). 


</description>
<parameters>
<parameter name="xa_trans">
<parameter_description> a #GdaXaTransaction object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_server_provider_get_default_dbms_type">
<description>
Get the name of the most common data type which has @type type.

The returned value may be %NULL either if the provider does not implement that method, or if
there is no DBMS data type which could contain data of the @g_type type (for example %NULL may be
returned if a DBMS has integers only up to 4 bytes and a G_TYPE_INT64 is requested).


</description>
<parameters>
<parameter name="provider">
<parameter_description> a server provider.
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object or %NULL
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a #GType value type
</parameter_description>
</parameter>
</parameters>
<return> the name of the DBMS type, or %NULL
</return>
</function>

<function name="gda_column_copy">
<description>
Creates a new #GdaColumn object from an existing one. 	 

</description>
<parameters>
<parameter name="column">
<parameter_description> column to get a copy from. 	 
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GdaColumn with a copy of the data 	 
in @column. 	 
</return>
</function>

<function name="gda_value_stringify">
<description>
Converts a GValue to its string representation which is a human readable value. Note that the
returned string does not take into account the current locale of the user (on the contrary to the
#GdaDataHandler objects). Using this function should be limited to debugging and values serialization
purposes.

Dates are converted in a YYYY-MM-DD format.


</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue.
</parameter_description>
</parameter>
</parameters>
<return> a new string, or %NULL if the conversion cannot be done. Free the value with a g_free() when you&apos;ve finished
using it. 
</return>
</function>

<function name="gda_value_new">
<description>
Makes a new #GValue of type @type.


</description>
<parameters>
<parameter name="type">
<parameter_description> the new value type.
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GValue with the specified @type. 
You need to set the value in the returned GValue.
</return>
</function>

<function name="gda_data_proxy_undelete">
<description>
Remove the &quot;to be deleted&quot; mark at the row @proxy_row, if it existed.

</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
<parameter name="proxy_row">
<parameter_description> A proxy row number
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_sql_select_field_copy">
<description>
Creates a new #GdaSqlSelectField structure initated with the values stored in @field.


</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaSqlSelectField structure to be copied
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaSqlSelectField structure.
</return>
</function>

<function name="gda_data_handler_get_nb_g_types">
<description>
Get the number of GType types the GdaDataHandler can handle correctly


</description>
<parameters>
<parameter name="dh">
<parameter_description> an object which implements the #GdaDataHandler interface
</parameter_description>
</parameter>
</parameters>
<return> the number.
</return>
</function>

<function name="gda_data_proxy_is_read_only">
<description>

</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the proxied data model is itself read-only
</return>
</function>

<function name="gda_connection_del_prepared_statement">
<description>
Removes any prepared statement associated to @gda_stmt in @cnc: this undoes what
gda_connection_add_prepared_statement() does.

</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
<parameter name="gda_stmt">
<parameter_description> a #GdaStatement object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_value_get_binary">
<description>

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue whose value we want to get.
</parameter_description>
</parameter>
</parameters>
<return> the value stored in @value.
</return>
</function>

<function name="gda_data_model_import_get_type">
<description>

</description>
<parameters>
</parameters>
<return> the #GType of GdaDataModelImport.
</return>
</function>

<function name="gda_sql_statement_check_clean">
<description>
Cleans any data set by a previous call to gda_sql_statement_check_validity().

</description>
<parameters>
<parameter name="stmt">
<parameter_description> a pinter to a #GdaSqlStatement structure
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_model_export_to_file">
<description>
Exports data contained in @model to the @file file; the format is specified using the @format argument.

Specifically, the parameters in the @options list can be:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;&quot;SEPARATOR&quot;: a string value of which the first character is used as a separator in case of CSV export
&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;&quot;QUOTE&quot;: a string value of which the first character is used as a quote character in case of CSV export
&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;&quot;FIELD_QUOTE&quot;: a boolean value which can be set to FALSE if no quote around the individual fields 
is requeted, in case of CSV export&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;&quot;NAME&quot;: a string value used to name the exported data if the export format is XML&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;&quot;OVERWRITE&quot;: a boolean value which tells if the file must be over-written if it already exists.
&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the format in which to export data
</parameter_description>
</parameter>
<parameter name="file">
<parameter_description> the filename to export to
</parameter_description>
</parameter>
<parameter name="cols">
<parameter_description> an array containing which columns of @model will be exported, or %NULL for all columns
</parameter_description>
</parameter>
<parameter name="nb_cols">
<parameter_description> the number of columns in @cols
</parameter_description>
</parameter>
<parameter name="rows">
<parameter_description> an array containing which rows of @model will be exported, or %NULL for all rows
</parameter_description>
</parameter>
<parameter name="nb_rows">
<parameter_description> the number of rows in @rows
</parameter_description>
</parameter>
<parameter name="options">
<parameter_description> list of options for the export
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_server_operation_get_value_at">
<description>
Get the value for the node at the path formed using @path_format and ... (the rules are the same as
for g_strdup_printf())


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
<parameter name="path_format">
<parameter_description> a complete path to a node (starting with &quot;/&quot;)
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> arguments to use with @path_format to make a complete path
</parameter_description>
</parameter>
</parameters>
<return> a constant #GValue if a value has been defined, or %NULL if the value is undefined or
if the @path is not defined or @path does not hold any value.
</return>
</function>

<function name="gda_column_get_auto_increment">
<description>

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
</parameters>
<return> whether the given column is an auto incremented one (%TRUE or %FALSE).
</return>
</function>

<function name="gda_get_application_exec_path">
<description>
Find the path to the application identified by @app_name. For example if the application
is &quot;gda-sql&quot;, then calling this function will return
&quot;/your/prefix/bin/gda-sql-4.0&quot; if Libgda is installed in
the &quot;/your/prefix&quot; prefix (which would usually be &quot;/usr&quot;), and for the ABI version 4.0.


</description>
<parameters>
<parameter name="app_name">
<parameter_description> the name of the application to find
</parameter_description>
</parameter>
</parameters>
<return> the path as a new string, or %NULL if the application cannot be found
</return>
</function>

<function name="gda_identifier_hash">
<description>
computes a hash string from @id, to be used in hash tables as a #GHashFunc


</description>
<parameters>
<parameter name="id">
<parameter_description> an identifier string
</parameter_description>
</parameter>
</parameters>
<return> a new hash
</return>
</function>

<function name="gda_holder_set_value_to_default">
<description>
Set @holder&apos;s value to its default value.


</description>
<parameters>
<parameter name="holder">
<parameter_description> a #GdaHolder object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @holder has got a default value
</return>
</function>

<function name="gda_server_operation_get_node_path_portion">
<description>
Get the last part of @path


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a complete path to a node (starting with &quot;/&quot;)
</parameter_description>
</parameter>
</parameters>
<return> a new string, or %NULL if an error occurred
</return>
</function>

<function name="gda_connection_event_get_gda_code">
<description>
Retreive the code associated to @event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdaConnectionEvent
</parameter_description>
</parameter>
</parameters>
<return> the #GdaConnectionEventCode event&apos;s code
</return>
</function>

<function name="gda_server_provider_get_data_handler_g_type">
<description>
Find a #GdaDataHandler object to manipulate data of type @for_type. The returned object must not be modified.


</description>
<parameters>
<parameter name="provider">
<parameter_description> a server provider.
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object, or %NULL
</parameter_description>
</parameter>
<parameter name="for_type">
<parameter_description> a #GType
</parameter_description>
</parameter>
</parameters>
<return> a #GdaDataHandler, or %NULL if the provider does not support the requested @for_type data type 
</return>
</function>

<function name="gda_sql_select_order_new">
<description>
Creates a new #GdaSqlSelectOrder structure and sets its parent to @parent.


</description>
<parameters>
<parameter name="parent">
<parameter_description> a #GdaSqlStatementSelect
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaSqlSelectOrder structure
</return>
</function>

<function name="gda_data_model_iter_get_value_for_field">
<description>
Get the value stored at the column @field_name in @iter


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GdaDataModelIter object
</parameter_description>
</parameter>
<parameter name="field_name">
<parameter_description> the requested column name
</parameter_description>
</parameter>
</parameters>
<return> the #GValue, or %NULL
</return>
</function>

<function name="gda_data_proxy_get_proxied_model_row">
<description>
Get the @proxy&apos;s proxied model row corresponding to @proxy_row


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
<parameter name="proxy_row">
<parameter_description> A proxy row number
</parameter_description>
</parameter>
</parameters>
<return> the proxied model&apos;s row, or -1 if @proxy row which only exists @proxy
</return>
</function>

<function name="gda_column_set_g_type">
<description>
Sets the type of @column to @type.

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the new type of @column.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_proxy_append">
<description>
Appends a new row to the proxy. The operation can fail if either:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;The INSERT operation is not accepted by the proxied data model&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;There is an unknown number of rows in the proxy&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
</parameters>
<return> the proxy row number of the new row, or -1 if the row could not be appended
</return>
</function>

<function name="gda_server_provider_create_parser">
<description>
Creates a new #GdaSqlParser object which is adapted to @provider (and possibly depending on
@cnc for the actual database version).

If @prov does not have its own parser, then %NULL is returned, and a general SQL parser can be obtained
using gda_sql_parser_new().


</description>
<parameters>
<parameter name="provider">
<parameter_description> a #GdaServerProvider provider object
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaSqlParser object, or %NULL.
</return>
</function>

<function name="gda_sql_select_target_free">
<description>
Frees a #GdaSqlSelectTarget structure and its members.

</description>
<parameters>
<parameter name="target">
<parameter_description> a #GdaSqlSelectTarget structure to be freed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_proxy_apply_row_changes">
<description>
Commits the modified data in the proxy back into the #GdaDataModel.


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
<parameter name="proxy_row">
<parameter_description> the row number to commit
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> place to store the error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred.
</return>
</function>

<function name="gda_data_model_iter_move_prev_default">
<description>

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gda_data_model_dir_get_errors">
<description>
Get the list of errors which have occurred while using @model


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModelDir object
</parameter_description>
</parameter>
</parameters>
<return> a read-only list of #GError pointers, or %NULL if no error has occurred
</return>
</function>

<function name="gda_connection_add_prepared_statement">
<description>
Declares that @prepared_stmt is a prepared statement object associated to @gda_stmt within the connection
(meaning the connection increments the reference counter of @prepared_stmt).

If @gda_stmt changes or is destroyed, the the association will be lost and the connection will lose the
reference it has on @prepared_stmt.

</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
<parameter name="gda_stmt">
<parameter_description> a #GdaStatement object
</parameter_description>
</parameter>
<parameter name="prepared_stmt">
<parameter_description> a prepared statement object (as a #GdaPStmt object, or more likely a descendant)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_proxy_set_sample_start">
<description>
Sets the number of the first row to be displayed.

</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
<parameter name="sample_start">
<parameter_description> the number of the first row to be displayed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_value_get_time">
<description>

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue whose value we want to get.
</parameter_description>
</parameter>
</parameters>
<return> the value stored in @value.
</return>
</function>

<function name="gda_data_model_iter_move_to_row">
<description>
Synchronizes the values of the parameters in @iter with the values at the @row row.

If @row is not a valid row, then the returned value is FALSE, and the &quot;current-row&quot;
property is set to -1 (which means that gda_data_model_iter_is_valid() would return FALSE)

If any other error occurred then the returned value is FALSE, but the &quot;current-row&quot;
property is set to the @row row.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GdaDataModelIter object
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> the row to set @iter to
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_lockable_trylock">
<description>
Tries to lock @lockable. If it is already locked by another thread, then it immediately returns FALSE, otherwise
it locks @lockable.

This function can be used even if g_thread_init() has not yet been called, and, in that case, will do nothing.

Note: unlike g_mutex_lock(), this method recursive, which means a thread can lock @lockable several times 
(and has to unlock it as many times to actually unlock it).


</description>
<parameters>
<parameter name="lockable">
<parameter_description> a #GdaLockable object.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the object has successfully been locked.
</return>
</function>

<function name="gda_server_operation_get_sequence_max_size">
<description>

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a complete path to a sequence node (starting with &quot;/&quot;)
</parameter_description>
</parameter>
</parameters>
<return> the maximum number of items in the sequence at @path, or 0 if @path is not a sequence node
</return>
</function>

<function name="gda_server_operation_get_sequence_size">
<description>

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a complete path to a sequence node (starting with &quot;/&quot;)
</parameter_description>
</parameter>
</parameters>
<return> the number of items in the sequence at @path, or 0 if @path is not a sequence node
</return>
</function>

<function name="gda_quark_list_free">
<description>
Releases all memory occupied by the given #GdaQuarkList.

</description>
<parameters>
<parameter name="qlist">
<parameter_description> a #GdaQuarkList.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_server_operation_add_node_to_sequence">
<description>

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
<parameter name="seq_path">
<parameter_description> the path to the sequence to which an item must be added (like &quot;/SEQ_NAME&quot; for instance)
</parameter_description>
</parameter>
</parameters>
<return> the index of the new entry in the sequence (like 5 for example if a 6th item has
been added to the sequence.
</return>
</function>

<function name="gda_virtual_connection_open">
<description>
Creates and opens a new virtual connection using the @virtual_provider provider


</description>
<parameters>
<parameter name="virtual_provider">
<parameter_description> a #GdaVirtualProvider object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaConnection object, or %NULL if an error occurred
</return>
</function>

<function name="gda_connection_statement_execute_non_select">
<description>
Executes a non-selection statement on the given connection. The gda_execute_non_select_command() method can be easier
to use if one prefers to use some SQL directly.

This function returns the number of rows affected by the execution of @stmt, or -1
if an error occurred, or -2 if the connection&apos;s provider does not return the number of rows affected.

This function is just a convenience function around the gda_connection_statement_execute()
function. 
See the documentation of the gda_connection_statement_execute() for information
about the @params list of parameters.

See gda_connection_statement_execute() form more information about @last_insert_row.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
<parameter name="stmt">
<parameter_description> a #GdaStatement object.
</parameter_description>
</parameter>
<parameter name="params">
<parameter_description> a #GdaSet object (which can be obtained using gda_statement_get_parameters()), or %NULL
</parameter_description>
</parameter>
<parameter name="last_insert_row">
<parameter_description> a place to store a new #GdaSet object which contains the values of the last inserted row, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store an error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the number of rows affected (&amp;gt;=0) or -1 or -2 
</return>
</function>

<function name="gda_data_proxy_new">
<description>
Creates a new proxy for @model


</description>
<parameters>
<parameter name="model">
<parameter_description> Data model to be proxied
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaDataProxy object
</return>
</function>

<function name="gda_data_proxy_cancel_row_changes">
<description>
Resets data at the corresponding row and column. If @proxy_row corresponds to a new row, then
that new row is deleted from @proxy.

</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
<parameter name="proxy_row">
<parameter_description> the row to cancel changes
</parameter_description>
</parameter>
<parameter name="col">
<parameter_description> the column to cancel changes, or less than 0 to cancel any change on the @row row
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_model_row_updated">
<description>
Emits the &apos;row_updated&apos; and &apos;changed&apos; signals on @model.

This method should only be used by #GdaDataModel implementations to 
signal that a row has been updated.

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> row number.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_holder_set_default_value">
<description>
Sets the default value within the holder. If @value is %NULL then @holder won&apos;t have a
default value anymore. To set a default value to %NULL, then pass a #GValue created using
gda_value_new_null().

NOTE: the default value does not need to be of the same type as the one required by @holder.

</description>
<parameters>
<parameter name="holder">
<parameter_description> a #GdaHolder object
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a value to set the holder&apos;s default value, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_model_iter_get_value_at">
<description>
Get the value stored at the column @col in @iter. The returned value must not be modified.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GdaDataModelIter object
</parameter_description>
</parameter>
<parameter name="col">
<parameter_description> the requested column
</parameter_description>
</parameter>
</parameters>
<return> the #GValue, or %NULL if the value could not be fetched
</return>
</function>

<function name="gda_meta_store_set_attribute_value">
<description>
Set the value of the attribute named @att_name to @att_value; see gda_meta_store_get_attribute_value() for
more information.


</description>
<parameters>
<parameter name="store">
<parameter_description> a #GdaMetaStore object
</parameter_description>
</parameter>
<parameter name="att_name">
<parameter_description> name of the attribute to set
</parameter_description>
</parameter>
<parameter name="att_value">
<parameter_description> value of the attribute to set, or %NULL to unset the attribute
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="Find">
<description>

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gda_data_model_get_n_rows">
<description>

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
</parameters>
<return> the number of rows in the given data model, or -1 if the number of rows is not known
</return>
</function>

<function name="gda_mutex_trylock">
<description>
Returns: TRUE, if @m could be locked.

</description>
<parameters>
<parameter name="m">
<parameter_description> a #GdaMutex
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if @m could be locked.
</return>
</function>

<function name="gda_pstmt_get_type">
<description>

</description>
<parameters>
</parameters>
<return> the #GType of GdaPStmt.
</return>
</function>

<function name="gda_set_add_holder">
<description>
Adds @holder to the list of holders managed within @set.

NOTE: if @set already has a #GdaHolder with the same ID as @holder, then @holder
will not be added to the set (even if @holder&apos;s type or value is not the same as the
one already in @set).


</description>
<parameters>
<parameter name="set">
<parameter_description> a #GdaSet object
</parameter_description>
</parameter>
<parameter name="holder">
<parameter_description> a #GdaHolder object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @holder has been added to @set (and FALSE if it has not been added because there is another #GdaHolder
with the same ID)
</return>
</function>

<function name="gda_data_model_reset">
<description>
Emits the &apos;reset&apos; and &apos;changed&apos; signal on @model.

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_binary_copy">
<description>
Creates a new #GdaBinary structure from an existing one.


</description>
<parameters>
<parameter name="boxed">
<parameter_description> source to get a copy from.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GdaBinary which contains a copy of
information in @boxed.
</return>
</function>

<function name="gda_column_set_description">
<description>
Sets the column&apos;s description

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> title name.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_server_provider_render_operation">
<description>
Creates an SQL statement (possibly using some specific extensions of the DBMS) corresponding to the
@op operation. Note that the returned string may actually contain more than one SQL statement.

This function&apos;s purpose is mainly informative to get the actual SQL code which would be executed to perform
the operation; to actually perform the operation, use gda_server_provider_perform_operation().


</description>
<parameters>
<parameter name="provider">
<parameter_description> a #GdaServerProvider object
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object which will be used to render the action, or %NULL
</parameter_description>
</parameter>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store an error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new string, or %NULL if an error occurred or operation cannot be rendered as SQL.
</return>
</function>

<function name="gda_sql_select_join_type_to_string">
<description>
Creates a new string representing the join type.


</description>
<parameters>
<parameter name="type">
<parameter_description> a #GdaSqlSelectJoinType structure to be copied
</parameter_description>
</parameter>
</parameters>
<return> a string representing the Join type.
</return>
</function>

<function name="gda_data_model_array_get_row">
<description>
Get a pointer to a row in @model


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModelArray object
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the #GdaRow, or %NULL if an error occurred
</return>
</function>

<function name="gda_data_comparator_compute_diff">
<description>
Actually computes the differences bewteen the data models for which @comp is defined. 

For each difference computed, stored in a #GdaDiff structure, the &quot;diff-computed&quot; signal is emitted.
If one connects to this signal and returns FALSE in the signal handler, then computing differences will be
stopped and an error will be returned.


</description>
<parameters>
<parameter name="comp">
<parameter_description> a #GdaDataComparator object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if all the differences have been sucessfully computed, and FALSE if an error occurred
</return>
</function>

<function name="gda_connection_open_from_string">
<description>
Opens a connection given a provider ID and a connection string. This
allows applications to open connections without having to create
a data source (DSN) in the configuration. The format of @cnc_string is
similar to PostgreSQL and MySQL connection strings. It is a semicolumn-separated
series of &amp;lt;key&amp;gt;=&amp;lt;value&amp;gt; pairs, where each key and value are encoded as per RFC 1738, 
see gda_rfc1738_encode() for more information.

The possible keys depend on the provider, the &quot;gda-sql-4.0 -L&quot; command
can be used to list the actual keys for each installed database provider.

For example the connection string to open an SQLite connection to a database
file named &quot;my_data.db&quot; in the current directory would be &amp;lt;constant&amp;gt;&quot;DB_DIR=.;DB_NAME=my_data&quot;&amp;lt;/constant&amp;gt;.

The @cnc_string string must have the following format: 
&quot;[&amp;lt;provider&amp;gt;://][&amp;lt;username&amp;gt;[:&amp;lt;password&amp;gt;]@]&amp;lt;connection_params&amp;gt;&quot;
(if &amp;lt;username&amp;gt; and/or &amp;lt;password&amp;gt; are provided, and @auth_string is %NULL, then these username
and passwords will be used, and if &amp;lt;provider&amp;gt; is provided and @provider_name is %NULL then this
provider will be used). Note that if provided, &amp;lt;username&amp;gt;, &amp;lt;password&amp;gt; and  &amp;lt;provider&amp;gt;
must be encoded as per RFC 1738, see gda_rfc1738_encode() for more information.

The @auth_string must contain the authentication information for the server
to accept the connection. It is a string containing semi-colon seperated named values, usually 
like &quot;USERNAME=...;PASSWORD=...&quot; where the ... are replaced by actual values. Note that each
name and value must be encoded as per RFC 1738, see gda_rfc1738_encode() for more information.

The actual named parameters required depend on the provider being used, and that list is available
as the &amp;lt;parameter&amp;gt;auth_params&amp;lt;/parameter&amp;gt; member of the #GdaProviderInfo structure for each installed
provider (use gda_config_get_provider_info() to get it). Similarly to the format of the connection
string, use the &quot;gda-sql-4.0 -L&quot; command to list the possible named parameters.

Additionally, it is possible to have the connection string
respect the &quot;&amp;lt;provider_name&amp;gt;://&amp;lt;real cnc string&amp;gt;&quot; format, in which case the provider name
and the real connection string will be extracted from that string (note that if @provider_name
is not %NULL then it will still be used as the provider ID).


</description>
<parameters>
<parameter name="provider_name">
<parameter_description> provider ID to connect to, or %NULL
</parameter_description>
</parameter>
<parameter name="cnc_string">
<parameter_description> connection string.
</parameter_description>
</parameter>
<parameter name="auth_string">
<parameter_description> authentication string, or %NULL
</parameter_description>
</parameter>
<parameter name="options">
<parameter_description> options for the connection (see #GdaConnectionOptions).
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store an error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaConnection if connection opening was sucessfull or %NULL if there was an error.
</return>
</function>

<function name="gda_value_get_timestamp">
<description>

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue whose value we want to get.
</parameter_description>
</parameter>
</parameters>
<return> the value stored in @value.
</return>
</function>

<function name="gda_sql_case_free">
<description>
Frees a #GdaSqlCase structure and its members.

</description>
<parameters>
<parameter name="sc">
<parameter_description> a #GdaSqlCase structure to be freed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_config_get_dsn_info">
<description>
Get information about the DSN named @dsn_name. 

@dsn_name&apos;s format is &quot;[&amp;lt;username&amp;gt;[:&amp;lt;password&amp;gt;]@]&amp;lt;DSN&amp;gt;&quot; (if &amp;lt;username&amp;gt;
and optionaly &amp;lt;password&amp;gt; are provided, they are ignored). Also see the gda_dsn_split() utility
function.


</description>
<parameters>
<parameter name="dsn_name">
<parameter_description> the name of the DSN to look for
</parameter_description>
</parameter>
</parameters>
<return> a a pointer to read-only #GdaDsnInfo structure, or %NULL if not found
</return>
</function>

<function name="gda_value_get_blob">
<description>

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue whose value we want to get.
</parameter_description>
</parameter>
</parameters>
<return> the value stored in @value.
</return>
</function>

<function name="gda_data_model_import_clean_errors">
<description>
Clears the history of errors @model has to report

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModelImport object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_select_alter_select_for_empty">
<description>

</description>
<parameters>
</parameters>
<return> a new #GdaStatement
</return>
</function>

<function name="gda_meta_store_create_modify_data_model">
<description>
Creates a new #GdaDataModelArray data model which can be used, after being correctly filled,
with the gda_meta_store_modify*() methods.*

To be used by provider&apos;s implementation


</description>
<parameters>
<parameter name="store">
<parameter_description> a #GdaMetaStore object
</parameter_description>
</parameter>
<parameter name="table_name">
<parameter_description> the name of a table present in @store
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaDataModel
</return>
</function>

<function name="gda_connection_open">
<description>
Tries to open the connection.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the connection is opened, and FALSE otherwise.
</return>
</function>

<function name="gda_batch_get_parameters">
<description>
Get a new #GdaSet object which groups all the execution parameters
which @batch needs for all the statements it includes.
This new object is returned though @out_params.

Note that if @batch does not need any parameter, then @out_params is set to %NULL.


</description>
<parameters>
<parameter name="batch">
<parameter_description> a #GdaBatch object
</parameter_description>
</parameter>
<parameter name="out_params">
<parameter_description> a place to store a new #GdaSet object, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred.
</return>
</function>

<function name="gda_meta_store_get_internal_connection">
<description>
Get a pointer to the #GdaConnection object internally used by @store to store
its contents.

The returned connection can be used to access some other data than the one managed by @store
itself. The returned object is not owned by the caller (if you need to keep it, then use g_object_ref()).
Do not close the connection.


</description>
<parameters>
<parameter name="store">
<parameter_description> a #GdaMetaStore object
</parameter_description>
</parameter>
</parameters>
<return> a #GdaConnection, or %NULL
</return>
</function>

<function name="gda_sql_select_from_new">
<description>
Creates a new #GdaSqlSelectFrom structure and sets its parent to @parent.


</description>
<parameters>
<parameter name="parent">
<parameter_description> a #GdaSqlStatementSelect
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaSqlSelectFrom structure
</return>
</function>

<function name="gda_connection_begin_transaction">
<description>
Starts a transaction on the data source, identified by the
@name parameter.

Before starting a transaction, you can check whether the underlying
provider does support transactions or not by using the
gda_connection_supports_feature() function.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the transation to start, or %NULL
</parameter_description>
</parameter>
<parameter name="level">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the transaction was started successfully, %FALSE
otherwise.
</return>
</function>

<function name="gda_sql_field_new">
<description>
Creates a new #GdaSqlField structure, using @parent as its parent part.


</description>
<parameters>
<parameter name="parent">
<parameter_description> a #GdaSqlStatementSelect, #GdaSqlStatementInsert, #GdaSqlStatementDelete, #GdaSqlStatementUpdate
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaSqlField structure.
</return>
</function>

<function name="gda_data_model_iter_move_next">
<description>
Moves @iter one row further than where it already is 
(synchronizes the values of the parameters in @iter with the values at the new row).

If the iterator was on the data model&apos;s last row, then it can&apos;t be moved forward
anymore, and the returned value is FALSE; nore also that the &quot;current-row&quot; property
is set to -1 (which means that gda_data_model_iter_is_valid() would return FALSE)

If any other error occurred then the returned value is FALSE, but the &quot;current-row&quot;
property is set to the new current row (one row more than it was before the call).


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GdaDataModelIter object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the iterator is now at the next row
</return>
</function>

<function name="gda_batch_copy">
<description>
Copy constructor


</description>
<parameters>
<parameter name="orig">
<parameter_description> a #GdaBatch to make a copy of
</parameter_description>
</parameter>
</parameters>
<return> a the new copy of @orig
</return>
</function>

<function name="gda_data_model_array_set_n_columns">
<description>
Sets the number of columns for rows inserted in this model. 
@cols must be greated than or equal to 0.

Also clears @model&apos;s contents.

</description>
<parameters>
<parameter name="model">
<parameter_description> the #GdaDataModelArray.
</parameter_description>
</parameter>
<parameter name="cols">
<parameter_description> number of columns for rows this data model should use.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_meta_store_schema_get_structure">
<description>
Creates a new #GdaMetaStruct object representing @store&apos;s interal database structure.


</description>
<parameters>
<parameter name="store">
<parameter_description> a #GdaMetaStore object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaMetaStruct object, or %NULL if an error occurred
</return>
</function>

<function name="gda_data_select_set_modification_statement">
<description>
Informs @model that it should allow modifications to the data in some columns and some rows
using @mod_stmt to propagate those modifications into the database.

If @mod_stmt is:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;an UPDATE statement, then all the rows in @model will be modifyable&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;a DELETE statement, then it will be possible to delete rows in @model&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;in INSERT statement, then it will be possible to add some rows to @model&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;any other statement, then this method will return an error&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;

This method can be called several times to specify different types of modification.

If @mod_stmt is an UPDATE or DELETE statement then it should have a WHERE part which identifies
a unique row in @model (please note that this property can&apos;t be checked but may result
in @model behaving in an unpredictable way).

NOTE1: However, if the gda_data_select_set_row_selection_condition()
or gda_data_select_set_row_selection_condition_sql() have been successfully be called before, the WHERE
part of @mod_stmt &amp;lt;emphasis&amp;gt;WILL&amp;lt;/emphasis&amp;gt; be modified to use the row selection condition specified through one of
these methods (please not that it is then possible to avoid specifying a WHERE part in @mod_stmt then).

NOTE2: if gda_data_select_set_row_selection_condition()
or gda_data_select_set_row_selection_condition_sql() have not yet been successfully be called before, then
the WHERE part of @mod_stmt will be used as if one of these functions had been called.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataSelect data model
</parameter_description>
</parameter>
<parameter name="mod_stmt">
<parameter_description> a #GdaStatement (INSERT, UPDATE or DELETE)
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred.
</return>
</function>

<function name="gda_execute_select_command">
<description>
Execute a SQL SELECT command over an opened connection.

Return: a new #GdaDataModel if succesfull, NULL otherwise

</description>
<parameters>
<parameter name="cnc">
<parameter_description> an opened connection
</parameter_description>
</parameter>
<parameter name="sql">
<parameter_description> a query statament must begin with &quot;SELECT&quot;
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_alphanum_to_text">
<description>
Does the opposite of gda_text_to_alphanum(), in the same string 


</description>
<parameters>
<parameter name="text">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> @text if conversion succedded or %NULL if an error occurred
</return>
</function>

<function name="GdaMetaStore">
<description>
This signal is emitted when the contents of a table should be updated (data updated or inserted; 
deleting data is done automatically).


</description>
<parameters>
<parameter name="store">
<parameter_description> the #GdaMetaStore instance that emitted the signal
</parameter_description>
</parameter>
<parameter name="suggest">
<parameter_description> the suggested update, as a #GdaMetaContext structure
</parameter_description>
</parameter>
</parameters>
<return> a new #GError error structure if there was an error when processing the
signal, or %NULL if signal propagation should continue
</return>
</function>

<function name="gda_statement_to_sql_extended">
<description>
Renders @stmt as an SQL statement, with some control on how it is rendered.

If @cnc is not %NULL, then the rendered SQL will better be suited to be used by @cnc (in particular
it may include some SQL tweaks and/or proprietary extensions specific to the database engine used by @cnc).


</description>
<parameters>
<parameter name="stmt">
<parameter_description> a #GdaStatement object
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object, or %NULL
</parameter_description>
</parameter>
<parameter name="params">
<parameter_description> parameters contained in a single #GdaSet object
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of flags to control the rendering
</parameter_description>
</parameter>
<parameter name="params_used">
<parameter_description> a place to store the list of actual #GdaHolder objects in @params used to do the rendering, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new string if no error occurred
</return>
</function>

<function name="gda_holder_set_source_model">
<description>
Sets a limit on the possible values for the @holder holder: the value must be among the values
contained in the @col column of the @model data model.


</description>
<parameters>
<parameter name="holder">
<parameter_description> a #GdaHolder object
</parameter_description>
</parameter>
<parameter name="model">
<parameter_description> a #GdaDataModel object or NULL
</parameter_description>
</parameter>
<parameter name="col">
<parameter_description> the reference column in @model
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_data_model_thaw">
<description>
Re-enables notifications of changes on the given data model.

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_server_operation_get_node_info">
<description>
Get information about the node identified by @path. The returned #GdaServerOperationNode structure can be 
copied but not modified; it may change or cease to exist if @op changes


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
<parameter name="path_format">
<parameter_description> a complete path to a node (starting with &quot;/&quot;)
</parameter_description>
</parameter>
</parameters>
<return> a #GdaServerOperationNode structure, or %NULL if the node was not found
</return>
</function>

<function name="gda_data_select_set_modification_statement_sql">
<description>
Offers the same feature as gda_data_select_set_modification_statement() but using an SQL statement


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataSelect data model
</parameter_description>
</parameter>
<parameter name="sql">
<parameter_description> an SQL text
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred.
</return>
</function>

<function name="gda_server_operation_del_node_from_sequence">
<description>

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
<parameter name="item_path">
<parameter_description> the path to the sequence&apos;s item to remove (like &quot;/SEQ_NAME/5&quot; for instance)
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the specified node has been removed from the sequence
</return>
</function>

<function name="gda_connection_delete_savepoint">
<description>
Delete the SAVEPOINT named @name when not used anymore.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of the savepoint to delete
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_handler_numerical_new">
<description>
Creates a data handler for numerical values


</description>
<parameters>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_pstmt_copy_contents">
<description>
Copies @src&apos;s data to @dest 

</description>
<parameters>
<parameter name="src">
<parameter_description> a #GdaPStmt object
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> a #GdaPStmt object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_quark_list_find">
<description>
Searches for the value identified by @name in the given #GdaQuarkList.


</description>
<parameters>
<parameter name="qlist">
<parameter_description> a #GdaQuarkList.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the value to search for.
</parameter_description>
</parameter>
</parameters>
<return> the value associated with the given key if found, or %NULL
if not found.
</return>
</function>

<function name="gda_column_set_name">
<description>
Sets the name of @column to @name.

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the new name of @column.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_proxy_row_is_inserted">
<description>
Tells if the row number @proxy_row is a row which has been inserted in @proxy
(and is thus not in the proxied data model).


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
<parameter name="proxy_row">
<parameter_description> A proxy row number
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the row is an inserted row
</return>
</function>

<function name="gda_delete_row_from_table">
<description>
This is just a convenient function to delete the row fitting the given condition
from the given table.

@condition must be a valid GValue and must correspond with the GType of the column to use
in the WHERE clause.

The SQL command is like: DELETE FROM table_name WHERE contition_column_name = condition


</description>
<parameters>
<parameter name="cnc">
<parameter_description> an opened connection
</parameter_description>
</parameter>
<parameter name="table_name">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="condition_column_name">
<parameter_description> the name of the column to used in the WHERE condition clause
</parameter_description>
</parameter>
<parameter name="condition">
<parameter_description> a GValue to used to find the row to be deleted 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred, and FALSE and set error otherwise
</return>
</function>

<function name="gda_vconnection_hub_remove">
<description>
Remove all the tables in @hub representing @cnc&apos;s tables.


</description>
<parameters>
<parameter name="hub">
<parameter_description> a #GdaVconnectionHub connection
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_data_select_get_type">
<description>

</description>
<parameters>
</parameters>
<return> the #GType of GdaDataSelect.
</return>
</function>

<function name="gda_data_model_remove_row">
<description>
Removes a row from the data model.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> the row number to be removed.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.
</return>
</function>

<function name="gda_connection_statement_execute">
<description>
Executes @stmt. 

As @stmt can, by desing (and if not abused), contain only one SQL statement, the
return object will either be:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;a #GdaDataSelect object (which is also a #GdaDataModel) if @stmt is a SELECT statement 
(usually a GDA_SQL_STATEMENT_SELECT, see #GdaSqlStatementType)
containing the results of the SELECT. The resulting data model is by default read only, but
modifications can be enabled, see the #GdaDataSelect&apos;s documentation for more information.&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;a #GdaSet for any other SQL statement which correctly executed. In this case
(if the provider supports it), then the #GdaSet may contain value holders named:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;a (gint) #GdaHolder named &quot;IMPACTED_ROWS&quot;&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;a (GObject) #GdaHolder named &quot;EVENT&quot; which contains a #GdaConnectionEvent&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;

If @last_insert_row is not %NULL and @stmt is an INSERT statement, then it will contain (if the
provider used by @cnc supports it) a new #GdaSet object composed of value holders named &quot;+&amp;lt;column number&amp;gt;&quot;
starting at column 0 which contain the actual inserted values. For example if a table is composed of an &apos;id&apos; column
which is auto incremented and a &apos;name&apos; column then the execution of a &quot;INSERT INTO mytable (name) VALUES (&apos;joe&apos;)&quot;
query will return a #GdaSet with two holders:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;one with the &apos;+0&apos; ID which may for example contain 1 (note that its &quot;name&quot; property should be &quot;id&quot;)&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;one with the &apos;+1&apos; ID which will contain &apos;joe&apos; (note that its &quot;name&quot; property should be &quot;name&quot;)&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;

Note1: If @stmt is a SELECT statement which has some parameters and  if @params is %NULL, then the statement can&apos;t
be executed and this method will return %NULL.

Note2: If @stmt is a SELECT statement which has some parameters and  if @params is not %NULL but contains some
invalid parameters, then the statement can&apos;t be executed and this method will return %NULL, unless the
@model_usage has the GDA_STATEMENT_MODEL_ALLOW_NOPARAM flag.

Note3: If @stmt is a SELECT statement which has some parameters and  if @params is not %NULL but contains some
invalid parameters and if @model_usage has the GDA_STATEMENT_MODEL_ALLOW_NOPARAM flag, then the returned
data model will contain no row but will have all the correct columns (even though some of the columns might
report as GDA_TYPE_NULL). In this case, if (after this method call) any of @params&apos; parameters change
then the resulting data model will re-run itself, see the GdaDataSelect&apos;s 
&amp;lt;link linkend=&quot;GdaDataSelect--auto-reset&quot;&amp;gt;auto-reset&amp;lt;/link&amp;gt; property for more information.

Note4: if @model_usage does not contain the GDA_STATEMENT_MODEL_RANDOM_ACCESS or GDA_STATEMENT_MODEL_CURSOR_FORWARD
flags, then the default will be to return a random access data model

Also see the &amp;lt;link linkend=&quot;limitations&quot;&amp;gt;provider&apos;s limitations&amp;lt;/link&amp;gt;, and the
&amp;lt;link linkend=&quot;data-select&quot;&amp;gt;Advanced GdaDataSelect usage&amp;lt;/link&amp;gt; sections.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection
</parameter_description>
</parameter>
<parameter name="stmt">
<parameter_description> a #GdaStatement object
</parameter_description>
</parameter>
<parameter name="params">
<parameter_description> a #GdaSet object (which can be obtained using gda_statement_get_parameters()), or %NULL
</parameter_description>
</parameter>
<parameter name="model_usage">
<parameter_description> in the case where @stmt is a SELECT statement, specifies how the returned data model will be used
</parameter_description>
</parameter>
<parameter name="last_insert_row">
<parameter_description> a place to store a new #GdaSet object which contains the values of the last inserted row, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GObject, or %NULL if an error occurred 
</return>
</function>

<function name="gda_connection_get_authentication">
<description>
Gets the user name used to open this connection.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
</parameters>
<return> the user name.
</return>
</function>

<function name="gda_transaction_status_new">
<description>
Creates a new #GdaTransactionStatus object, which allows a fine-tune and
full control of transactions to be used with providers.


</description>
<parameters>
<parameter name="name">
<parameter_description> name for the transaction
</parameter_description>
</parameter>
</parameters>
<return> the newly created object.
</return>
</function>

<function name="gda_sql_case_serialize">
<description>
Creates a new string representing a CASE clausure. You need to free the returned string
using g_free();


</description>
<parameters>
<parameter name="sc">
<parameter_description> a #GdaSqlCase structure
</parameter_description>
</parameter>
</parameters>
<return> a new string with the description of the CASE clausure or &quot;null&quot; in case @sc is invalid.
</return>
</function>

<function name="gda_blob_free">
<description>
Deallocates all memory associated to the given #GdaBlob.

</description>
<parameters>
<parameter name="boxed">
<parameter_description> #GdaBlob to free.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_holder_set_not_null">
<description>
Sets if the holder can have a NULL value. If @not_null is TRUE, then that won&apos;t be allowed

</description>
<parameters>
<parameter name="holder">
<parameter_description> a #GdaHolder object
</parameter_description>
</parameter>
<parameter name="not_null">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_holder_new">
<description>
Creates a new holder of type @type


</description>
<parameters>
<parameter name="type">
<parameter_description> the #GType requested
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaHolder object
</return>
</function>

<function name="gda_server_operation_set_value_at">
<description>
Set the value for the node at the path formed using @path_format and @... the rules are the same as
for g_strdup_printf()). 

Note that trying to set a value for a path which is not used by the current
provider (such as &quot;/TABLE_OPTIONS_P/TABLE_ENGINE&quot; for a PostgreSQL connection), will &amp;lt;emphasis&amp;gt;not&amp;lt;/emphasis&amp;gt; generate
any error; this allows one to set all the possible parameters and use the same code for several providers.

Here are the possible formats of @path_format:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;If the path corresponds to a #GdaHolder, then the parameter is set to @value&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;If the path corresponds to a sequence item like for example &quot;/SEQUENCE_NAME/5/NAME&quot; for
the &quot;NAME&quot; value of the 6th item of the &quot;SEQUENCE_NAME&quot; sequence then:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;if the sequence already has 6 or more items, then the value is just set to the corresponding 
value in the 6th item of the sequence&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;if the sequence has less then 6 items, then items are added up to the 6th one before setting
the value to the corresponding in the 6th item of the sequence&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;
&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;If the path corresponds to a #GdaDataModel, like for example &quot;/ARRAY/@@COLUMN/5&quot; for the value at the
6th row of the &quot;COLUMN&quot; column of the &quot;ARRAY&quot; data model, then:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;if the data model already contains 6 or more rows, then the value is just set&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;if the data model has less than 6 rows, then rows are added up to the 6th one before setting
the value&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;
&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a string
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors or %NULL
</parameter_description>
</parameter>
<parameter name="path_format">
<parameter_description> a complete path to a node (starting with &quot;/&quot;)
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> arguments to use with @path_format to make a complete path
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_log_error">
<description>
Logs the given error in the GDA log file.

</description>
<parameters>
<parameter name="format">
<parameter_description> format string (see the printf(3) documentation).
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> arguments to insert in the error.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_select_take_row">
<description>
Stores @row into @model, externally advertized at row number @rownum (if no row has been removed). 
The reference to @row is stolen.

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataSelect data model
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> a #GdaRow row
</parameter_description>
</parameter>
<parameter name="rownum">
<parameter_description> &quot;external&quot; advertized row number
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_attributes_manager_get">
<description>
Retreives the value of an attribute previously set using gda_attributes_manager_set().


</description>
<parameters>
<parameter name="mgr">
<parameter_description> a #GdaAttributesManager
</parameter_description>
</parameter>
<parameter name="ptr">
<parameter_description> a pointer to the ressources to which the attribute will apply
</parameter_description>
</parameter>
<parameter name="att_name">
<parameter_description> an attribute&apos;s name, as a *static* string
</parameter_description>
</parameter>
</parameters>
<return> the attribute&apos;s value, or %NULL if the attribute is not set.
</return>
</function>

<function name="gda_pstmt_get_gda_statement">
<description>
Get a pointer to the #GdaStatement which led to the creation of this prepared statement.

Note: if that statement has been modified since the creation of @pstmt, then this method
will return %NULL


</description>
<parameters>
<parameter name="pstmt">
<parameter_description> a #GdaPStmt object
</parameter_description>
</parameter>
</parameters>
<return> the #GdaStatement
</return>
</function>

<function name="gda_sql_field_free">
<description>
Frees a #GdaSqlField structure and its members.


</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaSqlField to be freed.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_server_operation_get_node_parent">
<description>
Get the complete path to the parent of the node defined by @path


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a complete path to a node (starting with &quot;/&quot;)
</parameter_description>
</parameter>
</parameters>
<return> a new string or %NULL if the node does not have any parent or does not exist.
</return>
</function>

<function name="gda_xa_transaction_unregister_connection">
<description>
Unregisters @cnc to be used by @xa_trans to create a distributed transaction. This is
the opposite of gda_xa_transaction_register_connection().

</description>
<parameters>
<parameter name="xa_trans">
<parameter_description> a #GdaXaTransaction object
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> the connection to add to @xa_trans
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_server_operation_get_sequence_name">
<description>

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a complete path to a sequence node (starting with &quot;/&quot;)
</parameter_description>
</parameter>
</parameters>
<return> the name of the sequence at @path
</return>
</function>

<function name="gda_connection_open_from_dsn">
<description>
This function is the way of opening database connections with libgda, using a pre-defined data source (DSN),
see gda_config_define_dsn() for more information about how to define a DSN. If you don&apos;t want to define
a DSN, it is possible to use gda_connection_open_from_string() instead of this method.

The @dsn string must have the following format: &quot;[&amp;lt;username&amp;gt;[:&amp;lt;password&amp;gt;]@]&amp;lt;DSN&amp;gt;&quot; 
(if &amp;lt;username&amp;gt; and/or &amp;lt;password&amp;gt; are provided, and @auth_string is %NULL, then these username
and passwords will be used). Note that if provided, &amp;lt;username&amp;gt; and &amp;lt;password&amp;gt; 
must be encoded as per RFC 1738, see gda_rfc1738_encode() for more information.

The @auth_string can contain the authentication information for the server
to accept the connection. It is a string containing semi-colon seperated named value, usually 
like &quot;USERNAME=...;PASSWORD=...&quot; where the ... are replaced by actual values. Note that each
name and value must be encoded as per RFC 1738, see gda_rfc1738_encode() for more information.

The actual named parameters required depend on the provider being used, and that list is available
as the &amp;lt;parameter&amp;gt;auth_params&amp;lt;/parameter&amp;gt; member of the #GdaProviderInfo structure for each installed
provider (use gda_config_get_provider_info() to get it). Also one can use the &quot;gda-sql-4.0 -L&quot; command to 
list the possible named parameters.


</description>
<parameters>
<parameter name="dsn">
<parameter_description> data source name.
</parameter_description>
</parameter>
<parameter name="auth_string">
<parameter_description> authentication string, or %NULL
</parameter_description>
</parameter>
<parameter name="options">
<parameter_description> options for the connection (see #GdaConnectionOptions).
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store an error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaConnection if connection opening was sucessfull or %NULL if there was an error.
</return>
</function>

<function name="gda_meta_struct_complement_schema">
<description>
This method is similar to gda_meta_struct_complement() but creates #GdaMetaDbObject for all the
database object which are in the @schema schema (and in the @catalog catalog).
If @catalog is %NULL, then any catalog will be used, and
if @schema is %NULL then any schema will be used (if @schema is %NULL then catalog must also be %NULL).


</description>
<parameters>
<parameter name="mstruct">
<parameter_description> a #GdaMetaStruct object
</parameter_description>
</parameter>
<parameter name="catalog">
<parameter_description> name of a catalog, or %NULL
</parameter_description>
</parameter>
<parameter name="schema">
<parameter_description> name of a schema, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_binary_to_string">
<description>
Converts all the non printable characters of bin-&amp;gt;data into the \xxx representation
where xxx is the octal representation of the byte, and the &apos;\&apos; (backslash) character
is converted to &quot;\\&quot;.


</description>
<parameters>
<parameter name="bin">
<parameter_description> a correctly filled @GdaBinary structure
</parameter_description>
</parameter>
<parameter name="maxlen">
<parameter_description> a maximum len used to truncate, or 0 for no maximum length
</parameter_description>
</parameter>
</parameters>
<return> a new string from @bin
</return>
</function>

<function name="gda_config_define_dsn">
<description>
Add or update a DSN from the definition in @info


</description>
<parameters>
<parameter name="info">
<parameter_description> a pointer to a filled GdaDsnInfo structure
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_meta_store_schema_get_all_tables">
<description>
Get an ordered list of the tables @store knows about. The tables are ordered in a way that tables dependencies
are respected: if table B has a foreign key on table A, then table A will be listed before table B in the returned
list.


</description>
<parameters>
<parameter name="store">
<parameter_description> a #GdaMetaStore object
</parameter_description>
</parameter>
</parameters>
<return> a new list of tables names (as gchar*), the list must be freed when no longer needed, 
but the strings present in the list must not be modified.
</return>
</function>

<function name="gda_connection_get_meta_store_data">
<description>
Retreives data stored in @cnc&apos;s associated #GdaMetaStore object. This method is usefull
to easily get some information about the meta-data associated to @cnc, such as the list of
tables, views, and other database objects.

Note: it&apos;s up to the caller to make sure the information contained within @cnc&apos;s associated #GdaMetaStore
is up to date using gda_connection_update_meta_store() (it can become outdated if the database&apos;s schema
is modified).

For more information about the returned data model&apos;s attributes, or about the @meta_type and @... filter arguments,
see &amp;lt;link linkend=&quot;GdaConnectionMetaTypeHead&quot;&amp;gt;this description&amp;lt;/link&amp;gt;.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
<parameter name="meta_type">
<parameter_description> describes which data to get.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
<parameter name="nb_filters">
<parameter_description> the number of filters in the @... argument
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of (filter name (gchar *), filter value (GValue*)) pairs specifying
the filter to apply to the returned data model&apos;s contents (there must be @nb_filters pairs)
</parameter_description>
</parameter>
</parameters>
<return> a #GdaDataModel containing the data required. The caller is responsible
for freeing the returned model using g_object_unref().
</return>
</function>

<function name="gda_server_operation_save_data_to_xml">
<description>
Creates a new #xmlNodePtr tree which can be used to save the #op object. This
XML structure can then be saved to disk if necessary. Use xmlFreeNode to free
the associated memory when not needed anymore.


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #xmlNodePtr structure, or %NULL
</return>
</function>

<function name="gda_server_provider_init_schema_model">
<description>
Sets the column attributes of @model for the requested schema


</description>
<parameters>
<parameter name="model">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="schema">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> TRUE if there was no error
</return>
</function>

<function name="gda_holder_set_value_str">
<description>
Same functionality as gda_holder_set_value() except that it uses a string representation
of the value to set, which will be converted into a GValue first (using default data handler if
@dh is %NULL).

Note1: if @value is %NULL or is the &quot;NULL&quot; string, then @holder&apos;s value is set to %NULL.
Note2: if @holder can&apos;t accept the @value value, then this method returns FALSE, and @holder will be left
in an invalid state.


</description>
<parameters>
<parameter name="holder">
<parameter_description> a #GdaHolder object
</parameter_description>
</parameter>
<parameter name="dh">
<parameter_description> a #GdaDataHandler to use, or %NULL
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a value to set the holder to, as a string
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if value has been set
</return>
</function>

<function name="gda_data_model_array_clear">
<description>
Frees all the rows in @model.

</description>
<parameters>
<parameter name="model">
<parameter_description> the model to clear.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_sql_select_order_free">
<description>
Frees a #GdaSqlSelectOrder structure and its members.

</description>
<parameters>
<parameter name="order">
<parameter_description> a #GdaSqlSelectOrder structure to be freed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_model_get_typed_value_at">
<description>
This method is similar to gda_data_model_get_value_at(), except that it also allows one to specify the expected
#GType of the value to get: if the data model returned a #GValue of a type different than the expected one, then
this method returns %NULL and an error code.

Note: the same limitations and usage instructions apply as for gda_data_model_get_value_at().


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
<parameter name="col">
<parameter_description> a valid column number.
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> a valid row number.
</parameter_description>
</parameter>
<parameter name="expected_type">
<parameter_description> the expected data type of the returned value
</parameter_description>
</parameter>
<parameter name="nullok">
<parameter_description> if TRUE, then NULL values (value of type %GDA_TYPE_NULL) will not generate any error
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GValue containing the value stored in the given
position, or %NULL on error (out-of-bound position, wrong data type, etc).
</return>
</function>

<function name="gda_sql_function_copy">
<description>
Creates a new #GdaSqlFunction structure initated with the values stored in @function.


</description>
<parameters>
<parameter name="function">
<parameter_description> a #GdaSqlFunction structure to be copied
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaSqlFunction structure.
</return>
</function>

<function name="gda_set_copy">
<description>
Creates a new #GdaSet object, opy of @set


</description>
<parameters>
<parameter name="set">
<parameter_description> a #GdaSet object
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaSet object
</return>
</function>

<function name="gda_server_provider_get_data_handler_default">
<description>
Provides the implementation when the default Libgda&apos;s data handlers must be used


</description>
<parameters>
<parameter name="provider">
<parameter_description> a server provider.
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object, or %NULL
</parameter_description>
</parameter>
<parameter name="for_type">
<parameter_description> a #GType
</parameter_description>
</parameter>
<parameter name="dbms_type">
<parameter_description> a DBMS type definition
</parameter_description>
</parameter>
</parameters>
<return> a #GdaDataHandler, or %NULL
</return>
</function>

<function name="GdaSet">
<description>
Gets emitted when gda_set_is_valid() is called, use
this signal to control which combination of values @set&apos;s holder can have (for example to implement some business rules)


</description>
<parameters>
<parameter name="set">
<parameter_description> the object which received the signal
</parameter_description>
</parameter>
</parameters>
<return> NULL if @set&apos;s contents has been validated, or a #GError
otherwise.
</return>
</function>

<function name="gda_connection_get_options">
<description>
Gets the #GdaConnectionOptions used to open this connection.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
</parameters>
<return> the connection options.
</return>
</function>

<function name="gda_server_operation_get_node_type">
<description>
Convenience function to get the type of a node.


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a complete path to a node (starting with &quot;/&quot;)
</parameter_description>
</parameter>
<parameter name="status">
<parameter_description> a place to store the status of the node, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the type of node, or GDA_SERVER_OPERATION_NODE_UNKNOWN if the node was not found
</return>
</function>

<function name="gda_column_set_default_value">
<description>
Sets @column&apos;s default #GValue.

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
<parameter name="default_value">
<parameter_description> default #GValue for the column
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_select_set_row_selection_condition_sql">
<description>
Specifies the SQL condition corresponding to the WHERE part of a SELECT statement which would
return only 1 row (the expression of the primary key).

For example for a table created as &amp;lt;![CDATA[&quot;CREATE TABLE mytable (part1 int NOT NULL, part2 string NOT NULL, 
name string, PRIMARY KEY (part1, part2))&quot;]]&amp;gt;, and if @pmodel corresponds to the execution of the 
&amp;lt;![CDATA[&quot;SELECT name, part1, part2 FROM mytable&quot;]]&amp;gt;, then the sensible value for @sql_where would be
&amp;lt;![CDATA[&quot;part1 = ##-1::int AND part2 = ##-2::string&quot;]]&amp;gt; because the values of the &apos;part1&apos; field are located
in @pmodel&apos;s column number 1 and the values of the &apos;part2&apos; field are located
in @pmodel&apos;s column number 2 and the primary key is composed of (part1, part2).

For more information about the syntax of the parameters (named &amp;lt;![CDATA[&quot;##-1::int&quot;]]&amp;gt; for example), see the
&amp;lt;link linkend=&quot;GdaSqlParser.description&quot;&amp;gt;GdaSqlParser&amp;lt;/link&amp;gt; documentation, and 
gda_data_select_set_modification_statement().


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataSelect data model
</parameter_description>
</parameter>
<parameter name="sql_where">
<parameter_description> an SQL condition (withouth the WHERE keyword)
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_perform_create_database">
<description>
Creates a new database using the specifications in @op. @op can be obtained using
gda_server_provider_create_operation(), or gda_prepare_create_database().


</description>
<parameters>
<parameter name="provider">
<parameter_description> the database provider to use, or %NULL if @op has been created using gda_prepare_create_database()
</parameter_description>
</parameter>
<parameter name="op">
<parameter_description> a #GdaServerOperation object obtained using gda_prepare_create_database()
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store en error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred and the database has been created
</return>
</function>

<function name="gda_connection_internal_set_provider_data">
<description>
Note: calling this function more than once will not make it call @destroy_func on any previously
set opaque @data, you&apos;ll have to do it yourself.

</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> an opaque structure, known only to the provider for which @cnc is opened
</parameter_description>
</parameter>
<parameter name="destroy_func">
<parameter_description> function to call when the connection closes and @data needs to be destroyed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_lockable_unlock">
<description>
Unlocks @lockable. This method should not be called if the current does not already holds a lock on @lockable (having
used gda_lockable_lock() or gda_lockable_trylock()).

This function can be used even if g_thread_init() has not yet been called, and, in that case, will do nothing.

</description>
<parameters>
<parameter name="lockable">
<parameter_description> a #GdaLockable object.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_connection_get_meta_store_data_v">
<description>
see #gda_connection_get_meta_store_data


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
<parameter name="meta_type">
<parameter_description> describes which data to get.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
<parameter name="filters">
<parameter_description> a GList of GdaHolders
</parameter_description>
</parameter>
</parameters>
<return> a #GdaDataModel containing the data required. The caller is responsible
for freeing the returned model using g_object_unref().
</return>
</function>

<function name="gda_data_model_set_column_name">
<description>
Sets the @name of the given @col in @model, and if its title is not set, also sets the
title to @name.

Since: 3.2

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
<parameter name="col">
<parameter_description> column number
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name for the given column.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_value_set_from_value">
<description>
Sets the value of a #GValue from another #GValue. This
is different from #gda_value_copy, which creates a new #GValue.
#gda_value_set_from_value, on the other hand, copies the contents
of @copy into @value, which must already be allocated.


</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue.
</parameter_description>
</parameter>
<parameter name="from">
<parameter_description> the value to copy from.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.
</return>
</function>

<function name="gda_log_enable">
<description>
Enables GDA logs.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gda_data_model_iter_move_to_row_default">
<description>

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gda_data_model_import_from_string">
<description>
Loads the data from @string into @model.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> the string to import data from
</parameter_description>
</parameter>
<parameter name="cols_trans">
<parameter_description> a hash table containing which columns of @model will be imported, or %NULL for all columns
</parameter_description>
</parameter>
<parameter name="options">
<parameter_description> list of options for the export
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred.
</return>
</function>

<function name="gda_statement_check_validity">
<description>
If @cnc is not %NULL then checks that every object (table, field, function) used in @stmt 
actually exists in @cnc&apos;s database

If @cnc is %NULL, then cleans anything related to @cnc in @stmt.

See gda_sql_statement_check_validity() for more information.


</description>
<parameters>
<parameter name="stmt">
<parameter_description> a #GdaStatement object
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if every object actually exists in @cnc&apos;s database
</return>
</function>

<function name="gda_value_free">
<description>
Deallocates all memory associated to a #GValue.

</description>
<parameters>
<parameter name="value">
<parameter_description> the resource to free.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_column_get_allow_null">
<description>
Gets the &apos;allow null&apos; flag of the given column.


</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
</parameters>
<return> whether the given column allows null values or not (%TRUE or %FALSE).
</return>
</function>

<function name="gda_server_provider_get_server_version">
<description>
Get the version of the database to which the connection is opened.


</description>
<parameters>
<parameter name="provider">
<parameter_description> a #GdaServerProvider object.
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
</parameters>
<return> a (read only) string, or %NULL if an error occurred
</return>
</function>

<function name="gda_connection_event_get_description">
<description>
Get the description of the event. Note that is @event&apos;s type is GDA_CONNECTION_EVENT_COMMAND,
the the dsecription is the SQL of the command.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdaConnectionEvent.
</parameter_description>
</parameter>
</parameters>
<return> @event&apos;s description.
</return>
</function>

<function name="gda_data_model_iter_is_valid">
<description>
Tells if @iter is a valid iterator (if it actually corresponds to a valid row in the model)


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GdaDataModelIter object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @iter is valid
</return>
</function>

<function name="gda_data_model_import_get_errors">
<description>
Get the list of errors which @model has to report. The returned list is a list of
#GError structures, and must not be modified


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModelImport object
</parameter_description>
</parameter>
</parameters>
<return> the list of errors (which must not be modified), or %NULL
</return>
</function>

<function name="gda_perform_drop_database">
<description>
Destroys an existing database using the specifications in @op.  @op can be obtained using
gda_server_provider_create_operation(), or gda_prepare_drop_database().


</description>
<parameters>
<parameter name="provider">
<parameter_description> the database provider to use, or %NULL if @op has been created using gda_prepare_drop_database()
</parameter_description>
</parameter>
<parameter name="op">
<parameter_description> a #GdaServerOperation object obtained using gda_prepare_drop_database()
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store en error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred and the database has been destroyed
</return>
</function>

<function name="gda_value_new_timestamp_from_timet">
<description>
Makes a new #GValue of type #GDA_TYPE_TIMESTAMP with value @val
(of type time_t).


</description>
<parameters>
<parameter name="val">
<parameter_description> value to set for the new #GValue.
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GValue.
</return>
</function>

<function name="gda_set_get_holder_value">
<description>
Get the value of the #GdaHolder which ID is @holder_id


</description>
<parameters>
<parameter name="set">
<parameter_description> a #GdaSet object
</parameter_description>
</parameter>
<parameter name="holder_id">
<parameter_description> the ID of the holder to set the value
</parameter_description>
</parameter>
</parameters>
<return> the requested GValue, or %NULL (see gda_holder_get_value())
</return>
</function>

<function name="gda_config_get">
<description>
Get a pointer to the global GdaConfig object


</description>
<parameters>
</parameters>
<return> a non %NULL pointer to a #GdaConfig
</return>
</function>

<function name="gda_server_operation_get_op_type">
<description>
Get the type of operation @op is for


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
</parameters>
<return>
</return>
</function>

<function name="gda_meta_struct_complement_default">
<description>
This method is similar to gda_meta_struct_complement() and gda_meta_struct_complement_all()
but creates #GdaMetaDbObject for all the
database object which are useable using only their short name (that is which do not need to be prefixed by 
the schema in which they are to be used).


</description>
<parameters>
<parameter name="mstruct">
<parameter_description> a #GdaMetaStruct object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_parse_iso8601_time">
<description>
Extracts time parts from @value, and sets @timegda&apos;s contents

Accepted date format is &quot;HH:MM:SS[.ms][TZ]&quot; where TZ is +hour or -hour


</description>
<parameters>
<parameter name="timegda">
<parameter_description> a pointer to a #GdaTime structure which will be filled
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a string
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_config_get_provider">
<description>
Get a pointer to the session-wide #GdaServerProvider for the
provider named @provider_name. The caller must not call g_object_unref() on the
returned object.


</description>
<parameters>
<parameter name="provider_name">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the #GdaServerProvider, or %NULL if an error occurred
</return>
</function>

<function name="gda_statement_copy">
<description>
Copy constructor


</description>
<parameters>
<parameter name="orig">
<parameter_description> a #GdaStatement to make a copy of
</parameter_description>
</parameter>
</parameters>
<return> a the new copy of @orig
</return>
</function>

<function name="gda_sql_function_take_name">
<description>
Sets the function&apos;s arguments to point to @args, then sets the
list&apos;s data elements&apos; parent to @function.


</description>
<parameters>
<parameter name="function">
<parameter_description> a #GdaSqlFunction structure
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> a #GSList to take from
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_model_export_to_string">
<description>
Exports data contained in @model to a string; the format is specified using the @format argument, see the
gda_data_model_export_to_file() documentation for more information about the @options argument (except for the
&quot;OVERWRITE&quot; option).


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the format in which to export data
</parameter_description>
</parameter>
<parameter name="cols">
<parameter_description> an array containing which columns of @model will be exported, or %NULL for all columns
</parameter_description>
</parameter>
<parameter name="nb_cols">
<parameter_description> the number of columns in @cols
</parameter_description>
</parameter>
<parameter name="rows">
<parameter_description> an array containing which rows of @model will be exported, or %NULL for all rows
</parameter_description>
</parameter>
<parameter name="nb_rows">
<parameter_description> the number of rows in @rows
</parameter_description>
</parameter>
<parameter name="options">
<parameter_description> list of options for the export
</parameter_description>
</parameter>
</parameters>
<return> a new string.
</return>
</function>

<function name="gda_connection_event_set_gda_code">
<description>
Sets @event&apos;s gda code: that code is standardized by the libgda
library. If you want to specify the corresponding provider specific code,
use gda_connection_event_get_code() or gda_connection_event_get_sqlstate() instead.

This function should not be called directly

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdaConnectionEvent
</parameter_description>
</parameter>
<parameter name="code">
<parameter_description> a code
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

</root>
