// -*- C++ -*- // this is for the .hg, I realize gensig puts one in

/* statement.h
 *
 * Copyright 2006 libgdamm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or(at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

_DEFS(libgdamm,libgda)
_PINCLUDE(libgdamm/private/object_p.h)

namespace Gnome
{

namespace Gda
{

class Connection;

_WRAP_ENUM (SqlStatementType, GdaSqlStatementType)
_WRAP_ENUM (StatementModelUsage, GdaStatementModelUsage)

/** Container for several values
 *
 * @ingroup Connection
 */
class Statement : public Glib::Object
{
  _CLASS_GOBJECT(Statement, GdaStatement, GDA_STATEMENT, Glib::Object, GObject)
public:
  _WRAP_CREATE()
  
  _WRAP_METHOD(Glib::ustring serialize(), gda_statement_serialize)
  _WRAP_METHOD(static Glib::RefPtr<Statement> deserialize(const Glib::ustring& str), gda_statement_deserialize, errthrow)
  // TODO:
  //_WRAP_METHOD(bool get_parameters ())

  //to_sql(const Glib::RefPtr<Set>& params); //This is a #define
  //_WRAP_METHOD(to_sql_extended(const Glib::RefPtr<Connection>& cnc, const Glib::RefPtr<Set>& params), gda_statement_to_sql, errthrow)

  _WRAP_METHOD(SqlStatementType get_statement_type(), gda_statement_get_statement_type)
  _WRAP_METHOD(bool is_useless() const, gda_statement_is_useless)
  _WRAP_METHOD(bool check_structure() const, gda_statement_check_structure, errthrow)
  _WRAP_METHOD(bool check_validity(const Glib::RefPtr<Connection>& cnc) const, gda_statement_check_validity, errthrow)
  _WRAP_METHOD(bool normalize(const Glib::RefPtr<Connection>& cnc), gda_statement_normalize, errthrow)
  
  _WRAP_PROPERTY("structure", gpointer)

  _WRAP_SIGNAL(void checked(const Glib::RefPtr<Connection>& cnc, bool valid), "checked")
  _WRAP_SIGNAL(void reset(), "reset")
};

} // namespace Gda
} // namespace Gnome

