/* $Id$ */
// -*- C++ -*- //

/* parameter.h
 *
 * Copyright 2003 libgdamm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <libgdamm/object.h>
#include <libgdamm/value.h>
#include <libgdamm/entityfield.h>
//#include <libgda/gda-parameter.h> //TODO: Patch libgda to use the struct _ technique.

_DEFS(libgdamm,libgda)
_PINCLUDE(libgdamm/private/object_p.h)

namespace Gnome
{

namespace Gda
{

/** Exception class for Gda parameter errors.
 */
_WRAP_GERROR(ParameterError, GdaParameterError, GDA_PARAMETER_ERROR)

class DataModel;

class Parameter : public Object
{
  _CLASS_GOBJECT(Parameter, GdaParameter, GDA_PARAMETER, Object, GdaObject)
protected:

  _CTOR_DEFAULT

  Parameter(const Glib::ustring& name, const Value& value);
  _IGNORE(gda_parameter_new_from_value)
  Parameter(const Glib::ustring& name, bool value);
  _IGNORE(gda_parameter_new_boolean)
  Parameter(const Glib::ustring& name, const Glib::ustring& value);
  _IGNORE(gda_parameter_new_string)

public:
  _WRAP_CREATE()
  _WRAP_CREATE(const Glib::ustring& name, bool value);
  _WRAP_CREATE(const Glib::ustring& name, const Glib::ustring& value);
  
  _WRAP_METHOD(void declare_param_user(const Glib::RefPtr<Gda::Object>& user), gda_parameter_declare_param_user)

  typedef Glib::SListHandle< Glib::RefPtr<EntityField> > ListHandleEntityField; 
  #m4 _CONVERSION(`GSList*',`ListHandleEntityField',`$2($3, Glib::OWNERSHIP_NONE)')
  _WRAP_METHOD(ListHandleEntityField get_param_users(), gda_parameter_get_param_users) 

//  _WRAP_METHOD(void gda_parameter_replace_param_users     (GHashTable *replacements);

  Value get_value() const;
  _IGNORE(gda_parameter_get_value)
  
  _WRAP_METHOD(GType get_gda_type() const, gda_parameter_get_gda_type)

  _WRAP_METHOD(void set_value(const Value& value), gda_parameter_set_value)
  _WRAP_METHOD(bool set_value(const Glib::ustring& value), gda_parameter_set_value_str)


  _WRAP_METHOD(void declare_invalid(), gda_parameter_declare_invalid)
  _WRAP_METHOD(bool is_valid() const, gda_parameter_is_valid)

  Value get_default_value() const;
  _IGNORE(gda_parameter_get_default_value)

  _WRAP_METHOD(void set_default_value(const Value& value), gda_parameter_set_default_value)
  _WRAP_METHOD(bool get_exists_default_value(), gda_parameter_get_exists_default_value)
  _WRAP_METHOD(void set_exists_default_value(bool default_value_exists = true), gda_parameter_set_exists_default_value)

  _WRAP_METHOD(void set_not_null(bool not_null = true), gda_parameter_set_not_null)
  _WRAP_METHOD(bool get_not_null() const, gda_parameter_get_not_null)

  _WRAP_METHOD(bool restrict_values(const Glib::RefPtr<DataModel>& model, int col), gda_parameter_restrict_values, errthrow)

  bool has_restrict_values() const;
  bool has_restrict_values(Glib::RefPtr<DataModel>& model, int& col) const;
  _IGNORE(gda_parameter_has_restrict_values)

  _WRAP_METHOD(void bind_to_param(const Glib::RefPtr<Parameter>& bind_to), gda_parameter_bind_to_param)
  _WRAP_METHOD(Glib::RefPtr<Parameter> get_bind_param(), gda_parameter_get_bind_param)

};

} // namespace Gda
} // namespace Gnome

