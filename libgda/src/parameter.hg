/* $Id$ */
// -*- C++ -*- //

/* parameter.h
 *
 * Copyright 2003 libgdamm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <libgdamm/value.h>
#include <glibmm/object.h>
#include <libgda/gda-parameter.h> //TODO: Patch libgda to use the struct _ technique.

_DEFS(libgdamm,libgda)
_PINCLUDE(glibmm/private/object_p.h)

namespace Gnome
{

namespace Gda
{

class Parameter
{
  _CLASS_OPAQUE_COPYABLE(Parameter, GdaParameter, NONE, gda_parameter_copy, gda_parameter_free)
public:

  //Parameter();
  Parameter(const Glib::ustring& name, const Value& value);
  _IGNORE(gda_parameter_new_from_value)
  Parameter(const Glib::ustring& name, bool value);
  _IGNORE(gda_parameter_new_boolean)
  Parameter(const Glib::ustring& name, gdouble value);
  _IGNORE(gda_parameter_new_double)
  Parameter(const Glib::ustring& name, const Glib::RefPtr<Glib::Object>& value);
  _IGNORE(gda_parameter_new_gobject)
  Parameter(const Glib::ustring& name, const Glib::ustring& value);
  _IGNORE(gda_parameter_new_string)

  _WRAP_METHOD(Glib::ustring get_name() const, gda_parameter_get_name)
  _WRAP_METHOD(void set_name(const Glib::ustring& name), gda_parameter_set_name)
  _WRAP_METHOD(Value get_value() const, gda_parameter_get_value)
  _WRAP_METHOD(void set_value(const Value& value), gda_parameter_set_value)

};

} // namespace Gda
} // namespace Gnome

