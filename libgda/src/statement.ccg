// -*- C++ -*- // this is for the .ccg, I realize gensig puts one in

/* statement.cc
 * 
 * Copyright 2003 libgdamm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <libgdamm/statement.h>
#include <libgdamm/connection.h>
#include <libgda/gda-enum-types.h>
#include <libgda/gda-holder.h>
#include <sql-parser/gda-sql-parser-enum-types.h>

namespace Gnome
{

namespace Gda
{

#ifdef GLIBMM_EXCEPTIONS_ENABLED
bool Statement::get_parameters(Glib::RefPtr<Set>& params)
#else
bool Statement::get_parameters(Glib::RefPtr<Set>& params, std::auto_ptr<Glib::Error>& error)
#endif //GLIBMM_EXCEPTIONS_ENABLED
{
  GError* gerror = 0;
  GdaSet* set = 0;
  const bool retval = gda_statement_get_parameters(gobj(), &set, &gerror);

#ifdef GLIBMM_EXCEPTIONS_ENABLED
  if(gerror)
    ::Glib::Error::throw_exception(gerror);
#else
  if(gerror)
    error = ::Glib::Error::throw_exception(gerror);
#endif //GLIBMM_EXCEPTIONS_ENABLED

  if(set)
  {
    params = Glib::wrap(set);
    params->reference();
  }

  return retval;
}

#ifdef GLIBMM_EXCEPTIONS_ENABLED
Glib::ustring Statement::to_sql() const
#else
Glib::ustring Statement::to_sql(std::auto_ptr<Glib::Error>& error) const
#endif //GLIBMM_EXCEPTIONS_ENABLED
{
  GError* gerror = 0;
  const Glib::ustring retval = 
    Glib::convert_return_gchar_ptr_to_ustring(
      gda_statement_to_sql(const_cast<GdaStatement*>(gobj()), 0, &gerror));
#ifdef GLIBMM_EXCEPTIONS_ENABLED
  if(gerror)
    ::Glib::Error::throw_exception(gerror);
#else
  if(gerror)
    error = ::Glib::Error::throw_exception(gerror);
#endif //GLIBMM_EXCEPTIONS_ENABLED

  return retval;
}

#ifdef GLIBMM_EXCEPTIONS_ENABLED
Glib::ustring Statement::to_sql(const Glib::RefPtr<const Set>& params) const
#else
Glib::ustring Statement::to_sql(const Glib::RefPtr<const Set>& params, std::auto_ptr<Glib::Error>& error) const
#endif //GLIBMM_EXCEPTIONS_ENABLED
{
  GError* gerror = 0;
  const Glib::ustring retval = 
    Glib::convert_return_gchar_ptr_to_ustring(
      gda_statement_to_sql(const_cast<GdaStatement*>(gobj()), const_cast<GdaSet*>(Glib::unwrap(params)), &gerror));
#ifdef GLIBMM_EXCEPTIONS_ENABLED
  if(gerror)
    ::Glib::Error::throw_exception(gerror);
#else
  if(gerror)
    error = ::Glib::Error::throw_exception(gerror);
#endif //GLIBMM_EXCEPTIONS_ENABLED
  return retval;
}

#ifdef GLIBMM_EXCEPTIONS_ENABLED
Glib::ustring Statement::to_sql(const Glib::RefPtr<Connection>& cnc, const Glib::RefPtr<const Set>& params, 
                              StatementSqlFlag flags, const HolderVector&) const
#else
Glib::ustring Statement::to_sql(const Glib::RefPtr<Connection>& cnc, const Glib::RefPtr<const Set>& params, 
                              StatementSqlFlag flags, const HolderVector&,
                              std::auto_ptr<Glib::Error>& error) const
#endif //GLIBMM_EXCEPTIONS_ENABLED
{
  GError* gerror = 0;
  GSList* list = 0;
  const Glib::ustring retval = 
    Glib::convert_return_gchar_ptr_to_ustring(
      gda_statement_to_sql_extended(const_cast<GdaStatement*>(gobj()), Glib::unwrap(cnc), const_cast<GdaSet*>(Glib::unwrap(params)), (GdaStatementSqlFlag) flags, &list, &gerror));
#ifdef GLIBMM_EXCEPTIONS_ENABLED
  if(gerror)
    ::Glib::Error::throw_exception(gerror);
#else
  if(gerror)
    error = ::Glib::Error::throw_exception(gerror);
#endif //GLIBMM_EXCEPTIONS_ENABLED
  if (list)
  {
    // FIXME: Set params_used somehow
    // Nope, no way.  The wrapper prototype is just broken.  --danielk
  }
  return retval;
}

} // namespace Gda


} /* namespace Gnome */

