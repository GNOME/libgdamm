/* $Id: entity.hg,v 1.1 2006/11/08 00:07:37 murrayc Exp $ */
// -*- C++ -*- // this is for the .hg, I realize gensig puts one in

/* entity.h
 *
 * Copyright 2003 libgdamm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <libgdamm/object.h>
#include <libgdamm/dicttype.h>
#include <libgdamm/entityfield.h>
#include <glibmm/object.h>
#include <libgda/gda-entity.h>

_DEFS(libgdamm,libgda)
_PINCLUDE(glibmm/private/object_p.h)

namespace Gnome
{

namespace Gda
{

class Entity : public Glib::Interface
{
  _CLASS_INTERFACE(Entity, GdaEntity, GDA_ENTITY, GdaEntityIface)
protected:

public:

  _WRAP_METHOD(bool has_field(const Glib::RefPtr<const EntityField>& field) const, gda_entity_has_field)

  //TODO: Use a ListHandle or similar:
  _WRAP_METHOD(GSList* get_fields(), gda_entity_get_fields)

  _WRAP_METHOD(int get_n_fields() const, gda_entity_get_n_fields)

  _WRAP_METHOD(Glib::RefPtr<EntityField> get_field_by_name(const Glib::ustring& name), gda_entity_get_field_by_name, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const EntityField> get_field_by_name(const Glib::ustring& name) const, gda_entity_get_field_by_name, constversion)

  _WRAP_METHOD(Glib::RefPtr<EntityField> get_field_by_xml_id(const Glib::ustring& xml_id), gda_entity_get_field_by_xml_id, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const EntityField> get_field_by_xml_id(const Glib::ustring& xml_id) const, gda_entity_get_field_by_xml_id, constversion)

  _WRAP_METHOD(Glib::RefPtr<EntityField> get_field_by_index(int index), gda_entity_get_field_by_index, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const EntityField> get_field_by_index(int index) const, gda_entity_get_field_by_index, constversion)

  _WRAP_METHOD(int get_field_index(const Glib::RefPtr<const EntityField>& field) const, gda_entity_get_field_index)
  _WRAP_METHOD(void add_field(const Glib::RefPtr<EntityField>& field), gda_entity_add_field)
  _WRAP_METHOD(void add_field_before(const Glib::RefPtr<EntityField>& field, const Glib::RefPtr<EntityField>& field_before), gda_entity_add_field_before)
  _WRAP_METHOD(void swap_fields(const Glib::RefPtr<EntityField>& field1, const Glib::RefPtr<EntityField>& field2), gda_entity_swap_fields)
  _WRAP_METHOD(void remove_field(const Glib::RefPtr<EntityField>& field), gda_entity_remove_field)

  _WRAP_METHOD(bool is_writable() const, gda_entity_is_writable)


  //TODO: vfuncs and signals.
};

} // namespace Gda
} // namespace Gnome

