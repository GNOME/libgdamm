// -*- C++ -*- // this is for the .ccg, I realize gensig puts one in

/* metastore.cc
 * 
 * Copyright 2003 libgdamm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <libgdamm/metastore.h>
#include <libgda/gda-meta-store.h>
#include <libgda/gda-enum-types.h>

namespace Gnome
{

namespace Gda
{
  
Glib::RefPtr<DataModel> MetaStore::extract(const Glib::ustring& sql)
{
  GError* gerror = 0;
  Glib::RefPtr<DataModel> retval = Glib::wrap(gda_meta_store_extract(gobj(), sql.c_str(), &gerror));

  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return retval;
}

bool MetaStore::modify(const Glib::ustring& sql, const Glib::RefPtr<DataModel>& data_model, const Glib::ustring& condition)
{
  GError* gerror = 0;
  bool retval = static_cast<bool>(gda_meta_store_modify(gobj(), sql.c_str(), Glib::unwrap(data_model), condition.c_str(), &gerror));

  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return retval;
}

bool MetaStore::get_attribute_value(const Glib::ustring& att_name, Glib::ustring& att_value)
{
  GError* gerror = 0;
  gchar* c_att_value = 0;
  bool retval = gda_meta_store_get_attribute_value(gobj(), att_name.c_str(), &c_att_value, &gerror);

  if(gerror)
    ::Glib::Error::throw_exception(gerror);
  if (c_att_value)
    att_value = c_att_value;

  return retval;
}

}

} /* namespace Gnome */

