// -*- C++ -*- // this is for the .ccg, I realize gensig puts one in

/* xatransaction.cc
 * 
 * Copyright 2003 libgdamm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <libgda/gda-xa-transaction.h>

namespace Gnome
{

namespace Gda
{

typedef Glib::SListHandle< Glib::RefPtr<Connection> > ConnectionSList;
  
#ifdef GLIBMM_EXCEPTIONS_ENABLED
bool XaTransaction::commit(ConnectionList& cncs_to_recover)
#else
bool XaTransaction::commit(ConnectionList& cncs_to_recover, std::auto_ptr<Glib::Error>& error)
#endif //GLIBMM_EXCEPTIONS_ENABLED
{
  GError* gerror = 0;
  GSList* cncs = NULL;
  bool retvalue = gda_xa_transaction_commit (gobj(), &cncs, &gerror);
#ifdef GLIBMM_EXCEPTIONS_ENABLED
  if(gerror)
    ::Glib::Error::throw_exception(gerror);
#else
  if(gerror)
    error = ::Glib::Error::throw_exception(gerror);
#endif //GLIBMM_EXCEPTIONS_ENABLED

  ConnectionSList cncs_cpp(cncs, Glib::OWNERSHIP_SHALLOW);
  for (ConnectionSList::const_iterator i = cncs_cpp.begin();
       i != cncs_cpp.end(); i++)
  {
    cncs_to_recover.push_back(*i);
  }
  
  return retvalue;
}

#ifdef GLIBMM_EXCEPTIONS_ENABLED
bool XaTransaction::commit_recovered(ConnectionList& cncs_to_recover)
#else
bool XaTransaction::commit_recovered(ConnectionList& cncs_to_recover, std::auto_ptr<Glib::Error>& error)
#endif //GLIBMM_EXCEPTIONS_ENABLED
{
  GError* gerror = 0;
  GSList* cncs = NULL;
  bool retvalue = gda_xa_transaction_commit_recovered (gobj(), &cncs, &gerror);
#ifdef GLIBMM_EXCEPTIONS_ENABLED
  if(gerror)
    ::Glib::Error::throw_exception(gerror);
#else
  if(gerror)
    error = ::Glib::Error::throw_exception(gerror);
#endif //GLIBMM_EXCEPTIONS_ENABLED

  ConnectionSList cncs_cpp(cncs, Glib::OWNERSHIP_SHALLOW);
  for (ConnectionSList::const_iterator i = cncs_cpp.begin();
       i != cncs_cpp.end(); i++)
  {
    cncs_to_recover.push_back(*i);
  }
  
  return retvalue;
}

}

} /* namespace Gnome */

