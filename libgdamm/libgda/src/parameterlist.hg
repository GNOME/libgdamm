/* $Id: parameterlist.hg,v 1.11 2006/11/30 06:58:55 murrayc Exp $ */
// -*- C++ -*- //

/* parameterlist.h
 *
 * Copyright 2003 libgdamm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <glibmm/object.h>
#include <libgdamm/parameter.h>

_DEFS(libgdamm,libgda)
_PINCLUDE(glibmm/private/object_p.h)

namespace Gnome
{

namespace Gda
{

/** Exception class for Gda parameter list errors.
 */
_WRAP_GERROR(ParameterListError, GdaParameterListError, GDA_PARAMETER_LIST_ERROR)

class ParameterList : public Glib::Object
{
  _CLASS_GOBJECT(ParameterList, GdaParameterList, GDA_PARAMETER_LIST, Glib::Object, GObject)
protected:

  _CTOR_DEFAULT

public:
  _WRAP_CREATE()

  
  operator bool() const;

  _WRAP_METHOD(guint get_length(), gda_parameter_list_get_length)


  _WRAP_METHOD(void add_parameter(const Glib::RefPtr<Parameter>& param), gda_parameter_list_add_param)
  _WRAP_METHOD(Glib::RefPtr<Parameter> add_parameter(const Glib::ustring& name, GType type, const Glib::ustring& str), gda_parameter_list_add_param_from_string)
  _WRAP_METHOD(Glib::RefPtr<Parameter> add_parameter(const Glib::ustring& name, const Value& value), gda_parameter_list_add_param_from_value)

  _WRAP_METHOD(void add_param(const Glib::RefPtr<Parameter>& param), gda_parameter_list_add_param)
  _WRAP_METHOD(Glib::RefPtr<Parameter> add_param_from_string(const Glib::ustring& name, GType type, const Glib::ustring& str), gda_parameter_list_add_param_from_string)
  _WRAP_METHOD(Glib::RefPtr<Parameter> add_param_from_value(const Glib::ustring& name, const Value& value), gda_parameter_list_add_param_from_value)
  _WRAP_METHOD(void merge(const Glib::RefPtr<ParameterList>& paramlist_to_merge), gda_parameter_list_merge)
  _WRAP_METHOD(bool is_coherent() const, gda_parameter_list_is_coherent, errthrow)
  _WRAP_METHOD(bool is_valid() const, gda_parameter_list_is_valid)
 

  _WRAP_METHOD(Glib::RefPtr<Parameter> find_param(const Glib::ustring& param_name), gda_parameter_list_find_param)
  //_WRAP_METHOD(Glib::RefPtr<Parameter> find_param_for_user(const Glib::RefPtr<Object>& user), gda_parameter_list_find_param_for_user)

  //TODO: What on earth are these for? Who should use them, and when?
  //_WRAP_METHOD(GdaParameterListNode* find_node_for_param(const Glib::RefPtr<Parameter>& param), gda_parameter_list_find_node_for_param)
  //_WRAP_METHOD(GdaParameterListSource* find_source(const Glib::RefPtr<DataModel>& model), gda_parameter_list_find_source)
  //_WRAP_METHOD(GdaParameterListSource* find_source_for_param(const Glib::RefPtr<Parameter>& param), gda_parameter_list_find_source_for_param)
  //_WRAP_METHOD(GdaParameterListGroup* find_group_for_param(const Glib::RefPtr<Parameter>& param), gda_parameter_list_find_group_for_param)

  _WRAP_METHOD(void set_param_default_value(const Glib::RefPtr<const Parameter>& param, const Value& value), gda_parameter_list_set_param_default_value)
  _WRAP_METHOD(void set_param_default_alias(const Glib::RefPtr<const Parameter>& param, const Glib::RefPtr<const Parameter>& alias), gda_parameter_list_set_param_default_alias)
  Value get_param_default_value(const Glib::RefPtr<const Parameter>& param) const;
  _IGNORE(gda_parameter_list_get_param_default_value)

  _WRAP_METHOD(Glib::ustring get_spec() const, gda_parameter_list_get_spec)
  _WRAP_METHOD(guint get_length() const, gda_parameter_list_get_length)


};

} // namespace Gda
} // namespace Gnome

